/*
 * Generated by Bluespec Compiler (build 7d25cde)
 * 
 * On Sat Mar 23 17:25:05 EDT 2024
 * 
 */

/* Generation options: */
#ifndef __mkEchoRequestInput_h__
#define __mkEchoRequestInput_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkEchoRequestInput module */
class MOD_mkEchoRequestInput : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_say2_requestAdapter_fbnbuff;
  MOD_Fifo<tUInt32> INST_say2_requestAdapter_fifo;
  MOD_Reg<tUInt32> INST_say_requestAdapter_fbnbuff;
  MOD_Fifo<tUInt32> INST_say_requestAdapter_fifo;
  MOD_Reg<tUInt32> INST_setLeds_requestAdapter_fbnbuff;
  MOD_Fifo<tUInt8> INST_setLeds_requestAdapter_fifo;
 
 /* Constructor */
 public:
  MOD_mkEchoRequestInput(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_setLeds_requestAdapter_fifo_i_notEmpty____d13;
  tUInt8 DEF_say2_requestAdapter_fifo_i_notEmpty____d12;
  tUInt8 DEF_say_requestAdapter_fifo_i_notEmpty____d11;
  tUInt8 DEF_setLeds_requestAdapter_fifo_notFull____d9;
  tUInt8 DEF_say2_requestAdapter_fifo_notFull____d6;
  tUInt8 DEF_say_requestAdapter_fifo_notFull____d4;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  tUInt32 METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber);
  tUInt8 METH_RDY_portalIfc_messageSize_size();
  tUInt8 METH_portalIfc_intr_status();
  tUInt8 METH_RDY_portalIfc_intr_status();
  tUInt32 METH_portalIfc_intr_channel();
  tUInt8 METH_RDY_portalIfc_intr_channel();
  void METH_portalIfc_requests_0_enq(tUInt32 ARG_portalIfc_requests_0_enq_v);
  tUInt8 METH_RDY_portalIfc_requests_0_enq();
  tUInt8 METH_portalIfc_requests_0_notFull();
  tUInt8 METH_RDY_portalIfc_requests_0_notFull();
  void METH_portalIfc_requests_1_enq(tUInt32 ARG_portalIfc_requests_1_enq_v);
  tUInt8 METH_RDY_portalIfc_requests_1_enq();
  tUInt8 METH_portalIfc_requests_1_notFull();
  tUInt8 METH_RDY_portalIfc_requests_1_notFull();
  void METH_portalIfc_requests_2_enq(tUInt32 ARG_portalIfc_requests_2_enq_v);
  tUInt8 METH_RDY_portalIfc_requests_2_enq();
  tUInt8 METH_portalIfc_requests_2_notFull();
  tUInt8 METH_RDY_portalIfc_requests_2_notFull();
  tUInt32 METH_pipes_say_PipeOut_first();
  tUInt8 METH_RDY_pipes_say_PipeOut_first();
  void METH_pipes_say_PipeOut_deq();
  tUInt8 METH_RDY_pipes_say_PipeOut_deq();
  tUInt8 METH_pipes_say_PipeOut_notEmpty();
  tUInt8 METH_RDY_pipes_say_PipeOut_notEmpty();
  tUInt32 METH_pipes_say2_PipeOut_first();
  tUInt8 METH_RDY_pipes_say2_PipeOut_first();
  void METH_pipes_say2_PipeOut_deq();
  tUInt8 METH_RDY_pipes_say2_PipeOut_deq();
  tUInt8 METH_pipes_say2_PipeOut_notEmpty();
  tUInt8 METH_RDY_pipes_say2_PipeOut_notEmpty();
  tUInt8 METH_pipes_setLeds_PipeOut_first();
  tUInt8 METH_RDY_pipes_setLeds_PipeOut_first();
  void METH_pipes_setLeds_PipeOut_deq();
  tUInt8 METH_RDY_pipes_setLeds_PipeOut_deq();
  tUInt8 METH_pipes_setLeds_PipeOut_notEmpty();
  tUInt8 METH_RDY_pipes_setLeds_PipeOut_notEmpty();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkEchoRequestInput &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkEchoRequestInput &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkEchoRequestInput &backing);
};

#endif /* ifndef __mkEchoRequestInput_h__ */
