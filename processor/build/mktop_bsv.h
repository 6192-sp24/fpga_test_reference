/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Sat Mar 23 16:46:34 EDT 2024
 * 
 */

/* Generation options: */
#ifndef __mktop_bsv_h__
#define __mktop_bsv_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mktop_bsv module */
class MOD_mktop_bsv : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_BRAM<tUInt32,tUInt32,tUInt8> INST_bram_memory;
  MOD_Reg<tUInt8> INST_bram_serverAdapterA_cnt;
  MOD_Wire<tUInt8> INST_bram_serverAdapterA_cnt_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapterA_cnt_2;
  MOD_Wire<tUInt8> INST_bram_serverAdapterA_cnt_3;
  MOD_Reg<tUInt8> INST_bram_serverAdapterA_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_bram_serverAdapterA_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_bram_serverAdapterA_outData_dequeueing;
  MOD_Wire<tUInt32> INST_bram_serverAdapterA_outData_enqw;
  MOD_Fifo<tUInt32> INST_bram_serverAdapterA_outData_ff;
  MOD_Reg<tUInt8> INST_bram_serverAdapterA_s1;
  MOD_Wire<tUInt8> INST_bram_serverAdapterA_s1_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapterA_writeWithResp;
  MOD_Reg<tUInt8> INST_bram_serverAdapterB_cnt;
  MOD_Wire<tUInt8> INST_bram_serverAdapterB_cnt_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapterB_cnt_2;
  MOD_Wire<tUInt8> INST_bram_serverAdapterB_cnt_3;
  MOD_Reg<tUInt8> INST_bram_serverAdapterB_outData_beforeDeq;
  MOD_Reg<tUInt8> INST_bram_serverAdapterB_outData_beforeEnq;
  MOD_Wire<tUInt8> INST_bram_serverAdapterB_outData_dequeueing;
  MOD_Wire<tUInt32> INST_bram_serverAdapterB_outData_enqw;
  MOD_Fifo<tUInt32> INST_bram_serverAdapterB_outData_ff;
  MOD_Reg<tUInt8> INST_bram_serverAdapterB_s1;
  MOD_Wire<tUInt8> INST_bram_serverAdapterB_s1_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapterB_writeWithResp;
  MOD_Reg<tUInt32> INST_cycle_count;
  MOD_Reg<tUWide> INST_dreq;
  MOD_Reg<tUWide> INST_ireq;
  MOD_Fifo<tUWide> INST_mmioreq;
  MOD_Reg<tUInt64> INST_rv_core_dInst;
  MOD_CReg<tUWide> INST_rv_core_fromDmem_rv;
  MOD_CReg<tUWide> INST_rv_core_fromImem_rv;
  MOD_CReg<tUWide> INST_rv_core_fromMMIO_rv;
  MOD_Reg<tUInt32> INST_rv_core_lfh;
  MOD_Reg<tUInt8> INST_rv_core_mem_business;
  MOD_Reg<tUInt32> INST_rv_core_pc;
  MOD_Reg<tUInt32> INST_rv_core_rf_0;
  MOD_Reg<tUInt32> INST_rv_core_rf_1;
  MOD_Reg<tUInt32> INST_rv_core_rf_10;
  MOD_Reg<tUInt32> INST_rv_core_rf_11;
  MOD_Reg<tUInt32> INST_rv_core_rf_12;
  MOD_Reg<tUInt32> INST_rv_core_rf_13;
  MOD_Reg<tUInt32> INST_rv_core_rf_14;
  MOD_Reg<tUInt32> INST_rv_core_rf_15;
  MOD_Reg<tUInt32> INST_rv_core_rf_16;
  MOD_Reg<tUInt32> INST_rv_core_rf_17;
  MOD_Reg<tUInt32> INST_rv_core_rf_18;
  MOD_Reg<tUInt32> INST_rv_core_rf_19;
  MOD_Reg<tUInt32> INST_rv_core_rf_2;
  MOD_Reg<tUInt32> INST_rv_core_rf_20;
  MOD_Reg<tUInt32> INST_rv_core_rf_21;
  MOD_Reg<tUInt32> INST_rv_core_rf_22;
  MOD_Reg<tUInt32> INST_rv_core_rf_23;
  MOD_Reg<tUInt32> INST_rv_core_rf_24;
  MOD_Reg<tUInt32> INST_rv_core_rf_25;
  MOD_Reg<tUInt32> INST_rv_core_rf_26;
  MOD_Reg<tUInt32> INST_rv_core_rf_27;
  MOD_Reg<tUInt32> INST_rv_core_rf_28;
  MOD_Reg<tUInt32> INST_rv_core_rf_29;
  MOD_Reg<tUInt32> INST_rv_core_rf_3;
  MOD_Reg<tUInt32> INST_rv_core_rf_30;
  MOD_Reg<tUInt32> INST_rv_core_rf_31;
  MOD_Reg<tUInt32> INST_rv_core_rf_4;
  MOD_Reg<tUInt32> INST_rv_core_rf_5;
  MOD_Reg<tUInt32> INST_rv_core_rf_6;
  MOD_Reg<tUInt32> INST_rv_core_rf_7;
  MOD_Reg<tUInt32> INST_rv_core_rf_8;
  MOD_Reg<tUInt32> INST_rv_core_rf_9;
  MOD_Reg<tUInt32> INST_rv_core_rv1;
  MOD_Reg<tUInt32> INST_rv_core_rv2;
  MOD_Reg<tUInt32> INST_rv_core_rvd;
  MOD_Reg<tUInt8> INST_rv_core_starting;
  MOD_Reg<tUInt8> INST_rv_core_state;
  MOD_CReg<tUWide> INST_rv_core_toDmem_rv;
  MOD_CReg<tUWide> INST_rv_core_toImem_rv;
  MOD_CReg<tUWide> INST_rv_core_toMMIO_rv;
  MOD_Reg<tUInt32> INST_status;
 
 /* Constructor */
 public:
  MOD_mktop_bsv(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_getStatus;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_getStatus;
  tUInt8 DEF_rv_core_mem_business_78_BIT_0___d587;
  tUInt8 DEF_rv_core_dInst_86_BIT_6___d387;
  tUInt32 DEF_rv_core_rv1_92_PLUS_IF_rv_core_dInst_86_BIT_35_ETC___d433;
  tUWide DEF_rv_core_fromMMIO_rv_port1__read____d588;
  tUWide DEF_rv_core_fromMMIO_rv_port0__read____d771;
  tUWide DEF_rv_core_toMMIO_rv_port1__read____d751;
  tUWide DEF_rv_core_toMMIO_rv_port0__read____d439;
  tUWide DEF_rv_core_fromDmem_rv_port1__read____d590;
  tUWide DEF_rv_core_fromDmem_rv_port0__read____d742;
  tUWide DEF_rv_core_toDmem_rv_port1__read____d729;
  tUWide DEF_rv_core_toDmem_rv_port0__read____d442;
  tUWide DEF_rv_core_fromImem_rv_port1__read____d111;
  tUWide DEF_rv_core_fromImem_rv_port0__read____d720;
  tUWide DEF_rv_core_toImem_rv_port1__read____d707;
  tUWide DEF_rv_core_toImem_rv_port0__read____d100;
  tUInt64 DEF_rv_core_dInst___d386;
  tUInt32 DEF_rs1_val__h11376;
  tUInt8 DEF_rv_core_mem_business___d578;
  tUInt8 DEF_b__h2255;
  tUInt8 DEF_b__h910;
  tUInt8 DEF_bram_serverAdapterB_s1___d84;
  tUInt8 DEF_bram_serverAdapterA_s1___d35;
  tUInt8 DEF_bram_serverAdapterB_cnt_3_whas____d63;
  tUInt8 DEF_bram_serverAdapterB_cnt_2_whas____d61;
  tUInt8 DEF_bram_serverAdapterB_cnt_1_whas____d60;
  tUInt8 DEF_bram_serverAdapterB_outData_ff_i_notEmpty____d54;
  tUInt8 DEF_bram_serverAdapterA_cnt_3_whas____d13;
  tUInt8 DEF_bram_serverAdapterA_cnt_2_whas____d11;
  tUInt8 DEF_bram_serverAdapterA_cnt_1_whas____d10;
  tUInt8 DEF_bram_serverAdapterA_outData_ff_i_notEmpty____d4;
  tUInt32 DEF_rv_core_rv1_92_PLUS_IF_rv_core_dInst_86_BIT_35_ETC___d432;
  tUInt32 DEF_x__h10044;
  tUInt8 DEF_rv_core_dInst_86_BITS_11_TO_7___d403;
  tUInt8 DEF_rv_core_dInst_86_BITS_34_TO_32___d394;
  tUInt8 DEF_rv_core_mem_business_78_BITS_5_TO_3___d579;
  tUInt8 DEF_rv_core_dInst_86_BIT_36___d456;
  tUInt8 DEF_rv_core_dInst_86_BIT_35___d393;
  tUInt8 DEF_rv_core_dInst_86_BIT_31___d408;
  tUInt8 DEF_bram_serverAdapterB_s1_4_BIT_0___d85;
  tUInt8 DEF_bram_serverAdapterA_s1_5_BIT_0___d36;
  tUInt32 DEF_imm__h9901;
  tUInt8 DEF_IF_rv_core_dInst_86_BIT_35_93_THEN_rv_core_dIn_ETC___d395;
  tUInt8 DEF_rv_core_dInst_86_BITS_4_TO_3_88_EQ_0b0___d389;
  tUInt8 DEF_NOT_rv_core_dInst_86_BIT_36_56___d457;
  tUInt32 DEF_x__h10321;
  tUInt32 DEF_x__h10160;
  tUInt32 DEF_x__h10091;
 
 /* Local definitions */
 private:
  tUWide DEF_mmioreq_first____d775;
  tUWide DEF_dreq___d746;
  tUWide DEF_ireq___d724;
  tUInt32 DEF_pc__h11378;
  tUInt32 DEF_x_wget__h1764;
  tUInt32 DEF_x_wget__h416;
  tUWide DEF_rv_core_toMMIO_rv_port1__read__51_BITS_67_TO_0___d769;
  tUWide DEF_rv_core_toDmem_rv_port1__read__29_BITS_67_TO_0___d733;
  tUWide DEF_rv_core_toImem_rv_port1__read__07_BITS_67_TO_0___d711;
  tUInt32 DEF__read_inst__h9754;
  tUInt8 DEF_rv_core_dInst_86_BIT_39___d450;
  tUInt8 DEF_rv_core_dInst_86_BIT_38___d452;
  tUInt8 DEF_rv_core_dInst_86_BIT_37___d454;
  tUInt32 DEF_x__h514;
  tUInt32 DEF_x__h1862;
  tUInt8 DEF_NOT_rv_core_dInst_86_BIT_6_87_76_AND_rv_core_d_ETC___d477;
  tUInt8 DEF__0_CONCAT_DONTCARE___d26;
  tUInt8 DEF_rv_core_dInst_86_BITS_34_TO_32_94_EQ_3___d465;
  tUInt8 DEF_rv_core_dInst_86_BITS_34_TO_32_94_EQ_2___d463;
  tUInt8 DEF_rv_core_dInst_86_BITS_34_TO_32_94_EQ_1___d461;
  tUInt8 DEF_rv_core_dInst_86_BITS_34_TO_32_94_EQ_0___d459;
  tUInt8 DEF_NOT_rv_core_dInst_86_BIT_39_50___d451;
  tUInt8 DEF_rv_core_dInst_86_BIT_35_93_AND_NOT_rv_core_dIn_ETC___d474;
  tUInt8 DEF_rv_core_dInst_86_BIT_35_93_AND_rv_core_dInst_8_ETC___d466;
  tUInt8 DEF_rv_core_dInst_86_BIT_35_93_AND_rv_core_dInst_8_ETC___d464;
  tUInt8 DEF_rv_core_dInst_86_BIT_35_93_AND_rv_core_dInst_8_ETC___d462;
  tUInt8 DEF_rv_core_dInst_86_BIT_35_93_AND_rv_core_dInst_8_ETC___d460;
  tUInt8 DEF_NOT_rv_core_dInst_86_BIT_35_93___d458;
  tUInt8 DEF_NOT_rv_core_dInst_86_BIT_37_54___d455;
  tUInt8 DEF_NOT_rv_core_dInst_86_BIT_38_52___d453;
  tUWide DEF__16_CONCAT_rv_core_pc_09_CONCAT_0___d110;
  tUWide DEF__1_CONCAT_mmioreq_first__75___d776;
  tUWide DEF__1_CONCAT_ireq_24_BITS_67_TO_32_25_CONCAT_IF_br_ETC___d728;
  tUWide DEF__1_CONCAT_dreq_46_BITS_67_TO_32_47_CONCAT_IF_br_ETC___d750;
  tUWide DEF__1_CONCAT_IF_rv_core_dInst_86_BIT_5_79_THEN_IF__ETC___d497;
  tUWide DEF__0_CONCAT_DONTCARE___d116;
 
 /* Rules */
 public:
  void RL_bram_serverAdapterA_outData_enqueue();
  void RL_bram_serverAdapterA_outData_dequeue();
  void RL_bram_serverAdapterA_cnt_finalAdd();
  void RL_bram_serverAdapterA_s1__dreg_update();
  void RL_bram_serverAdapterA_stageReadResponseAlways();
  void RL_bram_serverAdapterA_moveToOutFIFO();
  void RL_bram_serverAdapterA_overRun();
  void RL_bram_serverAdapterB_outData_enqueue();
  void RL_bram_serverAdapterB_outData_dequeue();
  void RL_bram_serverAdapterB_cnt_finalAdd();
  void RL_bram_serverAdapterB_s1__dreg_update();
  void RL_bram_serverAdapterB_stageReadResponseAlways();
  void RL_bram_serverAdapterB_moveToOutFIFO();
  void RL_bram_serverAdapterB_overRun();
  void RL_rv_core_fetch();
  void RL_rv_core_decode();
  void RL_rv_core_execute();
  void RL_rv_core_writeback();
  void RL_tic();
  void RL_requestI();
  void RL_responseI();
  void RL_requestD();
  void RL_responseD();
  void RL_requestMMIO();
  void RL_responseMMIO();
 
 /* Methods */
 public:
  tUInt32 METH_getStatus();
  tUInt8 METH_RDY_getStatus();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mktop_bsv &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mktop_bsv &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mktop_bsv &backing);
};

#endif /* ifndef __mktop_bsv_h__ */
