//
// Generated by Bluespec Compiler (build 7d25cde)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule pcie_rxn  CF ( pcie_rxn,
// 			pcie_rxp,
// 			pcie_txn,
// 			pcie_txp,
// 			user_lnk_up,
// 			tlpr_request_put,
// 			tlpr_response_get,
// 			tlpc_request_put,
// 			tlpc_response_get,
// 			interruptRequest_put,
// 			regChanges_first,
// 			regChanges_deq,
// 			regChanges_notEmpty );
//
// schedule pcie_rxp  CF ( pcie_rxn,
// 			pcie_rxp,
// 			pcie_txn,
// 			pcie_txp,
// 			user_lnk_up,
// 			tlpr_request_put,
// 			tlpr_response_get,
// 			tlpc_request_put,
// 			tlpc_response_get,
// 			interruptRequest_put,
// 			regChanges_first,
// 			regChanges_deq,
// 			regChanges_notEmpty );
//
// schedule pcie_txn  CF ( pcie_rxn,
// 			pcie_rxp,
// 			pcie_txn,
// 			pcie_txp,
// 			user_lnk_up,
// 			tlpr_request_put,
// 			tlpr_response_get,
// 			tlpc_request_put,
// 			tlpc_response_get,
// 			interruptRequest_put,
// 			regChanges_first,
// 			regChanges_deq,
// 			regChanges_notEmpty );
//
// schedule pcie_txp  CF ( pcie_rxn,
// 			pcie_rxp,
// 			pcie_txn,
// 			pcie_txp,
// 			user_lnk_up,
// 			tlpr_request_put,
// 			tlpr_response_get,
// 			tlpc_request_put,
// 			tlpc_response_get,
// 			interruptRequest_put,
// 			regChanges_first,
// 			regChanges_deq,
// 			regChanges_notEmpty );
//
// schedule user_lnk_up  CF ( pcie_rxn,
// 			   pcie_rxp,
// 			   pcie_txn,
// 			   pcie_txp,
// 			   user_lnk_up,
// 			   tlpr_request_put,
// 			   tlpr_response_get,
// 			   tlpc_request_put,
// 			   tlpc_response_get,
// 			   interruptRequest_put,
// 			   regChanges_first,
// 			   regChanges_deq,
// 			   regChanges_notEmpty );
//
// schedule tlpr_request_put  CF ( pcie_rxn,
// 				pcie_rxp,
// 				pcie_txn,
// 				pcie_txp,
// 				user_lnk_up,
// 				tlpr_response_get,
// 				tlpc_request_put,
// 				tlpc_response_get,
// 				interruptRequest_put,
// 				regChanges_first,
// 				regChanges_deq,
// 				regChanges_notEmpty );
// schedule tlpr_request_put  C ( tlpr_request_put );
//
// schedule tlpr_response_get  CF ( pcie_rxn,
// 				 pcie_rxp,
// 				 pcie_txn,
// 				 pcie_txp,
// 				 user_lnk_up,
// 				 tlpr_request_put,
// 				 tlpc_request_put,
// 				 tlpc_response_get,
// 				 interruptRequest_put,
// 				 regChanges_first,
// 				 regChanges_deq,
// 				 regChanges_notEmpty );
// schedule tlpr_response_get  C ( tlpr_response_get );
//
// schedule tlpc_request_put  CF ( pcie_rxn,
// 				pcie_rxp,
// 				pcie_txn,
// 				pcie_txp,
// 				user_lnk_up,
// 				tlpr_request_put,
// 				tlpr_response_get,
// 				tlpc_response_get,
// 				interruptRequest_put,
// 				regChanges_first,
// 				regChanges_deq,
// 				regChanges_notEmpty );
// schedule tlpc_request_put  C ( tlpc_request_put );
//
// schedule tlpc_response_get  CF ( pcie_rxn,
// 				 pcie_rxp,
// 				 pcie_txn,
// 				 pcie_txp,
// 				 user_lnk_up,
// 				 tlpr_request_put,
// 				 tlpr_response_get,
// 				 tlpc_request_put,
// 				 interruptRequest_put,
// 				 regChanges_first,
// 				 regChanges_deq,
// 				 regChanges_notEmpty );
// schedule tlpc_response_get  C ( tlpc_response_get );
//
// schedule interruptRequest_put  CF ( pcie_rxn,
// 				    pcie_rxp,
// 				    pcie_txn,
// 				    pcie_txp,
// 				    user_lnk_up,
// 				    tlpr_request_put,
// 				    tlpr_response_get,
// 				    tlpc_request_put,
// 				    tlpc_response_get,
// 				    regChanges_first,
// 				    regChanges_deq,
// 				    regChanges_notEmpty );
// schedule interruptRequest_put  C ( interruptRequest_put );
//
// schedule regChanges_first  CF ( pcie_rxn,
// 				pcie_rxp,
// 				pcie_txn,
// 				pcie_txp,
// 				user_lnk_up,
// 				tlpr_request_put,
// 				tlpr_response_get,
// 				tlpc_request_put,
// 				tlpc_response_get,
// 				interruptRequest_put,
// 				regChanges_first,
// 				regChanges_notEmpty );
// schedule regChanges_first  SB ( regChanges_deq );
//
// schedule regChanges_deq  CF ( pcie_rxn,
// 			      pcie_rxp,
// 			      pcie_txn,
// 			      pcie_txp,
// 			      user_lnk_up,
// 			      tlpr_request_put,
// 			      tlpr_response_get,
// 			      tlpc_request_put,
// 			      tlpc_response_get,
// 			      interruptRequest_put );
// schedule regChanges_deq  C ( regChanges_deq );
//
// schedule regChanges_notEmpty  CF ( pcie_rxn,
// 				   pcie_rxp,
// 				   pcie_txn,
// 				   pcie_txp,
// 				   user_lnk_up,
// 				   tlpr_request_put,
// 				   tlpr_response_get,
// 				   tlpc_request_put,
// 				   tlpc_response_get,
// 				   interruptRequest_put,
// 				   regChanges_first,
// 				   regChanges_notEmpty );
// schedule regChanges_notEmpty  SB ( regChanges_deq );
//
//
// Ports:
// Name                         I/O  size props
// pcie_txn                       O     8
// pcie_txp                       O     8
// user_lnk_up                    O     1
// RDY_tlpr_request_put           O     1 reg
// tlpr_response_get              O   153 reg
// RDY_tlpr_response_get          O     1 reg
// RDY_tlpc_request_put           O     1 reg
// tlpc_response_get              O   153 reg
// RDY_tlpc_response_get          O     1 reg
// RDY_interruptRequest_put       O     1 reg
// regChanges_first               O    64 reg
// RDY_regChanges_first           O     1 reg
// RDY_regChanges_deq             O     1 reg
// regChanges_notEmpty            O     1 reg
// RDY_regChanges_notEmpty        O     1 const
// CLK_epPcieClock                O     1 clock
// CLK_GATE_epPcieClock           O     1 const
// CLK_epPortalClock              O     1 clock
// CLK_GATE_epPortalClock         O     1 const
// CLK_epDerivedClock             O     1 clock
// CLK_GATE_epDerivedClock        O     1 const
// RST_N_epPcieReset              O     1 reset
// RST_N_epPortalReset            O     1 reset
// RST_N_epDerivedReset           O     1 reset
// CLK_pcie_sys_clk_gt            I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pcie_rxn_v                     I     8
// pcie_rxp_v                     I     8
// tlpr_request_put               I   153 reg
// tlpc_request_put               I   153 reg
// interruptRequest_put           I    96 reg
// EN_tlpr_request_put            I     1
// EN_tlpc_request_put            I     1
// EN_interruptRequest_put        I     1
// EN_regChanges_deq              I     1
// EN_tlpr_response_get           I     1
// EN_tlpc_response_get           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPcieEndpointX7(CLK_pcie_sys_clk_gt,
			CLK,
			RST_N,

			pcie_rxn_v,

			pcie_rxp_v,

			pcie_txn,

			pcie_txp,

			user_lnk_up,

			tlpr_request_put,
			EN_tlpr_request_put,
			RDY_tlpr_request_put,

			EN_tlpr_response_get,
			tlpr_response_get,
			RDY_tlpr_response_get,

			tlpc_request_put,
			EN_tlpc_request_put,
			RDY_tlpc_request_put,

			EN_tlpc_response_get,
			tlpc_response_get,
			RDY_tlpc_response_get,

			interruptRequest_put,
			EN_interruptRequest_put,
			RDY_interruptRequest_put,

			regChanges_first,
			RDY_regChanges_first,

			EN_regChanges_deq,
			RDY_regChanges_deq,

			regChanges_notEmpty,
			RDY_regChanges_notEmpty,

			CLK_epPcieClock,
			CLK_GATE_epPcieClock,

			CLK_epPortalClock,
			CLK_GATE_epPortalClock,

			CLK_epDerivedClock,
			CLK_GATE_epDerivedClock,

			RST_N_epPcieReset,
			RST_N_epPortalReset,
			RST_N_epDerivedReset);
  input  CLK_pcie_sys_clk_gt;
  input  CLK;
  input  RST_N;

  // action method pcie_rxn
  input  [7 : 0] pcie_rxn_v;

  // action method pcie_rxp
  input  [7 : 0] pcie_rxp_v;

  // value method pcie_txn
  output [7 : 0] pcie_txn;

  // value method pcie_txp
  output [7 : 0] pcie_txp;

  // value method user_lnk_up
  output user_lnk_up;

  // action method tlpr_request_put
  input  [152 : 0] tlpr_request_put;
  input  EN_tlpr_request_put;
  output RDY_tlpr_request_put;

  // actionvalue method tlpr_response_get
  input  EN_tlpr_response_get;
  output [152 : 0] tlpr_response_get;
  output RDY_tlpr_response_get;

  // action method tlpc_request_put
  input  [152 : 0] tlpc_request_put;
  input  EN_tlpc_request_put;
  output RDY_tlpc_request_put;

  // actionvalue method tlpc_response_get
  input  EN_tlpc_response_get;
  output [152 : 0] tlpc_response_get;
  output RDY_tlpc_response_get;

  // action method interruptRequest_put
  input  [95 : 0] interruptRequest_put;
  input  EN_interruptRequest_put;
  output RDY_interruptRequest_put;

  // value method regChanges_first
  output [63 : 0] regChanges_first;
  output RDY_regChanges_first;

  // action method regChanges_deq
  input  EN_regChanges_deq;
  output RDY_regChanges_deq;

  // value method regChanges_notEmpty
  output regChanges_notEmpty;
  output RDY_regChanges_notEmpty;

  // oscillator and gates for output clock CLK_epPcieClock
  output CLK_epPcieClock;
  output CLK_GATE_epPcieClock;

  // oscillator and gates for output clock CLK_epPortalClock
  output CLK_epPortalClock;
  output CLK_GATE_epPortalClock;

  // oscillator and gates for output clock CLK_epDerivedClock
  output CLK_epDerivedClock;
  output CLK_GATE_epDerivedClock;

  // output resets
  output RST_N_epPcieReset;
  output RST_N_epPortalReset;
  output RST_N_epDerivedReset;

  // signals for module outputs
  wire [152 : 0] tlpc_response_get, tlpr_response_get;
  wire [63 : 0] regChanges_first;
  wire [7 : 0] pcie_txn, pcie_txp;
  wire CLK_GATE_epDerivedClock,
       CLK_GATE_epPcieClock,
       CLK_GATE_epPortalClock,
       CLK_epDerivedClock,
       CLK_epPcieClock,
       CLK_epPortalClock,
       RDY_interruptRequest_put,
       RDY_regChanges_deq,
       RDY_regChanges_first,
       RDY_regChanges_notEmpty,
       RDY_tlpc_request_put,
       RDY_tlpc_response_get,
       RDY_tlpr_request_put,
       RDY_tlpr_response_get,
       RST_N_epDerivedReset,
       RST_N_epPcieReset,
       RST_N_epPortalReset,
       regChanges_notEmpty,
       user_lnk_up;

  // inlined wires
  wire [273 : 0] fAxiRc_da_lat_2_wget, fAxiRc_db_lat_0_wget;
  wire [272 : 0] fAxiRq_da_lat_2_wget, fAxiRq_db_lat_0_wget;
  wire fAxiRc_da_lat_2_whas,
       fAxiRc_db_lat_0_whas,
       fAxiRc_va_lat_0_whas,
       fAxiRq_da_lat_2_whas,
       fAxiRq_db_lat_0_whas,
       fAxiRq_va_lat_0_whas,
       msix_int_enable_whas;

  // register cc_dwcount
  reg [10 : 0] cc_dwcount;
  wire [10 : 0] cc_dwcount_D_IN;
  wire cc_dwcount_EN;

  // register cs_snapshot
  reg [23 : 0] cs_snapshot;
  wire [23 : 0] cs_snapshot_D_IN;
  wire cs_snapshot_EN;

  // register cyclesReg
  reg [31 : 0] cyclesReg;
  wire [31 : 0] cyclesReg_D_IN;
  wire cyclesReg_EN;

  // register fAxiRc_da_dummy2_0
  reg fAxiRc_da_dummy2_0;
  wire fAxiRc_da_dummy2_0_D_IN, fAxiRc_da_dummy2_0_EN;

  // register fAxiRc_da_dummy2_1
  reg fAxiRc_da_dummy2_1;
  wire fAxiRc_da_dummy2_1_D_IN, fAxiRc_da_dummy2_1_EN;

  // register fAxiRc_da_dummy2_2
  reg fAxiRc_da_dummy2_2;
  wire fAxiRc_da_dummy2_2_D_IN, fAxiRc_da_dummy2_2_EN;

  // register fAxiRc_da_rl
  reg [273 : 0] fAxiRc_da_rl;
  wire [273 : 0] fAxiRc_da_rl_D_IN;
  wire fAxiRc_da_rl_EN;

  // register fAxiRc_db_dummy2_0
  reg fAxiRc_db_dummy2_0;
  wire fAxiRc_db_dummy2_0_D_IN, fAxiRc_db_dummy2_0_EN;

  // register fAxiRc_db_dummy2_1
  reg fAxiRc_db_dummy2_1;
  wire fAxiRc_db_dummy2_1_D_IN, fAxiRc_db_dummy2_1_EN;

  // register fAxiRc_db_dummy2_2
  reg fAxiRc_db_dummy2_2;
  wire fAxiRc_db_dummy2_2_D_IN, fAxiRc_db_dummy2_2_EN;

  // register fAxiRc_db_rl
  reg [273 : 0] fAxiRc_db_rl;
  wire [273 : 0] fAxiRc_db_rl_D_IN;
  wire fAxiRc_db_rl_EN;

  // register fAxiRc_va_dummy2_0
  reg fAxiRc_va_dummy2_0;
  wire fAxiRc_va_dummy2_0_D_IN, fAxiRc_va_dummy2_0_EN;

  // register fAxiRc_va_dummy2_1
  reg fAxiRc_va_dummy2_1;
  wire fAxiRc_va_dummy2_1_D_IN, fAxiRc_va_dummy2_1_EN;

  // register fAxiRc_va_dummy2_2
  reg fAxiRc_va_dummy2_2;
  wire fAxiRc_va_dummy2_2_D_IN, fAxiRc_va_dummy2_2_EN;

  // register fAxiRc_va_rl
  reg fAxiRc_va_rl;
  wire fAxiRc_va_rl_D_IN, fAxiRc_va_rl_EN;

  // register fAxiRc_vb_dummy2_0
  reg fAxiRc_vb_dummy2_0;
  wire fAxiRc_vb_dummy2_0_D_IN, fAxiRc_vb_dummy2_0_EN;

  // register fAxiRc_vb_dummy2_1
  reg fAxiRc_vb_dummy2_1;
  wire fAxiRc_vb_dummy2_1_D_IN, fAxiRc_vb_dummy2_1_EN;

  // register fAxiRc_vb_dummy2_2
  reg fAxiRc_vb_dummy2_2;
  wire fAxiRc_vb_dummy2_2_D_IN, fAxiRc_vb_dummy2_2_EN;

  // register fAxiRc_vb_rl
  reg fAxiRc_vb_rl;
  wire fAxiRc_vb_rl_D_IN, fAxiRc_vb_rl_EN;

  // register fAxiRq_da_dummy2_0
  reg fAxiRq_da_dummy2_0;
  wire fAxiRq_da_dummy2_0_D_IN, fAxiRq_da_dummy2_0_EN;

  // register fAxiRq_da_dummy2_1
  reg fAxiRq_da_dummy2_1;
  wire fAxiRq_da_dummy2_1_D_IN, fAxiRq_da_dummy2_1_EN;

  // register fAxiRq_da_dummy2_2
  reg fAxiRq_da_dummy2_2;
  wire fAxiRq_da_dummy2_2_D_IN, fAxiRq_da_dummy2_2_EN;

  // register fAxiRq_da_rl
  reg [272 : 0] fAxiRq_da_rl;
  wire [272 : 0] fAxiRq_da_rl_D_IN;
  wire fAxiRq_da_rl_EN;

  // register fAxiRq_db_dummy2_0
  reg fAxiRq_db_dummy2_0;
  wire fAxiRq_db_dummy2_0_D_IN, fAxiRq_db_dummy2_0_EN;

  // register fAxiRq_db_dummy2_1
  reg fAxiRq_db_dummy2_1;
  wire fAxiRq_db_dummy2_1_D_IN, fAxiRq_db_dummy2_1_EN;

  // register fAxiRq_db_dummy2_2
  reg fAxiRq_db_dummy2_2;
  wire fAxiRq_db_dummy2_2_D_IN, fAxiRq_db_dummy2_2_EN;

  // register fAxiRq_db_rl
  reg [272 : 0] fAxiRq_db_rl;
  wire [272 : 0] fAxiRq_db_rl_D_IN;
  wire fAxiRq_db_rl_EN;

  // register fAxiRq_va_dummy2_0
  reg fAxiRq_va_dummy2_0;
  wire fAxiRq_va_dummy2_0_D_IN, fAxiRq_va_dummy2_0_EN;

  // register fAxiRq_va_dummy2_1
  reg fAxiRq_va_dummy2_1;
  wire fAxiRq_va_dummy2_1_D_IN, fAxiRq_va_dummy2_1_EN;

  // register fAxiRq_va_dummy2_2
  reg fAxiRq_va_dummy2_2;
  wire fAxiRq_va_dummy2_2_D_IN, fAxiRq_va_dummy2_2_EN;

  // register fAxiRq_va_rl
  reg fAxiRq_va_rl;
  wire fAxiRq_va_rl_D_IN, fAxiRq_va_rl_EN;

  // register fAxiRq_vb_dummy2_0
  reg fAxiRq_vb_dummy2_0;
  wire fAxiRq_vb_dummy2_0_D_IN, fAxiRq_vb_dummy2_0_EN;

  // register fAxiRq_vb_dummy2_1
  reg fAxiRq_vb_dummy2_1;
  wire fAxiRq_vb_dummy2_1_D_IN, fAxiRq_vb_dummy2_1_EN;

  // register fAxiRq_vb_dummy2_2
  reg fAxiRq_vb_dummy2_2;
  wire fAxiRq_vb_dummy2_2_D_IN, fAxiRq_vb_dummy2_2_EN;

  // register fAxiRq_vb_rl
  reg fAxiRq_vb_rl;
  wire fAxiRq_vb_rl_D_IN, fAxiRq_vb_rl_EN;

  // register rc_dwcount
  reg [10 : 0] rc_dwcount;
  wire [10 : 0] rc_dwcount_D_IN;
  wire rc_dwcount_EN;

  // register rc_even
  reg rc_even;
  wire rc_even_D_IN, rc_even_EN;

  // register rqBackpressure
  reg rqBackpressure;
  wire rqBackpressure_D_IN, rqBackpressure_EN;

  // register rqBackpressureCount
  reg [15 : 0] rqBackpressureCount;
  wire [15 : 0] rqBackpressureCount_D_IN;
  wire rqBackpressureCount_EN;

  // register rqBackpressureCountSum
  reg [31 : 0] rqBackpressureCountSum;
  wire [31 : 0] rqBackpressureCountSum_D_IN;
  wire rqBackpressureCountSum_EN;

  // register rqBackpressureCycles
  reg [15 : 0] rqBackpressureCycles;
  wire [15 : 0] rqBackpressureCycles_D_IN;
  wire rqBackpressureCycles_EN;

  // register rqBackpressureEvents
  reg [31 : 0] rqBackpressureEvents;
  wire [31 : 0] rqBackpressureEvents_D_IN;
  wire rqBackpressureEvents_EN;

  // register rq_dwcount
  reg [10 : 0] rq_dwcount;
  wire [10 : 0] rq_dwcount_D_IN;
  wire rq_dwcount_EN;

  // register rq_even
  reg rq_even;
  wire rq_even_D_IN, rq_even_EN;

  // register rq_first_be
  reg [3 : 0] rq_first_be;
  wire [3 : 0] rq_first_be_D_IN;
  wire rq_first_be_EN;

  // register rq_last_be
  reg [3 : 0] rq_last_be;
  wire [3 : 0] rq_last_be_D_IN;
  wire rq_last_be_EN;

  // register rq_rq
  reg [272 : 0] rq_rq;
  wire [272 : 0] rq_rq_D_IN;
  wire rq_rq_EN;

  // ports of submodule changeFifo
  wire [63 : 0] changeFifo_D_IN, changeFifo_D_OUT;
  wire changeFifo_CLR,
       changeFifo_DEQ,
       changeFifo_EMPTY_N,
       changeFifo_ENQ,
       changeFifo_FULL_N;

  // ports of submodule clkgen_clkout0buffer
  wire clkgen_clkout0buffer_O;

  // ports of submodule clkgen_clkout1buffer
  wire clkgen_clkout1buffer_O;

  // ports of submodule clkgen_pll
  wire [15 : 0] clkgen_pll_DI;
  wire [6 : 0] clkgen_pll_DADDR;
  wire clkgen_pll_CLKFBIN,
       clkgen_pll_CLKFBOUT,
       clkgen_pll_CLKINSEL,
       clkgen_pll_CLKOUT0,
       clkgen_pll_CLKOUT0B,
       clkgen_pll_CLKOUT1,
       clkgen_pll_CLKOUT1B,
       clkgen_pll_CLKOUT2,
       clkgen_pll_CLKOUT2B,
       clkgen_pll_CLKOUT3,
       clkgen_pll_CLKOUT3B,
       clkgen_pll_CLKOUT4,
       clkgen_pll_CLKOUT5,
       clkgen_pll_CLKOUT6,
       clkgen_pll_DEN,
       clkgen_pll_DWE,
       clkgen_pll_PSEN,
       clkgen_pll_PSINCDEC;

  // ports of submodule clkgen_pll_clkfbbuf
  wire clkgen_pll_clkfbbuf_O;

  // ports of submodule clkgen_pll_reset
  wire clkgen_pll_reset_RESET_OUT;

  // ports of submodule clkgen_rst_n
  wire clkgen_rst_n_OUT_RST;

  // ports of submodule cs_changeFifo
  wire [63 : 0] cs_changeFifo_D_IN, cs_changeFifo_D_OUT;
  wire cs_changeFifo_CLR,
       cs_changeFifo_DEQ,
       cs_changeFifo_EMPTY_N,
       cs_changeFifo_ENQ,
       cs_changeFifo_FULL_N;

  // ports of submodule derivedReset
  wire derivedReset_OUT_RST;

  // ports of submodule fAxiCc
  wire [264 : 0] fAxiCc_D_IN, fAxiCc_D_OUT;
  wire fAxiCc_CLR, fAxiCc_DEQ, fAxiCc_EMPTY_N, fAxiCc_ENQ, fAxiCc_FULL_N;

  // ports of submodule fAxiCq
  wire [273 : 0] fAxiCq_D_IN, fAxiCq_D_OUT;
  wire fAxiCq_CLR, fAxiCq_DEQ, fAxiCq_EMPTY_N, fAxiCq_ENQ, fAxiCq_FULL_N;

  // ports of submodule fcc
  wire [152 : 0] fcc_D_IN, fcc_D_OUT;
  wire fcc_CLR, fcc_DEQ, fcc_EMPTY_N, fcc_ENQ, fcc_FULL_N;

  // ports of submodule fcc_tlps
  wire [152 : 0] fcc_tlps_D_IN, fcc_tlps_D_OUT;
  wire fcc_tlps_CLR,
       fcc_tlps_DEQ,
       fcc_tlps_EMPTY_N,
       fcc_tlps_ENQ,
       fcc_tlps_FULL_N;

  // ports of submodule fcq
  wire [152 : 0] fcq_D_IN, fcq_D_OUT;
  wire fcq_CLR, fcq_DEQ, fcq_EMPTY_N, fcq_ENQ, fcq_FULL_N;

  // ports of submodule frc
  wire [152 : 0] frc_D_IN, frc_D_OUT;
  wire frc_CLR, frc_DEQ, frc_EMPTY_N, frc_ENQ, frc_FULL_N;

  // ports of submodule frq
  wire [152 : 0] frq_D_IN, frq_D_OUT;
  wire frq_CLR, frq_DEQ, frq_EMPTY_N, frq_ENQ, frq_FULL_N;

  // ports of submodule frq_tlps
  wire [152 : 0] frq_tlps_D_IN, frq_tlps_D_OUT;
  wire frq_tlps_CLR,
       frq_tlps_DEQ,
       frq_tlps_EMPTY_N,
       frq_tlps_ENQ,
       frq_tlps_FULL_N;

  // ports of submodule intrFifo
  wire [95 : 0] intrFifo_D_IN, intrFifo_D_OUT;
  wire intrFifo_CLR,
       intrFifo_DEQ,
       intrFifo_EMPTY_N,
       intrFifo_ENQ,
       intrFifo_FULL_N;

  // ports of submodule intrMutex
  wire intrMutex_CLR,
       intrMutex_DEQ,
       intrMutex_D_IN,
       intrMutex_EMPTY_N,
       intrMutex_ENQ,
       intrMutex_FULL_N;

  // ports of submodule pcieReset250
  wire pcieReset250_OUT_RST;

  // ports of submodule pcie_ep
  wire [255 : 0] pcie_ep_m_axis_cq_tdata,
		 pcie_ep_m_axis_rc_tdata,
		 pcie_ep_s_axis_cc_tdata,
		 pcie_ep_s_axis_rq_tdata;
  wire [84 : 0] pcie_ep_m_axis_cq_tuser;
  wire [74 : 0] pcie_ep_m_axis_rc_tuser;
  wire [63 : 0] pcie_ep_cfg_dsn, pcie_ep_cfg_interrupt_msix_address;
  wire [59 : 0] pcie_ep_s_axis_rq_tuser;
  wire [32 : 0] pcie_ep_s_axis_cc_tuser;
  wire [31 : 0] pcie_ep_cfg_interrupt_msi_int,
		pcie_ep_cfg_interrupt_msi_pending_status,
		pcie_ep_cfg_interrupt_msix_data,
		pcie_ep_cfg_mgmt_write_data,
		pcie_ep_cfg_msg_transmit_data;
  wire [18 : 0] pcie_ep_cfg_mgmt_addr;
  wire [15 : 0] pcie_ep_cfg_subsys_vend_id;
  wire [8 : 0] pcie_ep_cfg_interrupt_msi_tph_st_tag;
  wire [7 : 0] pcie_ep_cfg_ds_bus_number,
	       pcie_ep_cfg_ds_port_number,
	       pcie_ep_cfg_vf_flr_done,
	       pcie_ep_m_axis_cq_tkeep,
	       pcie_ep_m_axis_rc_tkeep,
	       pcie_ep_pci_exp_rxn,
	       pcie_ep_pci_exp_rxp,
	       pcie_ep_pci_exp_txn,
	       pcie_ep_pci_exp_txp,
	       pcie_ep_s_axis_cc_tkeep,
	       pcie_ep_s_axis_rq_tkeep;
  wire [4 : 0] pcie_ep_cfg_ds_device_number;
  wire [3 : 0] pcie_ep_cfg_flr_done,
	       pcie_ep_cfg_interrupt_int,
	       pcie_ep_cfg_interrupt_msi_function_number,
	       pcie_ep_cfg_interrupt_msi_pending_status_function_num,
	       pcie_ep_cfg_interrupt_msi_select,
	       pcie_ep_cfg_interrupt_msix_enable,
	       pcie_ep_cfg_interrupt_pending,
	       pcie_ep_cfg_mgmt_byte_enable,
	       pcie_ep_cfg_per_function_number,
	       pcie_ep_s_axis_cc_tready,
	       pcie_ep_s_axis_rq_tready;
  wire [2 : 0] pcie_ep_cfg_ds_function_number,
	       pcie_ep_cfg_fc_sel,
	       pcie_ep_cfg_interrupt_msi_attr,
	       pcie_ep_cfg_msg_transmit_type,
	       pcie_ep_cfg_per_func_status_control;
  wire [1 : 0] pcie_ep_cfg_interrupt_msi_tph_type;
  wire pcie_ep_cfg_config_space_enable,
       pcie_ep_cfg_err_cor_in,
       pcie_ep_cfg_err_uncor_in,
       pcie_ep_cfg_hot_reset_in,
       pcie_ep_cfg_interrupt_msi_pending_status_data_enable,
       pcie_ep_cfg_interrupt_msi_tph_present,
       pcie_ep_cfg_interrupt_msix_fail,
       pcie_ep_cfg_interrupt_msix_int,
       pcie_ep_cfg_interrupt_msix_sent,
       pcie_ep_cfg_link_training_enable,
       pcie_ep_cfg_mgmt_read,
       pcie_ep_cfg_mgmt_type1_cfg_reg_access,
       pcie_ep_cfg_mgmt_write,
       pcie_ep_cfg_msg_transmit,
       pcie_ep_cfg_per_function_output_request,
       pcie_ep_cfg_power_state_change_ack,
       pcie_ep_cfg_req_pm_transition_l23_ready,
       pcie_ep_m_axis_cq_tlast,
       pcie_ep_m_axis_cq_tready,
       pcie_ep_m_axis_cq_tvalid,
       pcie_ep_m_axis_rc_tlast,
       pcie_ep_m_axis_rc_tready,
       pcie_ep_m_axis_rc_tvalid,
       pcie_ep_pcie_cq_np_req,
       pcie_ep_pcie_perstn1_in,
       pcie_ep_s_axis_cc_tlast,
       pcie_ep_s_axis_cc_tvalid,
       pcie_ep_s_axis_rq_tlast,
       pcie_ep_s_axis_rq_tvalid,
       pcie_ep_user_clk,
       pcie_ep_user_lnk_up,
       pcie_ep_user_reset;

  // ports of submodule user_reset_n
  wire user_reset_n_RESET_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_rc_data,
       WILL_FIRE_RL_cs_rl_update,
       WILL_FIRE_RL_drive_axi_cc,
       WILL_FIRE_RL_drive_axi_cc2,
       WILL_FIRE_RL_rl_cc_data,
       WILL_FIRE_RL_rl_cc_header,
       WILL_FIRE_RL_rl_cq_rd_header,
       WILL_FIRE_RL_rl_cq_wr_header,
       WILL_FIRE_RL_rl_rc_data,
       WILL_FIRE_RL_rl_rc_header,
       WILL_FIRE_RL_rl_rq_data,
       WILL_FIRE_RL_rl_rq_header;

  // inputs to muxes for submodule ports
  wire [272 : 0] MUX_fAxiRq_db_lat_0_wset_1__VAL_1,
		 MUX_fAxiRq_db_lat_0_wset_1__VAL_2;
  wire [264 : 0] MUX_fAxiCc_enq_1__VAL_1, MUX_fAxiCc_enq_1__VAL_2;
  wire [152 : 0] MUX_fcq_enq_1__VAL_1,
		 MUX_fcq_enq_1__VAL_2,
		 MUX_frc_enq_1__VAL_1,
		 MUX_frc_enq_1__VAL_2;
  wire [15 : 0] MUX_rqBackpressureCycles_write_1__VAL_2;
  wire [10 : 0] MUX_rc_dwcount_write_1__VAL_1,
		MUX_rc_dwcount_write_1__VAL_2,
		MUX_rq_dwcount_write_1__VAL_2;
  wire MUX_fAxiRq_db_dummy2_0_write_1__SEL_1,
       MUX_rc_even_write_1__VAL_1,
       MUX_rc_even_write_1__VAL_2,
       MUX_rqBackpressure_write_1__SEL_1,
       MUX_rqBackpressure_write_1__SEL_2,
       MUX_rq_even_write_1__VAL_1,
       MUX_rq_rq_write_1__SEL_1;

  // remaining internal signals
  reg [61 : 0] _theResult___snd_address__h23380;
  reg [15 : 0] tlp16_be__h15859, tlp16_be__h21087;
  reg [7 : 0] CASE_fAxiCqD_OUT_BITS_129_TO_122_0_fAxiCqD_O_ETC__q4,
	      _theResult_____1_fst__h24234,
	      _theResult_____1_fst__h24241;
  reg [5 : 0] CASE_fAxiCqD_OUT_BITS_138_TO_133_7_fAxiCqD_O_ETC__q3;
  reg [4 : 0] IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_O_ETC___d228;
  reg [3 : 0] CASE_frq_tlpsD_OUT_BITS_126_TO_125_0_0_1_0_2__ETC__q1;
  reg [1 : 0] IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_T_ETC___d224;
  wire [255 : 0] _theResult_____1_snd_data__h24236,
		 _theResult_____1_snd_data__h24243,
		 fAxiRc_da_rl_BITS_273_TO_18__q2,
		 rq_data__h23713,
		 rq_data__h24209,
		 x__h22772,
		 x_data__h21733;
  wire [127 : 0] data__h21068,
		 tlp16_data__h15860,
		 tlp16_data__h17590,
		 tlp16_data__h19193,
		 x__h21737;
  wire [61 : 0] _theResult___snd_address__h23366;
  wire [59 : 0] y_avValue_snd_snd_snd_snd__h14046;
  wire [31 : 0] b__h21556, y__h14563;
  wire [23 : 0] v__h25149;
  wire [15 : 0] count__h14428, tlp16_be__h19192;
  wire [12 : 0] a_bytecount__h21572;
  wire [10 : 0] _theResult___snd_dwcount__h23379,
		dwcount__h21067,
		dwcount__h23245,
		dwcount__h24134,
		x__h21538;
  wire [9 : 0] IF_fAxiCq_first__04_BITS_92_TO_82_15_EQ_1024_3_ETC___d233;
  wire [7 : 0] rq_keep__h24211, x_keep__h22789;
  wire [6 : 0] tlp16_hit__h15858;
  wire IF_fAxiRc_vb_lat_1_whas__4_THEN_fAxiRc_vb_lat__ETC___d40,
       IF_fAxiRq_vb_lat_1_whas__6_THEN_fAxiRq_vb_lat__ETC___d92,
       frq_tlps_i_notEmpty__98_AND_rq_even_55_AND_NOT_ETC___d561,
       rc_dwcount_17_ULE_4___d422,
       rq_dwcount_56_ULE_4___d557,
       x1__h14861;

  // oscillator and gates for output clock CLK_epPcieClock
  assign CLK_epPcieClock = pcie_ep_user_clk ;
  assign CLK_GATE_epPcieClock = 1'b1 ;

  // oscillator and gates for output clock CLK_epPortalClock
  assign CLK_epPortalClock = pcie_ep_user_clk ;
  assign CLK_GATE_epPortalClock = 1'b1 ;

  // oscillator and gates for output clock CLK_epDerivedClock
  assign CLK_epDerivedClock = clkgen_clkout0buffer_O ;
  assign CLK_GATE_epDerivedClock = 1'b1 ;

  // output resets
  assign RST_N_epPcieReset = pcieReset250_OUT_RST ;
  assign RST_N_epPortalReset = pcieReset250_OUT_RST ;
  assign RST_N_epDerivedReset = derivedReset_OUT_RST ;

  // value method pcie_txn
  assign pcie_txn = pcie_ep_pci_exp_txn ;

  // value method pcie_txp
  assign pcie_txp = pcie_ep_pci_exp_txp ;

  // value method user_lnk_up
  assign user_lnk_up = pcie_ep_user_lnk_up ;

  // action method tlpr_request_put
  assign RDY_tlpr_request_put = frq_FULL_N ;

  // actionvalue method tlpr_response_get
  assign tlpr_response_get = frc_D_OUT ;
  assign RDY_tlpr_response_get = frc_EMPTY_N ;

  // action method tlpc_request_put
  assign RDY_tlpc_request_put = fcc_FULL_N ;

  // actionvalue method tlpc_response_get
  assign tlpc_response_get = fcq_D_OUT ;
  assign RDY_tlpc_response_get = fcq_EMPTY_N ;

  // action method interruptRequest_put
  assign RDY_interruptRequest_put = intrFifo_FULL_N ;

  // value method regChanges_first
  assign regChanges_first = changeFifo_D_OUT ;
  assign RDY_regChanges_first = changeFifo_EMPTY_N ;

  // action method regChanges_deq
  assign RDY_regChanges_deq = changeFifo_EMPTY_N ;

  // value method regChanges_notEmpty
  assign regChanges_notEmpty = changeFifo_EMPTY_N ;
  assign RDY_regChanges_notEmpty = 1'd1 ;

  // submodule changeFifo
  FIFO2 #(.width(32'd64),
	  .guarded(1'd1)) changeFifo(.RST(user_reset_n_RESET_OUT),
				     .CLK(pcie_ep_user_clk),
				     .D_IN(changeFifo_D_IN),
				     .ENQ(changeFifo_ENQ),
				     .DEQ(changeFifo_DEQ),
				     .CLR(changeFifo_CLR),
				     .D_OUT(changeFifo_D_OUT),
				     .FULL_N(changeFifo_FULL_N),
				     .EMPTY_N(changeFifo_EMPTY_N));

  // submodule clkgen_clkout0buffer
  BUFG clkgen_clkout0buffer(.I(clkgen_pll_CLKOUT0),
			    .O(clkgen_clkout0buffer_O));

  // submodule clkgen_clkout0nbuffer
  BUFG clkgen_clkout0nbuffer(.I(clkgen_pll_CLKOUT0B), .O());

  // submodule clkgen_clkout1buffer
  BUFG clkgen_clkout1buffer(.I(clkgen_pll_CLKOUT1),
			    .O(clkgen_clkout1buffer_O));

  // submodule clkgen_clkout1nbuffer
  BUFG clkgen_clkout1nbuffer(.I(clkgen_pll_CLKOUT1B), .O());

  // submodule clkgen_clkout2buffer
  BUFG clkgen_clkout2buffer(.I(clkgen_pll_CLKOUT2), .O());

  // submodule clkgen_clkout2nbuffer
  BUFG clkgen_clkout2nbuffer(.I(clkgen_pll_CLKOUT2B), .O());

  // submodule clkgen_clkout3buffer
  BUFG clkgen_clkout3buffer(.I(clkgen_pll_CLKOUT3), .O());

  // submodule clkgen_clkout3nbuffer
  BUFG clkgen_clkout3nbuffer(.I(clkgen_pll_CLKOUT3B), .O());

  // submodule clkgen_clkout4buffer
  BUFG clkgen_clkout4buffer(.I(clkgen_pll_CLKOUT4), .O());

  // submodule clkgen_clkout5buffer
  BUFG clkgen_clkout5buffer(.I(clkgen_pll_CLKOUT5), .O());

  // submodule clkgen_clkout6buffer
  BUFG clkgen_clkout6buffer(.I(clkgen_pll_CLKOUT6), .O());

  // submodule clkgen_pll
  MMCME2_ADV #(.BANDWIDTH("OPTIMIZED"),
	       .CLKFBOUT_USE_FINE_PS("FALSE"),
	       .CLKOUT0_USE_FINE_PS("FALSE"),
	       .CLKOUT1_USE_FINE_PS("FALSE"),
	       .CLKOUT2_USE_FINE_PS("FALSE"),
	       .CLKOUT3_USE_FINE_PS("FALSE"),
	       .CLKOUT4_CASCADE("FALSE"),
	       .CLKOUT4_USE_FINE_PS("FALSE"),
	       .CLKOUT5_USE_FINE_PS("FALSE"),
	       .CLKOUT6_USE_FINE_PS("FALSE"),
	       .COMPENSATION("ZHOLD"),
	       .STARTUP_WAIT("FALSE"),
	       .CLKFBOUT_MULT_F(4.0),
	       .CLKFBOUT_PHASE(0.0),
	       .CLKIN1_PERIOD(4.0),
	       .CLKIN2_PERIOD(0.0),
	       .DIVCLK_DIVIDE(32'd1),
	       .CLKOUT0_DIVIDE_F(4.0),
	       .CLKOUT0_DUTY_CYCLE(0.5),
	       .CLKOUT0_PHASE(0.0),
	       .CLKOUT1_DIVIDE(32'd4),
	       .CLKOUT1_DUTY_CYCLE(0.5),
	       .CLKOUT1_PHASE(0.0),
	       .CLKOUT2_DIVIDE(32'd10),
	       .CLKOUT2_DUTY_CYCLE(0.5),
	       .CLKOUT2_PHASE(0.0),
	       .CLKOUT3_DIVIDE(32'd10),
	       .CLKOUT3_DUTY_CYCLE(0.5),
	       .CLKOUT3_PHASE(0.0),
	       .CLKOUT4_DIVIDE(32'd10),
	       .CLKOUT4_DUTY_CYCLE(0.5),
	       .CLKOUT4_PHASE(0.0),
	       .CLKOUT5_DIVIDE(32'd10),
	       .CLKOUT5_DUTY_CYCLE(0.5),
	       .CLKOUT5_PHASE(0.0),
	       .CLKOUT6_DIVIDE(32'd10),
	       .CLKOUT6_DUTY_CYCLE(0.5),
	       .CLKOUT6_PHASE(0.0),
	       .REF_JITTER1(1.0e-2),
	       .REF_JITTER2(1.0e-2)) clkgen_pll(.CLKIN1(pcie_ep_user_clk),
						.RST(clkgen_pll_reset_RESET_OUT),
						.PWRDWN(1'd0),
						.CLKIN2(1'd0),
						.DCLK(1'd0),
						.PSCLK(1'd0),
						.CLKFBIN(clkgen_pll_CLKFBIN),
						.CLKINSEL(clkgen_pll_CLKINSEL),
						.DADDR(clkgen_pll_DADDR),
						.DI(clkgen_pll_DI),
						.DWE(clkgen_pll_DWE),
						.PSINCDEC(clkgen_pll_PSINCDEC),
						.DEN(clkgen_pll_DEN),
						.PSEN(clkgen_pll_PSEN),
						.DO(),
						.DRDY(),
						.PSDONE(),
						.LOCKED(),
						.CLKFBSTOPPED(),
						.CLKINSTOPPED(),
						.CLKFBOUT(clkgen_pll_CLKFBOUT),
						.CLKFBOUTB(),
						.CLKOUT0(clkgen_pll_CLKOUT0),
						.CLKOUT0B(clkgen_pll_CLKOUT0B),
						.CLKOUT1(clkgen_pll_CLKOUT1),
						.CLKOUT1B(clkgen_pll_CLKOUT1B),
						.CLKOUT2(clkgen_pll_CLKOUT2),
						.CLKOUT2B(clkgen_pll_CLKOUT2B),
						.CLKOUT3(clkgen_pll_CLKOUT3),
						.CLKOUT3B(clkgen_pll_CLKOUT3B),
						.CLKOUT4(clkgen_pll_CLKOUT4),
						.CLKOUT5(clkgen_pll_CLKOUT5),
						.CLKOUT6(clkgen_pll_CLKOUT6));

  // submodule clkgen_pll_clkfbbuf
  BUFG clkgen_pll_clkfbbuf(.I(clkgen_pll_CLKFBOUT),
			   .O(clkgen_pll_clkfbbuf_O));

  // submodule clkgen_pll_reset
  ResetInverter clkgen_pll_reset(.RESET_IN(pcieReset250_OUT_RST),
				 .RESET_OUT(clkgen_pll_reset_RESET_OUT));

  // submodule clkgen_rst
  ResetInverter clkgen_rst(.RESET_IN(clkgen_rst_n_OUT_RST), .RESET_OUT());

  // submodule clkgen_rst_n
  SyncResetA #(.RSTDELAY(32'd2)) clkgen_rst_n(.CLK(pcie_ep_user_clk),
					      .IN_RST(pcieReset250_OUT_RST),
					      .OUT_RST(clkgen_rst_n_OUT_RST));

  // submodule cs_changeFifo
  FIFO1 #(.width(32'd64),
	  .guarded(1'd1)) cs_changeFifo(.RST(user_reset_n_RESET_OUT),
					.CLK(pcie_ep_user_clk),
					.D_IN(cs_changeFifo_D_IN),
					.ENQ(cs_changeFifo_ENQ),
					.DEQ(cs_changeFifo_DEQ),
					.CLR(cs_changeFifo_CLR),
					.D_OUT(cs_changeFifo_D_OUT),
					.FULL_N(cs_changeFifo_FULL_N),
					.EMPTY_N(cs_changeFifo_EMPTY_N));

  // submodule defaultResetInverted
  ResetInverter defaultResetInverted(.RESET_IN(RST_N), .RESET_OUT());

  // submodule derivedReset
  SyncReset #(.RSTDELAY(32'd4)) derivedReset(.CLK(clkgen_clkout0buffer_O),
					     .IN_RST(pcieReset250_OUT_RST),
					     .OUT_RST(derivedReset_OUT_RST));

  // submodule fAxiCc
  FIFO2 #(.width(32'd265),
	  .guarded(1'd1)) fAxiCc(.RST(user_reset_n_RESET_OUT),
				 .CLK(pcie_ep_user_clk),
				 .D_IN(fAxiCc_D_IN),
				 .ENQ(fAxiCc_ENQ),
				 .DEQ(fAxiCc_DEQ),
				 .CLR(fAxiCc_CLR),
				 .D_OUT(fAxiCc_D_OUT),
				 .FULL_N(fAxiCc_FULL_N),
				 .EMPTY_N(fAxiCc_EMPTY_N));

  // submodule fAxiCq
  FIFO2 #(.width(32'd274),
	  .guarded(1'd1)) fAxiCq(.RST(user_reset_n_RESET_OUT),
				 .CLK(pcie_ep_user_clk),
				 .D_IN(fAxiCq_D_IN),
				 .ENQ(fAxiCq_ENQ),
				 .DEQ(fAxiCq_DEQ),
				 .CLR(fAxiCq_CLR),
				 .D_OUT(fAxiCq_D_OUT),
				 .FULL_N(fAxiCq_FULL_N),
				 .EMPTY_N(fAxiCq_EMPTY_N));

  // submodule fcc
  FIFO2 #(.width(32'd153), .guarded(1'd1)) fcc(.RST(user_reset_n_RESET_OUT),
					       .CLK(pcie_ep_user_clk),
					       .D_IN(fcc_D_IN),
					       .ENQ(fcc_ENQ),
					       .DEQ(fcc_DEQ),
					       .CLR(fcc_CLR),
					       .D_OUT(fcc_D_OUT),
					       .FULL_N(fcc_FULL_N),
					       .EMPTY_N(fcc_EMPTY_N));

  // submodule fcc_tlps
  FIFO2 #(.width(32'd153),
	  .guarded(1'd1)) fcc_tlps(.RST(user_reset_n_RESET_OUT),
				   .CLK(pcie_ep_user_clk),
				   .D_IN(fcc_tlps_D_IN),
				   .ENQ(fcc_tlps_ENQ),
				   .DEQ(fcc_tlps_DEQ),
				   .CLR(fcc_tlps_CLR),
				   .D_OUT(fcc_tlps_D_OUT),
				   .FULL_N(fcc_tlps_FULL_N),
				   .EMPTY_N(fcc_tlps_EMPTY_N));

  // submodule fcq
  FIFO2 #(.width(32'd153), .guarded(1'd1)) fcq(.RST(user_reset_n_RESET_OUT),
					       .CLK(pcie_ep_user_clk),
					       .D_IN(fcq_D_IN),
					       .ENQ(fcq_ENQ),
					       .DEQ(fcq_DEQ),
					       .CLR(fcq_CLR),
					       .D_OUT(fcq_D_OUT),
					       .FULL_N(fcq_FULL_N),
					       .EMPTY_N(fcq_EMPTY_N));

  // submodule frc
  FIFO2 #(.width(32'd153), .guarded(1'd1)) frc(.RST(user_reset_n_RESET_OUT),
					       .CLK(pcie_ep_user_clk),
					       .D_IN(frc_D_IN),
					       .ENQ(frc_ENQ),
					       .DEQ(frc_DEQ),
					       .CLR(frc_CLR),
					       .D_OUT(frc_D_OUT),
					       .FULL_N(frc_FULL_N),
					       .EMPTY_N(frc_EMPTY_N));

  // submodule frq
  FIFO2 #(.width(32'd153), .guarded(1'd1)) frq(.RST(user_reset_n_RESET_OUT),
					       .CLK(pcie_ep_user_clk),
					       .D_IN(frq_D_IN),
					       .ENQ(frq_ENQ),
					       .DEQ(frq_DEQ),
					       .CLR(frq_CLR),
					       .D_OUT(frq_D_OUT),
					       .FULL_N(frq_FULL_N),
					       .EMPTY_N(frq_EMPTY_N));

  // submodule frq_tlps
  FIFO2 #(.width(32'd153),
	  .guarded(1'd1)) frq_tlps(.RST(user_reset_n_RESET_OUT),
				   .CLK(pcie_ep_user_clk),
				   .D_IN(frq_tlps_D_IN),
				   .ENQ(frq_tlps_ENQ),
				   .DEQ(frq_tlps_DEQ),
				   .CLR(frq_tlps_CLR),
				   .D_OUT(frq_tlps_D_OUT),
				   .FULL_N(frq_tlps_FULL_N),
				   .EMPTY_N(frq_tlps_EMPTY_N));

  // submodule intrFifo
  FIFO2 #(.width(32'd96),
	  .guarded(1'd1)) intrFifo(.RST(user_reset_n_RESET_OUT),
				   .CLK(pcie_ep_user_clk),
				   .D_IN(intrFifo_D_IN),
				   .ENQ(intrFifo_ENQ),
				   .DEQ(intrFifo_DEQ),
				   .CLR(intrFifo_CLR),
				   .D_OUT(intrFifo_D_OUT),
				   .FULL_N(intrFifo_FULL_N),
				   .EMPTY_N(intrFifo_EMPTY_N));

  // submodule intrMutex
  FIFO1 #(.width(32'd1),
	  .guarded(1'd1)) intrMutex(.RST(user_reset_n_RESET_OUT),
				    .CLK(pcie_ep_user_clk),
				    .D_IN(intrMutex_D_IN),
				    .ENQ(intrMutex_ENQ),
				    .DEQ(intrMutex_DEQ),
				    .CLR(intrMutex_CLR),
				    .D_OUT(),
				    .FULL_N(intrMutex_FULL_N),
				    .EMPTY_N(intrMutex_EMPTY_N));

  // submodule mainReset
  SyncReset #(.RSTDELAY(32'd9)) mainReset(.CLK(clkgen_clkout1buffer_O),
					  .IN_RST(pcieReset250_OUT_RST),
					  .OUT_RST());

  // submodule pcieReset250
  SyncReset #(.RSTDELAY(32'd4)) pcieReset250(.CLK(pcie_ep_user_clk),
					     .IN_RST(user_reset_n_RESET_OUT),
					     .OUT_RST(pcieReset250_OUT_RST));

  // submodule pcie_ep
  pcie3_ultrascale_0 pcie_ep(.sys_clk(CLK),
			     .sys_clk_gt(CLK_pcie_sys_clk_gt),
			     .sys_reset(RST_N),
			     .cfg_config_space_enable(pcie_ep_cfg_config_space_enable),
			     .cfg_ds_bus_number(pcie_ep_cfg_ds_bus_number),
			     .cfg_ds_device_number(pcie_ep_cfg_ds_device_number),
			     .cfg_ds_function_number(pcie_ep_cfg_ds_function_number),
			     .cfg_ds_port_number(pcie_ep_cfg_ds_port_number),
			     .cfg_dsn(pcie_ep_cfg_dsn),
			     .cfg_err_cor_in(pcie_ep_cfg_err_cor_in),
			     .cfg_err_uncor_in(pcie_ep_cfg_err_uncor_in),
			     .cfg_fc_sel(pcie_ep_cfg_fc_sel),
			     .cfg_flr_done(pcie_ep_cfg_flr_done),
			     .cfg_hot_reset_in(pcie_ep_cfg_hot_reset_in),
			     .cfg_interrupt_int(pcie_ep_cfg_interrupt_int),
			     .cfg_interrupt_msi_attr(pcie_ep_cfg_interrupt_msi_attr),
			     .cfg_interrupt_msi_function_number(pcie_ep_cfg_interrupt_msi_function_number),
			     .cfg_interrupt_msi_int(pcie_ep_cfg_interrupt_msi_int),
			     .cfg_interrupt_msi_pending_status(pcie_ep_cfg_interrupt_msi_pending_status),
			     .cfg_interrupt_msi_pending_status_data_enable(pcie_ep_cfg_interrupt_msi_pending_status_data_enable),
			     .cfg_interrupt_msi_pending_status_function_num(pcie_ep_cfg_interrupt_msi_pending_status_function_num),
			     .cfg_interrupt_msi_select(pcie_ep_cfg_interrupt_msi_select),
			     .cfg_interrupt_msi_tph_present(pcie_ep_cfg_interrupt_msi_tph_present),
			     .cfg_interrupt_msi_tph_st_tag(pcie_ep_cfg_interrupt_msi_tph_st_tag),
			     .cfg_interrupt_msi_tph_type(pcie_ep_cfg_interrupt_msi_tph_type),
			     .cfg_interrupt_msix_address(pcie_ep_cfg_interrupt_msix_address),
			     .cfg_interrupt_msix_data(pcie_ep_cfg_interrupt_msix_data),
			     .cfg_interrupt_msix_int(pcie_ep_cfg_interrupt_msix_int),
			     .cfg_interrupt_pending(pcie_ep_cfg_interrupt_pending),
			     .cfg_link_training_enable(pcie_ep_cfg_link_training_enable),
			     .cfg_mgmt_addr(pcie_ep_cfg_mgmt_addr),
			     .cfg_mgmt_byte_enable(pcie_ep_cfg_mgmt_byte_enable),
			     .cfg_mgmt_read(pcie_ep_cfg_mgmt_read),
			     .cfg_mgmt_type1_cfg_reg_access(pcie_ep_cfg_mgmt_type1_cfg_reg_access),
			     .cfg_mgmt_write(pcie_ep_cfg_mgmt_write),
			     .cfg_mgmt_write_data(pcie_ep_cfg_mgmt_write_data),
			     .cfg_msg_transmit(pcie_ep_cfg_msg_transmit),
			     .cfg_msg_transmit_data(pcie_ep_cfg_msg_transmit_data),
			     .cfg_msg_transmit_type(pcie_ep_cfg_msg_transmit_type),
			     .cfg_per_func_status_control(pcie_ep_cfg_per_func_status_control),
			     .cfg_per_function_number(pcie_ep_cfg_per_function_number),
			     .cfg_per_function_output_request(pcie_ep_cfg_per_function_output_request),
			     .cfg_power_state_change_ack(pcie_ep_cfg_power_state_change_ack),
			     .cfg_req_pm_transition_l23_ready(pcie_ep_cfg_req_pm_transition_l23_ready),
			     .cfg_subsys_vend_id(pcie_ep_cfg_subsys_vend_id),
			     .cfg_vf_flr_done(pcie_ep_cfg_vf_flr_done),
			     .m_axis_cq_tready(pcie_ep_m_axis_cq_tready),
			     .m_axis_rc_tready(pcie_ep_m_axis_rc_tready),
			     .pci_exp_rxn(pcie_ep_pci_exp_rxn),
			     .pci_exp_rxp(pcie_ep_pci_exp_rxp),
			     .pcie_cq_np_req(pcie_ep_pcie_cq_np_req),
			     .pcie_perstn1_in(pcie_ep_pcie_perstn1_in),
			     .s_axis_cc_tdata(pcie_ep_s_axis_cc_tdata),
			     .s_axis_cc_tkeep(pcie_ep_s_axis_cc_tkeep),
			     .s_axis_cc_tlast(pcie_ep_s_axis_cc_tlast),
			     .s_axis_cc_tuser(pcie_ep_s_axis_cc_tuser),
			     .s_axis_cc_tvalid(pcie_ep_s_axis_cc_tvalid),
			     .s_axis_rq_tdata(pcie_ep_s_axis_rq_tdata),
			     .s_axis_rq_tkeep(pcie_ep_s_axis_rq_tkeep),
			     .s_axis_rq_tlast(pcie_ep_s_axis_rq_tlast),
			     .s_axis_rq_tuser(pcie_ep_s_axis_rq_tuser),
			     .s_axis_rq_tvalid(pcie_ep_s_axis_rq_tvalid),
			     .cfg_current_speed(),
			     .cfg_dpa_substate_change(),
			     .cfg_err_cor_out(),
			     .cfg_err_fatal_out(),
			     .cfg_err_nonfatal_out(),
			     .cfg_fc_cpld(),
			     .cfg_fc_cplh(),
			     .cfg_fc_npd(),
			     .cfg_fc_nph(),
			     .cfg_fc_pd(),
			     .cfg_fc_ph(),
			     .cfg_flr_in_process(),
			     .cfg_function_power_state(),
			     .cfg_function_status(),
			     .cfg_hot_reset_out(),
			     .cfg_interrupt_msi_data(),
			     .cfg_interrupt_msi_enable(),
			     .cfg_interrupt_msi_fail(),
			     .cfg_interrupt_msi_mask_update(),
			     .cfg_interrupt_msi_mmenable(),
			     .cfg_interrupt_msi_sent(),
			     .cfg_interrupt_msi_vf_enable(),
			     .cfg_interrupt_msix_enable(pcie_ep_cfg_interrupt_msix_enable),
			     .cfg_interrupt_msix_fail(pcie_ep_cfg_interrupt_msix_fail),
			     .cfg_interrupt_msix_mask(),
			     .cfg_interrupt_msix_sent(pcie_ep_cfg_interrupt_msix_sent),
			     .cfg_interrupt_msix_vf_enable(),
			     .cfg_interrupt_msix_vf_mask(),
			     .cfg_interrupt_sent(),
			     .cfg_link_power_state(),
			     .cfg_local_error(),
			     .cfg_ltr_enable(),
			     .cfg_ltssm_state(),
			     .cfg_max_payload(),
			     .cfg_max_read_req(),
			     .cfg_mgmt_read_data(),
			     .cfg_mgmt_read_write_done(),
			     .cfg_msg_received(),
			     .cfg_msg_received_data(),
			     .cfg_msg_received_type(),
			     .cfg_msg_transmit_done(),
			     .cfg_negotiated_width(),
			     .cfg_obff_enable(),
			     .cfg_per_func_status_data(),
			     .cfg_per_function_update_done(),
			     .cfg_phy_link_down(),
			     .cfg_phy_link_status(),
			     .cfg_pl_status_change(),
			     .cfg_power_state_change_interrupt(),
			     .cfg_rcb_status(),
			     .cfg_tph_requester_enable(),
			     .cfg_tph_st_mode(),
			     .cfg_vf_flr_in_process(),
			     .cfg_vf_power_state(),
			     .cfg_vf_status(),
			     .cfg_vf_tph_requester_enable(),
			     .cfg_vf_tph_st_mode(),
			     .int_qpll1lock_out(),
			     .int_qpll1outclk_out(),
			     .int_qpll1outrefclk_out(),
			     .m_axis_cq_tdata(pcie_ep_m_axis_cq_tdata),
			     .m_axis_cq_tkeep(pcie_ep_m_axis_cq_tkeep),
			     .m_axis_cq_tlast(pcie_ep_m_axis_cq_tlast),
			     .m_axis_cq_tuser(pcie_ep_m_axis_cq_tuser),
			     .m_axis_cq_tvalid(pcie_ep_m_axis_cq_tvalid),
			     .m_axis_rc_tdata(pcie_ep_m_axis_rc_tdata),
			     .m_axis_rc_tkeep(pcie_ep_m_axis_rc_tkeep),
			     .m_axis_rc_tlast(pcie_ep_m_axis_rc_tlast),
			     .m_axis_rc_tuser(pcie_ep_m_axis_rc_tuser),
			     .m_axis_rc_tvalid(pcie_ep_m_axis_rc_tvalid),
			     .pci_exp_txn(pcie_ep_pci_exp_txn),
			     .pci_exp_txp(pcie_ep_pci_exp_txp),
			     .pcie_cq_np_req_count(),
			     .pcie_rq_seq_num(),
			     .pcie_rq_seq_num_vld(),
			     .pcie_rq_tag(),
			     .pcie_rq_tag_av(),
			     .pcie_rq_tag_vld(),
			     .pcie_tfc_npd_av(),
			     .pcie_tfc_nph_av(),
			     .pcie_perstn0_out(),
			     .pcie_perstn1_out(),
			     .phy_rdy_out(),
			     .s_axis_cc_tready(pcie_ep_s_axis_cc_tready),
			     .s_axis_rq_tready(pcie_ep_s_axis_rq_tready),
			     .user_lnk_up(pcie_ep_user_lnk_up),
			     .user_clk(pcie_ep_user_clk),
			     .user_reset(pcie_ep_user_reset));

  // submodule user_reset
  SyncReset #(.RSTDELAY(32'd4)) user_reset(.CLK(pcie_ep_user_clk),
					   .IN_RST(pcie_ep_user_reset),
					   .OUT_RST());

  // submodule user_reset_n
  ResetInverter user_reset_n(.RESET_IN(pcie_ep_user_reset),
			     .RESET_OUT(user_reset_n_RESET_OUT));

  // rule RL_drive_axi_cc
  assign WILL_FIRE_RL_drive_axi_cc =
	     fAxiCc_EMPTY_N && pcie_ep_s_axis_cc_tready != 4'd0 ;

  // rule RL_drive_axi_cc2
  assign WILL_FIRE_RL_drive_axi_cc2 =
	     pcie_ep_s_axis_cc_tready == 4'd0 || !fAxiCc_EMPTY_N ;

  // rule RL_rl_cq_wr_header
  assign WILL_FIRE_RL_rl_cq_wr_header =
	     fAxiCq_EMPTY_N && fcq_FULL_N && fAxiCq_D_OUT[17] &&
	     (fAxiCq_D_OUT[96:93] == 4'd1 || fAxiCq_D_OUT[96:93] == 4'd3) ;

  // rule RL_rl_cq_rd_header
  assign WILL_FIRE_RL_rl_cq_rd_header =
	     fAxiCq_EMPTY_N && fcq_FULL_N && fAxiCq_D_OUT[17] &&
	     (fAxiCq_D_OUT[96:93] == 4'd0 || fAxiCq_D_OUT[96:93] == 4'd2) ;

  // rule RL_rl_rc_header
  assign WILL_FIRE_RL_rl_rc_header =
	     fAxiRc_va_rl && frc_FULL_N && fAxiRc_da_rl[17] && rc_even ;

  // rule RL_rl_rc_data
  assign CAN_FIRE_RL_rl_rc_data =
	     fAxiRc_va_rl && frc_FULL_N && (!rc_even || !fAxiRc_da_rl[17]) &&
	     rc_dwcount != 11'd0 ;
  assign WILL_FIRE_RL_rl_rc_data =
	     CAN_FIRE_RL_rl_rc_data && !WILL_FIRE_RL_rl_rc_header ;

  // rule RL_rl_cc_header
  assign WILL_FIRE_RL_rl_cc_header =
	     fcc_tlps_EMPTY_N && fAxiCc_FULL_N && fcc_tlps_D_OUT[152] ;

  // rule RL_rl_cc_data
  assign WILL_FIRE_RL_rl_cc_data =
	     fcc_tlps_EMPTY_N && fAxiCc_FULL_N && !fcc_tlps_D_OUT[152] &&
	     cc_dwcount != 11'd0 ;

  // rule RL_rl_rq_header
  assign WILL_FIRE_RL_rl_rq_header =
	     frq_tlps_EMPTY_N &&
	     (frq_tlps_D_OUT[126:125] == 2'd2 ||
	      frq_tlps_D_OUT[126:125] == 2'd3 ||
	      !fAxiRq_vb_rl) &&
	     frq_tlps_D_OUT[152] ;

  // rule RL_rl_rq_data
  assign WILL_FIRE_RL_rl_rq_data =
	     frq_tlps_i_notEmpty__98_AND_rq_even_55_AND_NOT_ETC___d561 &&
	     rq_dwcount != 11'd0 &&
	     !WILL_FIRE_RL_rl_rq_header ;

  // rule RL_cs_rl_update
  assign WILL_FIRE_RL_cs_rl_update =
	     v__h25149 != cs_snapshot &&
	     !(cs_changeFifo_EMPTY_N && changeFifo_FULL_N) ;

  // inputs to muxes for submodule ports
  assign MUX_fAxiRq_db_dummy2_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_rq_header && frq_tlps_D_OUT[126:125] != 2'd2 &&
	     frq_tlps_D_OUT[126:125] != 2'd3 ;
  assign MUX_rqBackpressure_write_1__SEL_1 =
	     rqBackpressure &&
	     (pcie_ep_s_axis_rq_tready != 4'd0 || !fAxiRq_va_rl) ;
  assign MUX_rqBackpressure_write_1__SEL_2 =
	     !rqBackpressure && pcie_ep_s_axis_rq_tready == 4'd0 &&
	     fAxiRq_va_rl ;
  assign MUX_rq_rq_write_1__SEL_1 = WILL_FIRE_RL_rl_rq_data && rq_even ;
  assign MUX_fAxiCc_enq_1__VAL_1 =
	     { x_data__h21733, 8'h0F, fcc_tlps_D_OUT[151] } ;
  assign MUX_fAxiCc_enq_1__VAL_2 =
	     { x__h22772, x_keep__h22789, cc_dwcount <= 11'd4 } ;
  assign MUX_fAxiRq_db_lat_0_wset_1__VAL_1 =
	     { rq_data__h23713,
	       frq_tlps_D_OUT[126:125] != 2'd2 &&
	       frq_tlps_D_OUT[126:125] != 2'd3 ||
	       dwcount__h23245 <= 11'd4,
	       8'h0F,
	       frq_tlps_D_OUT[67:64],
	       frq_tlps_D_OUT[71:68] } ;
  assign MUX_fAxiRq_db_lat_0_wset_1__VAL_2 =
	     { rq_data__h24209,
	       rq_dwcount_56_ULE_4___d557,
	       rq_keep__h24211,
	       rq_first_be,
	       rq_last_be } ;
  assign MUX_fcq_enq_1__VAL_1 =
	     { 1'd1,
	       fAxiCq_D_OUT[96:93] == 4'd0 || fAxiCq_D_OUT[96:93] == 4'd2 ||
	       fAxiCq_D_OUT[92:82] == 11'd1,
	       tlp16_hit__h15858,
	       tlp16_be__h15859,
	       tlp16_data__h15860 } ;
  assign MUX_fcq_enq_1__VAL_2 =
	     { 1'd1,
	       fAxiCq_D_OUT[96:93] == 4'd0 || fAxiCq_D_OUT[96:93] == 4'd2 ||
	       fAxiCq_D_OUT[92:82] == 11'd1,
	       tlp16_hit__h15858,
	       tlp16_be__h15859,
	       tlp16_data__h17590 } ;
  assign MUX_frc_enq_1__VAL_1 =
	     { 1'd1,
	       fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd0 ||
	       fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd1,
	       7'd1,
	       tlp16_be__h19192,
	       tlp16_data__h19193 } ;
  assign MUX_frc_enq_1__VAL_2 =
	     { 1'd0,
	       rc_dwcount_17_ULE_4___d422,
	       7'd0,
	       tlp16_be__h21087,
	       data__h21068 } ;
  assign MUX_rc_dwcount_write_1__VAL_1 =
	     (fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd0) ?
	       fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] :
	       fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] - 11'd1 ;
  assign MUX_rc_dwcount_write_1__VAL_2 =
	     rc_dwcount_17_ULE_4___d422 ? 11'd0 : dwcount__h21067 ;
  assign MUX_rc_even_write_1__VAL_1 =
	     fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd0 ||
	     fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd1 ;
  assign MUX_rc_even_write_1__VAL_2 = rc_dwcount_17_ULE_4___d422 || !rc_even ;
  assign MUX_rqBackpressureCycles_write_1__VAL_2 =
	     rqBackpressureCycles + 16'd1 ;
  assign MUX_rq_dwcount_write_1__VAL_2 =
	     rq_dwcount_56_ULE_4___d557 ? 11'd0 : dwcount__h24134 ;
  assign MUX_rq_even_write_1__VAL_1 =
	     !rq_dwcount_56_ULE_4___d557 && !rq_even ;

  // inlined wires
  assign fAxiRc_da_lat_2_wget =
	     fAxiRc_db_lat_0_whas ? fAxiRc_db_lat_0_wget : fAxiRc_db_rl ;
  assign fAxiRc_da_lat_2_whas =
	     IF_fAxiRc_vb_lat_1_whas__4_THEN_fAxiRc_vb_lat__ETC___d40 &&
	     (fAxiRc_va_lat_0_whas ? !1'd0 : !fAxiRc_va_rl) ;
  assign fAxiRc_va_lat_0_whas =
	     WILL_FIRE_RL_rl_rc_header &&
	     (fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd0 ||
	      fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd1) ||
	     WILL_FIRE_RL_rl_rc_data &&
	     (rc_dwcount_17_ULE_4___d422 || !rc_even) ;
  assign fAxiRc_db_lat_0_wget =
	     { pcie_ep_m_axis_rc_tdata,
	       pcie_ep_m_axis_rc_tuser[32],
	       pcie_ep_m_axis_rc_tlast,
	       pcie_ep_m_axis_rc_tkeep,
	       pcie_ep_m_axis_rc_tuser[7:0] } ;
  assign fAxiRc_db_lat_0_whas = x1__h14861 && pcie_ep_m_axis_rc_tvalid ;
  assign fAxiRq_da_lat_2_wget =
	     fAxiRq_db_lat_0_whas ? fAxiRq_db_lat_0_wget : fAxiRq_db_rl ;
  assign fAxiRq_da_lat_2_whas =
	     IF_fAxiRq_vb_lat_1_whas__6_THEN_fAxiRq_vb_lat__ETC___d92 &&
	     (fAxiRq_va_lat_0_whas || !fAxiRq_va_rl) ;
  assign fAxiRq_va_lat_0_whas =
	     pcie_ep_s_axis_rq_tready != 4'd0 && fAxiRq_va_rl ;
  assign fAxiRq_db_lat_0_wget =
	     MUX_fAxiRq_db_dummy2_0_write_1__SEL_1 ?
	       MUX_fAxiRq_db_lat_0_wset_1__VAL_1 :
	       MUX_fAxiRq_db_lat_0_wset_1__VAL_2 ;
  assign fAxiRq_db_lat_0_whas =
	     WILL_FIRE_RL_rl_rq_header && frq_tlps_D_OUT[126:125] != 2'd2 &&
	     frq_tlps_D_OUT[126:125] != 2'd3 ||
	     WILL_FIRE_RL_rl_rq_data &&
	     (!rq_even || rq_dwcount_56_ULE_4___d557) ;
  assign msix_int_enable_whas =
	     (!pcie_ep_cfg_interrupt_msix_enable[0] ||
	      intrFifo_EMPTY_N && intrMutex_FULL_N) &&
	     pcie_ep_cfg_interrupt_msix_enable[0] ;

  // register cc_dwcount
  assign cc_dwcount_D_IN = x__h21538 - 11'd1 ;
  assign cc_dwcount_EN = WILL_FIRE_RL_rl_cc_header ;

  // register cs_snapshot
  assign cs_snapshot_D_IN = v__h25149 ;
  assign cs_snapshot_EN = WILL_FIRE_RL_cs_rl_update && cs_changeFifo_FULL_N ;

  // register cyclesReg
  assign cyclesReg_D_IN = cyclesReg + 32'd1 ;
  assign cyclesReg_EN = 1'd1 ;

  // register fAxiRc_da_dummy2_0
  assign fAxiRc_da_dummy2_0_D_IN = 1'b0 ;
  assign fAxiRc_da_dummy2_0_EN = 1'b0 ;

  // register fAxiRc_da_dummy2_1
  assign fAxiRc_da_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRc_da_dummy2_1_EN = 1'b0 ;

  // register fAxiRc_da_dummy2_2
  assign fAxiRc_da_dummy2_2_D_IN = 1'd1 ;
  assign fAxiRc_da_dummy2_2_EN = fAxiRc_da_lat_2_whas ;

  // register fAxiRc_da_rl
  assign fAxiRc_da_rl_D_IN =
	     fAxiRc_da_lat_2_whas ? fAxiRc_da_lat_2_wget : fAxiRc_da_rl ;
  assign fAxiRc_da_rl_EN = 1'd1 ;

  // register fAxiRc_db_dummy2_0
  assign fAxiRc_db_dummy2_0_D_IN = 1'd1 ;
  assign fAxiRc_db_dummy2_0_EN = fAxiRc_db_lat_0_whas ;

  // register fAxiRc_db_dummy2_1
  assign fAxiRc_db_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRc_db_dummy2_1_EN = 1'b0 ;

  // register fAxiRc_db_dummy2_2
  assign fAxiRc_db_dummy2_2_D_IN = 1'b0 ;
  assign fAxiRc_db_dummy2_2_EN = 1'b0 ;

  // register fAxiRc_db_rl
  assign fAxiRc_db_rl_D_IN = fAxiRc_da_lat_2_wget ;
  assign fAxiRc_db_rl_EN = 1'd1 ;

  // register fAxiRc_va_dummy2_0
  assign fAxiRc_va_dummy2_0_D_IN = 1'd1 ;
  assign fAxiRc_va_dummy2_0_EN = fAxiRc_va_lat_0_whas ;

  // register fAxiRc_va_dummy2_1
  assign fAxiRc_va_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRc_va_dummy2_1_EN = 1'b0 ;

  // register fAxiRc_va_dummy2_2
  assign fAxiRc_va_dummy2_2_D_IN = 1'd1 ;
  assign fAxiRc_va_dummy2_2_EN = fAxiRc_da_lat_2_whas ;

  // register fAxiRc_va_rl
  assign fAxiRc_va_rl_D_IN =
	     fAxiRc_da_lat_2_whas ||
	     (fAxiRc_va_lat_0_whas ? 1'd0 : fAxiRc_va_rl) ;
  assign fAxiRc_va_rl_EN = 1'd1 ;

  // register fAxiRc_vb_dummy2_0
  assign fAxiRc_vb_dummy2_0_D_IN = 1'd1 ;
  assign fAxiRc_vb_dummy2_0_EN = fAxiRc_db_lat_0_whas ;

  // register fAxiRc_vb_dummy2_1
  assign fAxiRc_vb_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRc_vb_dummy2_1_EN = 1'b0 ;

  // register fAxiRc_vb_dummy2_2
  assign fAxiRc_vb_dummy2_2_D_IN = 1'd1 ;
  assign fAxiRc_vb_dummy2_2_EN = fAxiRc_da_lat_2_whas ;

  // register fAxiRc_vb_rl
  assign fAxiRc_vb_rl_D_IN =
	     !fAxiRc_da_lat_2_whas &&
	     IF_fAxiRc_vb_lat_1_whas__4_THEN_fAxiRc_vb_lat__ETC___d40 ;
  assign fAxiRc_vb_rl_EN = 1'd1 ;

  // register fAxiRq_da_dummy2_0
  assign fAxiRq_da_dummy2_0_D_IN = 1'b0 ;
  assign fAxiRq_da_dummy2_0_EN = 1'b0 ;

  // register fAxiRq_da_dummy2_1
  assign fAxiRq_da_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRq_da_dummy2_1_EN = 1'b0 ;

  // register fAxiRq_da_dummy2_2
  assign fAxiRq_da_dummy2_2_D_IN = 1'd1 ;
  assign fAxiRq_da_dummy2_2_EN = fAxiRq_da_lat_2_whas ;

  // register fAxiRq_da_rl
  assign fAxiRq_da_rl_D_IN =
	     fAxiRq_da_lat_2_whas ? fAxiRq_da_lat_2_wget : fAxiRq_da_rl ;
  assign fAxiRq_da_rl_EN = 1'd1 ;

  // register fAxiRq_db_dummy2_0
  assign fAxiRq_db_dummy2_0_D_IN = 1'd1 ;
  assign fAxiRq_db_dummy2_0_EN = fAxiRq_db_lat_0_whas ;

  // register fAxiRq_db_dummy2_1
  assign fAxiRq_db_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRq_db_dummy2_1_EN = 1'b0 ;

  // register fAxiRq_db_dummy2_2
  assign fAxiRq_db_dummy2_2_D_IN = 1'b0 ;
  assign fAxiRq_db_dummy2_2_EN = 1'b0 ;

  // register fAxiRq_db_rl
  assign fAxiRq_db_rl_D_IN = fAxiRq_da_lat_2_wget ;
  assign fAxiRq_db_rl_EN = 1'd1 ;

  // register fAxiRq_va_dummy2_0
  assign fAxiRq_va_dummy2_0_D_IN = 1'd1 ;
  assign fAxiRq_va_dummy2_0_EN = fAxiRq_va_lat_0_whas ;

  // register fAxiRq_va_dummy2_1
  assign fAxiRq_va_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRq_va_dummy2_1_EN = 1'b0 ;

  // register fAxiRq_va_dummy2_2
  assign fAxiRq_va_dummy2_2_D_IN = 1'd1 ;
  assign fAxiRq_va_dummy2_2_EN = fAxiRq_da_lat_2_whas ;

  // register fAxiRq_va_rl
  assign fAxiRq_va_rl_D_IN =
	     fAxiRq_da_lat_2_whas || !fAxiRq_va_lat_0_whas && fAxiRq_va_rl ;
  assign fAxiRq_va_rl_EN = 1'd1 ;

  // register fAxiRq_vb_dummy2_0
  assign fAxiRq_vb_dummy2_0_D_IN = 1'd1 ;
  assign fAxiRq_vb_dummy2_0_EN = fAxiRq_db_lat_0_whas ;

  // register fAxiRq_vb_dummy2_1
  assign fAxiRq_vb_dummy2_1_D_IN = 1'b0 ;
  assign fAxiRq_vb_dummy2_1_EN = 1'b0 ;

  // register fAxiRq_vb_dummy2_2
  assign fAxiRq_vb_dummy2_2_D_IN = 1'd1 ;
  assign fAxiRq_vb_dummy2_2_EN = fAxiRq_da_lat_2_whas ;

  // register fAxiRq_vb_rl
  assign fAxiRq_vb_rl_D_IN =
	     !fAxiRq_da_lat_2_whas &&
	     IF_fAxiRq_vb_lat_1_whas__6_THEN_fAxiRq_vb_lat__ETC___d92 ;
  assign fAxiRq_vb_rl_EN = 1'd1 ;

  // register rc_dwcount
  assign rc_dwcount_D_IN =
	     WILL_FIRE_RL_rl_rc_header ?
	       MUX_rc_dwcount_write_1__VAL_1 :
	       MUX_rc_dwcount_write_1__VAL_2 ;
  assign rc_dwcount_EN =
	     WILL_FIRE_RL_rl_rc_header || WILL_FIRE_RL_rl_rc_data ;

  // register rc_even
  assign rc_even_D_IN =
	     WILL_FIRE_RL_rl_rc_header ?
	       MUX_rc_even_write_1__VAL_1 :
	       MUX_rc_even_write_1__VAL_2 ;
  assign rc_even_EN = WILL_FIRE_RL_rl_rc_header || WILL_FIRE_RL_rl_rc_data ;

  // register rqBackpressure
  assign rqBackpressure_D_IN = !MUX_rqBackpressure_write_1__SEL_1 ;
  assign rqBackpressure_EN =
	     rqBackpressure &&
	     (pcie_ep_s_axis_rq_tready != 4'd0 || !fAxiRq_va_rl) ||
	     !rqBackpressure && pcie_ep_s_axis_rq_tready == 4'd0 &&
	     fAxiRq_va_rl ;

  // register rqBackpressureCount
  assign rqBackpressureCount_D_IN = count__h14428 ;
  assign rqBackpressureCount_EN =
	     rqBackpressure &&
	     (pcie_ep_s_axis_rq_tready != 4'd0 || !fAxiRq_va_rl) &&
	     count__h14428 > 16'd5 ;

  // register rqBackpressureCountSum
  assign rqBackpressureCountSum_D_IN = rqBackpressureCountSum + y__h14563 ;
  assign rqBackpressureCountSum_EN = MUX_rqBackpressure_write_1__SEL_1 ;

  // register rqBackpressureCycles
  assign rqBackpressureCycles_D_IN =
	     MUX_rqBackpressure_write_1__SEL_2 ?
	       16'd0 :
	       MUX_rqBackpressureCycles_write_1__VAL_2 ;
  assign rqBackpressureCycles_EN =
	     !rqBackpressure && pcie_ep_s_axis_rq_tready == 4'd0 &&
	     fAxiRq_va_rl ||
	     rqBackpressure ;

  // register rqBackpressureEvents
  assign rqBackpressureEvents_D_IN = rqBackpressureEvents + 32'd1 ;
  assign rqBackpressureEvents_EN = MUX_rqBackpressure_write_1__SEL_1 ;

  // register rq_dwcount
  assign rq_dwcount_D_IN =
	     WILL_FIRE_RL_rl_rq_header ?
	       dwcount__h23245 :
	       MUX_rq_dwcount_write_1__VAL_2 ;
  assign rq_dwcount_EN =
	     WILL_FIRE_RL_rl_rq_header || WILL_FIRE_RL_rl_rq_data ;

  // register rq_even
  assign rq_even_D_IN =
	     WILL_FIRE_RL_rl_rq_data && MUX_rq_even_write_1__VAL_1 ;
  assign rq_even_EN = WILL_FIRE_RL_rl_rq_data || WILL_FIRE_RL_rl_rq_header ;

  // register rq_first_be
  assign rq_first_be_D_IN = frq_tlps_D_OUT[67:64] ;
  assign rq_first_be_EN = WILL_FIRE_RL_rl_rq_header ;

  // register rq_last_be
  assign rq_last_be_D_IN = frq_tlps_D_OUT[71:68] ;
  assign rq_last_be_EN = WILL_FIRE_RL_rl_rq_header ;

  // register rq_rq
  assign rq_rq_D_IN =
	     MUX_rq_rq_write_1__SEL_1 ?
	       MUX_fAxiRq_db_lat_0_wset_1__VAL_2 :
	       MUX_fAxiRq_db_lat_0_wset_1__VAL_1 ;
  assign rq_rq_EN =
	     WILL_FIRE_RL_rl_rq_data && rq_even ||
	     WILL_FIRE_RL_rl_rq_header &&
	     (frq_tlps_D_OUT[126:125] == 2'd2 ||
	      frq_tlps_D_OUT[126:125] == 2'd3) ;

  // submodule changeFifo
  assign changeFifo_D_IN = cs_changeFifo_D_OUT ;
  assign changeFifo_ENQ = cs_changeFifo_EMPTY_N && changeFifo_FULL_N ;
  assign changeFifo_DEQ = EN_regChanges_deq ;
  assign changeFifo_CLR = 1'b0 ;

  // submodule clkgen_pll
  assign clkgen_pll_CLKFBIN = clkgen_pll_clkfbbuf_O ;
  assign clkgen_pll_CLKINSEL = 1'd1 ;
  assign clkgen_pll_DADDR = 7'h0 ;
  assign clkgen_pll_DI = 16'h0 ;
  assign clkgen_pll_DWE = 1'b0 ;
  assign clkgen_pll_PSINCDEC = 1'b0 ;
  assign clkgen_pll_DEN = 1'b0 ;
  assign clkgen_pll_PSEN = 1'b0 ;

  // submodule cs_changeFifo
  assign cs_changeFifo_D_IN = { cyclesReg, 16'd5632, rqBackpressureCount } ;
  assign cs_changeFifo_ENQ =
	     WILL_FIRE_RL_cs_rl_update && cs_changeFifo_FULL_N ;
  assign cs_changeFifo_DEQ = cs_changeFifo_EMPTY_N && changeFifo_FULL_N ;
  assign cs_changeFifo_CLR = 1'b0 ;

  // submodule fAxiCc
  assign fAxiCc_D_IN =
	     WILL_FIRE_RL_rl_cc_header ?
	       MUX_fAxiCc_enq_1__VAL_1 :
	       MUX_fAxiCc_enq_1__VAL_2 ;
  assign fAxiCc_ENQ = WILL_FIRE_RL_rl_cc_header || WILL_FIRE_RL_rl_cc_data ;
  assign fAxiCc_DEQ = WILL_FIRE_RL_drive_axi_cc ;
  assign fAxiCc_CLR = 1'b0 ;

  // submodule fAxiCq
  assign fAxiCq_D_IN =
	     { pcie_ep_m_axis_cq_tdata,
	       pcie_ep_m_axis_cq_tuser[40],
	       pcie_ep_m_axis_cq_tlast,
	       pcie_ep_m_axis_cq_tkeep,
	       pcie_ep_m_axis_cq_tuser[3:0],
	       pcie_ep_m_axis_cq_tuser[7:4] } ;
  assign fAxiCq_ENQ = fAxiCq_FULL_N && pcie_ep_m_axis_cq_tvalid ;
  assign fAxiCq_DEQ =
	     WILL_FIRE_RL_rl_cq_rd_header ||
	     fAxiCq_EMPTY_N && !fAxiCq_D_OUT[17] ||
	     WILL_FIRE_RL_rl_cq_wr_header ;
  assign fAxiCq_CLR = 1'b0 ;

  // submodule fcc
  assign fcc_D_IN = tlpc_request_put ;
  assign fcc_ENQ = EN_tlpc_request_put ;
  assign fcc_DEQ = fcc_EMPTY_N && fcc_tlps_FULL_N ;
  assign fcc_CLR = 1'b0 ;

  // submodule fcc_tlps
  assign fcc_tlps_D_IN = fcc_D_OUT ;
  assign fcc_tlps_ENQ = fcc_EMPTY_N && fcc_tlps_FULL_N ;
  assign fcc_tlps_DEQ = WILL_FIRE_RL_rl_cc_data || WILL_FIRE_RL_rl_cc_header ;
  assign fcc_tlps_CLR = 1'b0 ;

  // submodule fcq
  assign fcq_D_IN =
	     WILL_FIRE_RL_rl_cq_wr_header ?
	       MUX_fcq_enq_1__VAL_1 :
	       MUX_fcq_enq_1__VAL_2 ;
  assign fcq_ENQ =
	     WILL_FIRE_RL_rl_cq_wr_header || WILL_FIRE_RL_rl_cq_rd_header ;
  assign fcq_DEQ = EN_tlpc_response_get ;
  assign fcq_CLR = 1'b0 ;

  // submodule frc
  assign frc_D_IN =
	     WILL_FIRE_RL_rl_rc_header ?
	       MUX_frc_enq_1__VAL_1 :
	       MUX_frc_enq_1__VAL_2 ;
  assign frc_ENQ = WILL_FIRE_RL_rl_rc_header || WILL_FIRE_RL_rl_rc_data ;
  assign frc_DEQ = EN_tlpr_response_get ;
  assign frc_CLR = 1'b0 ;

  // submodule frq
  assign frq_D_IN = tlpr_request_put ;
  assign frq_ENQ = EN_tlpr_request_put ;
  assign frq_DEQ = frq_EMPTY_N && frq_tlps_FULL_N ;
  assign frq_CLR = 1'b0 ;

  // submodule frq_tlps
  assign frq_tlps_D_IN = frq_D_OUT ;
  assign frq_tlps_ENQ = frq_EMPTY_N && frq_tlps_FULL_N ;
  assign frq_tlps_DEQ = WILL_FIRE_RL_rl_rq_data || WILL_FIRE_RL_rl_rq_header ;
  assign frq_tlps_CLR = 1'b0 ;

  // submodule intrFifo
  assign intrFifo_D_IN = interruptRequest_put ;
  assign intrFifo_ENQ = EN_interruptRequest_put ;
  assign intrFifo_DEQ = msix_int_enable_whas ;
  assign intrFifo_CLR = 1'b0 ;

  // submodule intrMutex
  assign intrMutex_D_IN = 1'd1 ;
  assign intrMutex_ENQ = msix_int_enable_whas ;
  assign intrMutex_DEQ =
	     intrMutex_EMPTY_N &&
	     (pcie_ep_cfg_interrupt_msix_sent ||
	      pcie_ep_cfg_interrupt_msix_fail) ;
  assign intrMutex_CLR = 1'b0 ;

  // submodule pcie_ep
  assign pcie_ep_cfg_config_space_enable = 1'd1 ;
  assign pcie_ep_cfg_ds_bus_number = 8'd0 ;
  assign pcie_ep_cfg_ds_device_number = 5'd0 ;
  assign pcie_ep_cfg_ds_function_number = 3'h0 ;
  assign pcie_ep_cfg_ds_port_number = 8'd0 ;
  assign pcie_ep_cfg_dsn = 64'hF001BA7700000000 ;
  assign pcie_ep_cfg_err_cor_in = 1'd0 ;
  assign pcie_ep_cfg_err_uncor_in = 1'd0 ;
  assign pcie_ep_cfg_fc_sel = 3'h0 ;
  assign pcie_ep_cfg_flr_done = 4'd0 ;
  assign pcie_ep_cfg_hot_reset_in = 1'd0 ;
  assign pcie_ep_cfg_interrupt_int = 4'h0 ;
  assign pcie_ep_cfg_interrupt_msi_attr = 3'h0 ;
  assign pcie_ep_cfg_interrupt_msi_function_number = 4'h0 ;
  assign pcie_ep_cfg_interrupt_msi_int = 32'h0 ;
  assign pcie_ep_cfg_interrupt_msi_pending_status = 32'h0 ;
  assign pcie_ep_cfg_interrupt_msi_pending_status_data_enable = 1'b0 ;
  assign pcie_ep_cfg_interrupt_msi_pending_status_function_num = 4'h0 ;
  assign pcie_ep_cfg_interrupt_msi_select = 4'h0 ;
  assign pcie_ep_cfg_interrupt_msi_tph_present = 1'b0 ;
  assign pcie_ep_cfg_interrupt_msi_tph_st_tag = 9'h0 ;
  assign pcie_ep_cfg_interrupt_msi_tph_type = 2'h0 ;
  assign pcie_ep_cfg_interrupt_msix_address = intrFifo_D_OUT[95:32] ;
  assign pcie_ep_cfg_interrupt_msix_data = intrFifo_D_OUT[31:0] ;
  assign pcie_ep_cfg_interrupt_msix_int = msix_int_enable_whas ;
  assign pcie_ep_cfg_interrupt_pending = 4'h0 ;
  assign pcie_ep_cfg_link_training_enable = 1'd1 ;
  assign pcie_ep_cfg_mgmt_addr = 19'h0 ;
  assign pcie_ep_cfg_mgmt_byte_enable = 4'h0 ;
  assign pcie_ep_cfg_mgmt_read = 1'b0 ;
  assign pcie_ep_cfg_mgmt_type1_cfg_reg_access = 1'b0 ;
  assign pcie_ep_cfg_mgmt_write = 1'b0 ;
  assign pcie_ep_cfg_mgmt_write_data = 32'h0 ;
  assign pcie_ep_cfg_msg_transmit = 1'b0 ;
  assign pcie_ep_cfg_msg_transmit_data = 32'h0 ;
  assign pcie_ep_cfg_msg_transmit_type = 3'h0 ;
  assign pcie_ep_cfg_per_func_status_control = 3'h0 ;
  assign pcie_ep_cfg_per_function_number = 4'd0 ;
  assign pcie_ep_cfg_per_function_output_request = 1'd0 ;
  assign pcie_ep_cfg_power_state_change_ack = 1'd1 ;
  assign pcie_ep_cfg_req_pm_transition_l23_ready = 1'd0 ;
  assign pcie_ep_cfg_subsys_vend_id = 16'h1BE8 ;
  assign pcie_ep_cfg_vf_flr_done = 8'd0 ;
  assign pcie_ep_m_axis_cq_tready = fAxiCq_FULL_N ;
  assign pcie_ep_m_axis_rc_tready = x1__h14861 ;
  assign pcie_ep_pci_exp_rxn = pcie_rxn_v ;
  assign pcie_ep_pci_exp_rxp = pcie_rxp_v ;
  assign pcie_ep_pcie_cq_np_req = 1'd1 ;
  assign pcie_ep_pcie_perstn1_in = 1'b0 ;
  assign pcie_ep_s_axis_cc_tdata =
	     WILL_FIRE_RL_drive_axi_cc ? fAxiCc_D_OUT[264:9] : 256'd0 ;
  assign pcie_ep_s_axis_cc_tkeep =
	     WILL_FIRE_RL_drive_axi_cc ? fAxiCc_D_OUT[8:1] : 8'd0 ;
  assign pcie_ep_s_axis_cc_tlast =
	     WILL_FIRE_RL_drive_axi_cc && fAxiCc_D_OUT[0] ;
  assign pcie_ep_s_axis_cc_tuser = 33'd0 ;
  assign pcie_ep_s_axis_cc_tvalid = !WILL_FIRE_RL_drive_axi_cc2 ;
  assign pcie_ep_s_axis_rq_tdata =
	     (pcie_ep_s_axis_rq_tready != 4'd0 && fAxiRq_va_rl) ?
	       fAxiRq_da_rl[272:17] :
	       256'd0 ;
  assign pcie_ep_s_axis_rq_tkeep =
	     (pcie_ep_s_axis_rq_tready != 4'd0 && fAxiRq_va_rl) ?
	       fAxiRq_da_rl[15:8] :
	       8'd0 ;
  assign pcie_ep_s_axis_rq_tlast =
	     pcie_ep_s_axis_rq_tready != 4'd0 && fAxiRq_va_rl &&
	     fAxiRq_da_rl[16] ;
  assign pcie_ep_s_axis_rq_tuser =
	     (pcie_ep_s_axis_rq_tready != 4'd0 && fAxiRq_va_rl) ?
	       y_avValue_snd_snd_snd_snd__h14046 :
	       60'd0 ;
  assign pcie_ep_s_axis_rq_tvalid = fAxiRq_va_lat_0_whas ;

  // remaining internal signals
  assign IF_fAxiCq_first__04_BITS_92_TO_82_15_EQ_1024_3_ETC___d233 =
	     (fAxiCq_D_OUT[92:82] == 11'd1024) ? 10'd0 : fAxiCq_D_OUT[91:82] ;
  assign IF_fAxiRc_vb_lat_1_whas__4_THEN_fAxiRc_vb_lat__ETC___d40 =
	     fAxiRc_db_lat_0_whas || fAxiRc_vb_rl ;
  assign IF_fAxiRq_vb_lat_1_whas__6_THEN_fAxiRq_vb_lat__ETC___d92 =
	     fAxiRq_db_lat_0_whas ? 1'd1 : fAxiRq_vb_rl ;
  assign _theResult_____1_snd_data__h24236 =
	     { rq_rq[272:145], frq_tlps_D_OUT[127:0] } ;
  assign _theResult_____1_snd_data__h24243 =
	     { frq_tlps_D_OUT[127:0], rq_rq[144:17] } ;
  assign _theResult___snd_address__h23366 = { 32'd0, frq_tlps_D_OUT[63:34] } ;
  assign _theResult___snd_dwcount__h23379 =
	     (frq_tlps_D_OUT[105:96] == 10'd0) ?
	       11'd1024 :
	       { 1'd0, frq_tlps_D_OUT[105:96] } ;
  assign a_bytecount__h21572 =
	     (fcc_tlps_D_OUT[75:64] == 12'd0) ?
	       13'd4096 :
	       { 1'd0, fcc_tlps_D_OUT[75:64] } ;
  assign b__h21556 =
	     { fcc_tlps_D_OUT[7:0],
	       fcc_tlps_D_OUT[15:8],
	       fcc_tlps_D_OUT[23:16],
	       fcc_tlps_D_OUT[31:24] } ;
  assign count__h14428 =
	     { ~rqBackpressureCount[15], rqBackpressureCycles[14:0] } ;
  assign data__h21068 =
	     rc_even ?
	       fAxiRc_da_rl_BITS_273_TO_18__q2[127:0] :
	       fAxiRc_da_rl_BITS_273_TO_18__q2[255:128] ;
  assign dwcount__h21067 = rc_dwcount - 11'd4 ;
  assign dwcount__h23245 =
	     (frq_tlps_D_OUT[126:125] == 2'd2 ||
	      frq_tlps_D_OUT[126:125] == 2'd3) ?
	       _theResult___snd_dwcount__h23379 :
	       11'd0 ;
  assign dwcount__h24134 = rq_dwcount - 11'd4 ;
  assign fAxiRc_da_rl_BITS_273_TO_18__q2 = fAxiRc_da_rl[273:18] ;
  assign frq_tlps_i_notEmpty__98_AND_rq_even_55_AND_NOT_ETC___d561 =
	     frq_tlps_EMPTY_N &&
	     (rq_even && !rq_dwcount_56_ULE_4___d557 || !fAxiRq_vb_rl) ;
  assign rc_dwcount_17_ULE_4___d422 = rc_dwcount <= 11'd4 ;
  assign rq_data__h23713 =
	     { 130'd0,
	       frq_tlps_D_OUT[109:108],
	       frq_tlps_D_OUT[118:116],
	       17'd0,
	       frq_tlps_D_OUT[79:72],
	       frq_tlps_D_OUT[95:80],
	       frq_tlps_D_OUT[110],
	       CASE_frq_tlpsD_OUT_BITS_126_TO_125_0_0_1_0_2__ETC__q1,
	       _theResult___snd_dwcount__h23379,
	       _theResult___snd_address__h23380,
	       2'd0 } ;
  assign rq_data__h24209 =
	     rq_even ?
	       _theResult_____1_snd_data__h24236 :
	       _theResult_____1_snd_data__h24243 ;
  assign rq_dwcount_56_ULE_4___d557 = rq_dwcount <= 11'd4 ;
  assign rq_keep__h24211 =
	     rq_even ?
	       _theResult_____1_fst__h24234 :
	       _theResult_____1_fst__h24241 ;
  assign tlp16_be__h19192 =
	     (fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd0) ?
	       16'hFFF0 :
	       16'hFFFF ;
  assign tlp16_data__h15860 =
	     { 1'd0,
	       IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_T_ETC___d224,
	       IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_O_ETC___d228,
	       1'd0,
	       fAxiCq_D_OUT[141:139],
	       6'd0,
	       fAxiCq_D_OUT[143:142],
	       2'd0,
	       IF_fAxiCq_first__04_BITS_92_TO_82_15_EQ_1024_3_ETC___d233,
	       fAxiCq_D_OUT[113:98],
	       fAxiCq_D_OUT[121:114],
	       fAxiCq_D_OUT[3:0],
	       fAxiCq_D_OUT[7:4],
	       fAxiCq_D_OUT[49:20],
	       2'd0,
	       fAxiCq_D_OUT[153:146],
	       fAxiCq_D_OUT[161:154],
	       fAxiCq_D_OUT[169:162],
	       fAxiCq_D_OUT[177:170] } ;
  assign tlp16_data__h17590 =
	     { 1'd0,
	       IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_T_ETC___d224,
	       IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_O_ETC___d228,
	       1'd0,
	       fAxiCq_D_OUT[141:139],
	       6'd0,
	       fAxiCq_D_OUT[143:142],
	       2'd0,
	       IF_fAxiCq_first__04_BITS_92_TO_82_15_EQ_1024_3_ETC___d233,
	       fAxiCq_D_OUT[113:98],
	       fAxiCq_D_OUT[121:114],
	       fAxiCq_D_OUT[3:0],
	       fAxiCq_D_OUT[7:4],
	       fAxiCq_D_OUT[49:20],
	       34'd0 } ;
  assign tlp16_data__h19193 =
	     { 9'd148,
	       fAxiRc_da_rl_BITS_273_TO_18__q2[91:89],
	       5'd0,
	       fAxiRc_da_rl_BITS_273_TO_18__q2[46],
	       fAxiRc_da_rl_BITS_273_TO_18__q2[93:92],
	       2'd0,
	       (fAxiRc_da_rl_BITS_273_TO_18__q2[42:32] == 11'd1024) ?
		 10'd0 :
		 fAxiRc_da_rl_BITS_273_TO_18__q2[41:32],
	       fAxiRc_da_rl_BITS_273_TO_18__q2[87:72],
	       fAxiRc_da_rl_BITS_273_TO_18__q2[45:43],
	       1'd0,
	       (fAxiRc_da_rl_BITS_273_TO_18__q2[28:16] == 13'd4096) ?
		 12'd0 :
		 fAxiRc_da_rl_BITS_273_TO_18__q2[27:16],
	       fAxiRc_da_rl_BITS_273_TO_18__q2[63:48],
	       fAxiRc_da_rl_BITS_273_TO_18__q2[71:64],
	       1'd0,
	       fAxiRc_da_rl_BITS_273_TO_18__q2[6:0],
	       fAxiRc_da_rl_BITS_273_TO_18__q2[127:96] } ;
  assign tlp16_hit__h15858 = 7'd1 << fAxiCq_D_OUT[132:130] ;
  assign v__h25149 = { 8'd0, rqBackpressureCount } ;
  assign x1__h14861 = !fAxiRc_vb_rl ;
  assign x__h21538 =
	     (fcc_tlps_D_OUT[105:96] == 10'd0) ?
	       11'd1024 :
	       { 1'd0, fcc_tlps_D_OUT[105:96] } ;
  assign x__h21737 =
	     { b__h21556,
	       2'd0,
	       fcc_tlps_D_OUT[109:108],
	       fcc_tlps_D_OUT[118:116],
	       1'd0,
	       fcc_tlps_D_OUT[95:80],
	       fcc_tlps_D_OUT[47:40],
	       fcc_tlps_D_OUT[63:48],
	       1'd0,
	       fcc_tlps_D_OUT[110],
	       fcc_tlps_D_OUT[79:77],
	       x__h21538,
	       3'd0,
	       a_bytecount__h21572,
	       9'd0,
	       fcc_tlps_D_OUT[38:32] } ;
  assign x__h22772 = { 128'd0, fcc_tlps_D_OUT[127:0] } ;
  assign x_data__h21733 = { 128'd0, x__h21737 } ;
  assign x_keep__h22789 = (cc_dwcount == 11'd3) ? 8'h0F : 8'hFF ;
  assign y__h14563 = { 16'd0, count__h14428 } ;
  assign y_avValue_snd_snd_snd_snd__h14046 =
	     { 52'd0, fAxiRq_da_rl[3:0], fAxiRq_da_rl[7:4] } ;
  always@(rc_dwcount)
  begin
    case (rc_dwcount)
      11'd1: tlp16_be__h21087 = 16'hF000;
      11'd2: tlp16_be__h21087 = 16'hFF00;
      11'd3: tlp16_be__h21087 = 16'hFFF0;
      default: tlp16_be__h21087 = 16'hFFFF;
    endcase
  end
  always@(frq_tlps_D_OUT or _theResult___snd_address__h23366)
  begin
    case (frq_tlps_D_OUT[126:125])
      2'd1, 2'd3: _theResult___snd_address__h23380 = frq_tlps_D_OUT[63:2];
      default: _theResult___snd_address__h23380 =
		   _theResult___snd_address__h23366;
    endcase
  end
  always@(frq_tlps_D_OUT)
  begin
    case (frq_tlps_D_OUT[126:125])
      2'd0, 2'd1:
	  CASE_frq_tlpsD_OUT_BITS_126_TO_125_0_0_1_0_2__ETC__q1 = 4'd0;
      2'd2, 2'd3:
	  CASE_frq_tlpsD_OUT_BITS_126_TO_125_0_0_1_0_2__ETC__q1 = 4'd1;
    endcase
  end
  always@(rq_dwcount)
  begin
    case (rq_dwcount)
      11'd1: _theResult_____1_fst__h24234 = 8'h01;
      11'd2: _theResult_____1_fst__h24234 = 8'h03;
      11'd3: _theResult_____1_fst__h24234 = 8'h07;
      default: _theResult_____1_fst__h24234 = 8'h0F;
    endcase
  end
  always@(rq_dwcount)
  begin
    case (rq_dwcount)
      11'd1: _theResult_____1_fst__h24241 = 8'h1F;
      11'd2: _theResult_____1_fst__h24241 = 8'h3F;
      11'd3: _theResult_____1_fst__h24241 = 8'h7F;
      default: _theResult_____1_fst__h24241 = 8'hFF;
    endcase
  end
  always@(fAxiCq_D_OUT)
  begin
    case (fAxiCq_D_OUT[96:93])
      4'd0, 4'd2: tlp16_be__h15859 = 16'hFFF0;
      default: tlp16_be__h15859 = 16'hFFFF;
    endcase
  end
  always@(fAxiCq_D_OUT)
  begin
    case (fAxiCq_D_OUT[96:93])
      4'd0, 4'd1:
	  IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_O_ETC___d228 = 5'd0;
      default: IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_O_ETC___d228 =
		   5'd2;
    endcase
  end
  always@(fAxiCq_D_OUT)
  begin
    case (fAxiCq_D_OUT[96:93])
      4'd0, 4'd2:
	  IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_T_ETC___d224 = 2'd0;
      4'd1: IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_T_ETC___d224 = 2'd2;
      default: IF_fAxiCq_first__04_BITS_96_TO_93_06_EQ_0_12_T_ETC___d224 =
		   2'd2;
    endcase
  end
  always@(fAxiCq_D_OUT)
  begin
    case (fAxiCq_D_OUT[138:133])
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36,
      6'd37,
      6'd38,
      6'd39,
      6'd40:
	  CASE_fAxiCqD_OUT_BITS_138_TO_133_7_fAxiCqD_O_ETC__q3 =
	      fAxiCq_D_OUT[138:133];
      default: CASE_fAxiCqD_OUT_BITS_138_TO_133_7_fAxiCqD_O_ETC__q3 = 6'd41;
    endcase
  end
  always@(fAxiCq_D_OUT)
  begin
    case (fAxiCq_D_OUT[129:122])
      8'd0, 8'd1, 8'd64, 8'd65, 8'd66, 8'd67, 8'd68, 8'd69:
	  CASE_fAxiCqD_OUT_BITS_129_TO_122_0_fAxiCqD_O_ETC__q4 =
	      fAxiCq_D_OUT[129:122];
      default: CASE_fAxiCqD_OUT_BITS_129_TO_122_0_fAxiCqD_O_ETC__q4 = 8'd255;
    endcase
  end

  // handling of inlined registers

  always@(posedge pcie_ep_user_clk)
  begin
    if (user_reset_n_RESET_OUT == `BSV_RESET_VALUE)
      begin
        cc_dwcount <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cs_snapshot <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cyclesReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fAxiRc_da_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_da_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_da_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_da_rl <= `BSV_ASSIGNMENT_DELAY
	    274'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fAxiRc_db_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_db_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_db_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_db_rl <= `BSV_ASSIGNMENT_DELAY
	    274'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fAxiRc_va_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_va_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_va_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_va_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fAxiRc_vb_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_vb_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_vb_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRc_vb_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fAxiRq_da_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_da_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_da_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_da_rl <= `BSV_ASSIGNMENT_DELAY
	    273'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fAxiRq_db_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_db_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_db_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_db_rl <= `BSV_ASSIGNMENT_DELAY
	    273'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	fAxiRq_va_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_va_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_va_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_va_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fAxiRq_vb_dummy2_0 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_vb_dummy2_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_vb_dummy2_2 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fAxiRq_vb_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_even <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rqBackpressure <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rqBackpressureCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rqBackpressureCountSum <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rqBackpressureCycles <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rqBackpressureEvents <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rq_dwcount <= `BSV_ASSIGNMENT_DELAY 11'd0;
	rq_first_be <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rq_last_be <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cc_dwcount_EN)
	  cc_dwcount <= `BSV_ASSIGNMENT_DELAY cc_dwcount_D_IN;
	if (cs_snapshot_EN)
	  cs_snapshot <= `BSV_ASSIGNMENT_DELAY cs_snapshot_D_IN;
	if (cyclesReg_EN) cyclesReg <= `BSV_ASSIGNMENT_DELAY cyclesReg_D_IN;
	if (fAxiRc_da_dummy2_0_EN)
	  fAxiRc_da_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRc_da_dummy2_0_D_IN;
	if (fAxiRc_da_dummy2_1_EN)
	  fAxiRc_da_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRc_da_dummy2_1_D_IN;
	if (fAxiRc_da_dummy2_2_EN)
	  fAxiRc_da_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRc_da_dummy2_2_D_IN;
	if (fAxiRc_da_rl_EN)
	  fAxiRc_da_rl <= `BSV_ASSIGNMENT_DELAY fAxiRc_da_rl_D_IN;
	if (fAxiRc_db_dummy2_0_EN)
	  fAxiRc_db_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRc_db_dummy2_0_D_IN;
	if (fAxiRc_db_dummy2_1_EN)
	  fAxiRc_db_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRc_db_dummy2_1_D_IN;
	if (fAxiRc_db_dummy2_2_EN)
	  fAxiRc_db_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRc_db_dummy2_2_D_IN;
	if (fAxiRc_db_rl_EN)
	  fAxiRc_db_rl <= `BSV_ASSIGNMENT_DELAY fAxiRc_db_rl_D_IN;
	if (fAxiRc_va_dummy2_0_EN)
	  fAxiRc_va_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRc_va_dummy2_0_D_IN;
	if (fAxiRc_va_dummy2_1_EN)
	  fAxiRc_va_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRc_va_dummy2_1_D_IN;
	if (fAxiRc_va_dummy2_2_EN)
	  fAxiRc_va_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRc_va_dummy2_2_D_IN;
	if (fAxiRc_va_rl_EN)
	  fAxiRc_va_rl <= `BSV_ASSIGNMENT_DELAY fAxiRc_va_rl_D_IN;
	if (fAxiRc_vb_dummy2_0_EN)
	  fAxiRc_vb_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRc_vb_dummy2_0_D_IN;
	if (fAxiRc_vb_dummy2_1_EN)
	  fAxiRc_vb_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRc_vb_dummy2_1_D_IN;
	if (fAxiRc_vb_dummy2_2_EN)
	  fAxiRc_vb_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRc_vb_dummy2_2_D_IN;
	if (fAxiRc_vb_rl_EN)
	  fAxiRc_vb_rl <= `BSV_ASSIGNMENT_DELAY fAxiRc_vb_rl_D_IN;
	if (fAxiRq_da_dummy2_0_EN)
	  fAxiRq_da_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRq_da_dummy2_0_D_IN;
	if (fAxiRq_da_dummy2_1_EN)
	  fAxiRq_da_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRq_da_dummy2_1_D_IN;
	if (fAxiRq_da_dummy2_2_EN)
	  fAxiRq_da_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRq_da_dummy2_2_D_IN;
	if (fAxiRq_da_rl_EN)
	  fAxiRq_da_rl <= `BSV_ASSIGNMENT_DELAY fAxiRq_da_rl_D_IN;
	if (fAxiRq_db_dummy2_0_EN)
	  fAxiRq_db_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRq_db_dummy2_0_D_IN;
	if (fAxiRq_db_dummy2_1_EN)
	  fAxiRq_db_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRq_db_dummy2_1_D_IN;
	if (fAxiRq_db_dummy2_2_EN)
	  fAxiRq_db_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRq_db_dummy2_2_D_IN;
	if (fAxiRq_db_rl_EN)
	  fAxiRq_db_rl <= `BSV_ASSIGNMENT_DELAY fAxiRq_db_rl_D_IN;
	if (fAxiRq_va_dummy2_0_EN)
	  fAxiRq_va_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRq_va_dummy2_0_D_IN;
	if (fAxiRq_va_dummy2_1_EN)
	  fAxiRq_va_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRq_va_dummy2_1_D_IN;
	if (fAxiRq_va_dummy2_2_EN)
	  fAxiRq_va_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRq_va_dummy2_2_D_IN;
	if (fAxiRq_va_rl_EN)
	  fAxiRq_va_rl <= `BSV_ASSIGNMENT_DELAY fAxiRq_va_rl_D_IN;
	if (fAxiRq_vb_dummy2_0_EN)
	  fAxiRq_vb_dummy2_0 <= `BSV_ASSIGNMENT_DELAY fAxiRq_vb_dummy2_0_D_IN;
	if (fAxiRq_vb_dummy2_1_EN)
	  fAxiRq_vb_dummy2_1 <= `BSV_ASSIGNMENT_DELAY fAxiRq_vb_dummy2_1_D_IN;
	if (fAxiRq_vb_dummy2_2_EN)
	  fAxiRq_vb_dummy2_2 <= `BSV_ASSIGNMENT_DELAY fAxiRq_vb_dummy2_2_D_IN;
	if (fAxiRq_vb_rl_EN)
	  fAxiRq_vb_rl <= `BSV_ASSIGNMENT_DELAY fAxiRq_vb_rl_D_IN;
	if (rc_even_EN) rc_even <= `BSV_ASSIGNMENT_DELAY rc_even_D_IN;
	if (rqBackpressure_EN)
	  rqBackpressure <= `BSV_ASSIGNMENT_DELAY rqBackpressure_D_IN;
	if (rqBackpressureCount_EN)
	  rqBackpressureCount <= `BSV_ASSIGNMENT_DELAY
	      rqBackpressureCount_D_IN;
	if (rqBackpressureCountSum_EN)
	  rqBackpressureCountSum <= `BSV_ASSIGNMENT_DELAY
	      rqBackpressureCountSum_D_IN;
	if (rqBackpressureCycles_EN)
	  rqBackpressureCycles <= `BSV_ASSIGNMENT_DELAY
	      rqBackpressureCycles_D_IN;
	if (rqBackpressureEvents_EN)
	  rqBackpressureEvents <= `BSV_ASSIGNMENT_DELAY
	      rqBackpressureEvents_D_IN;
	if (rq_dwcount_EN)
	  rq_dwcount <= `BSV_ASSIGNMENT_DELAY rq_dwcount_D_IN;
	if (rq_first_be_EN)
	  rq_first_be <= `BSV_ASSIGNMENT_DELAY rq_first_be_D_IN;
	if (rq_last_be_EN)
	  rq_last_be <= `BSV_ASSIGNMENT_DELAY rq_last_be_D_IN;
      end
    if (rc_dwcount_EN) rc_dwcount <= `BSV_ASSIGNMENT_DELAY rc_dwcount_D_IN;
    if (rq_even_EN) rq_even <= `BSV_ASSIGNMENT_DELAY rq_even_D_IN;
    if (rq_rq_EN) rq_rq <= `BSV_ASSIGNMENT_DELAY rq_rq_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cc_dwcount = 11'h2AA;
    cs_snapshot = 24'hAAAAAA;
    cyclesReg = 32'hAAAAAAAA;
    fAxiRc_da_dummy2_0 = 1'h0;
    fAxiRc_da_dummy2_1 = 1'h0;
    fAxiRc_da_dummy2_2 = 1'h0;
    fAxiRc_da_rl =
	274'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fAxiRc_db_dummy2_0 = 1'h0;
    fAxiRc_db_dummy2_1 = 1'h0;
    fAxiRc_db_dummy2_2 = 1'h0;
    fAxiRc_db_rl =
	274'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fAxiRc_va_dummy2_0 = 1'h0;
    fAxiRc_va_dummy2_1 = 1'h0;
    fAxiRc_va_dummy2_2 = 1'h0;
    fAxiRc_va_rl = 1'h0;
    fAxiRc_vb_dummy2_0 = 1'h0;
    fAxiRc_vb_dummy2_1 = 1'h0;
    fAxiRc_vb_dummy2_2 = 1'h0;
    fAxiRc_vb_rl = 1'h0;
    fAxiRq_da_dummy2_0 = 1'h0;
    fAxiRq_da_dummy2_1 = 1'h0;
    fAxiRq_da_dummy2_2 = 1'h0;
    fAxiRq_da_rl =
	273'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fAxiRq_db_dummy2_0 = 1'h0;
    fAxiRq_db_dummy2_1 = 1'h0;
    fAxiRq_db_dummy2_2 = 1'h0;
    fAxiRq_db_rl =
	273'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fAxiRq_va_dummy2_0 = 1'h0;
    fAxiRq_va_dummy2_1 = 1'h0;
    fAxiRq_va_dummy2_2 = 1'h0;
    fAxiRq_va_rl = 1'h0;
    fAxiRq_vb_dummy2_0 = 1'h0;
    fAxiRq_vb_dummy2_1 = 1'h0;
    fAxiRq_vb_dummy2_2 = 1'h0;
    fAxiRq_vb_rl = 1'h0;
    rc_dwcount = 11'h2AA;
    rc_even = 1'h0;
    rqBackpressure = 1'h0;
    rqBackpressureCount = 16'hAAAA;
    rqBackpressureCountSum = 32'hAAAAAAAA;
    rqBackpressureCycles = 16'hAAAA;
    rqBackpressureEvents = 32'hAAAAAAAA;
    rq_dwcount = 11'h2AA;
    rq_even = 1'h0;
    rq_first_be = 4'hA;
    rq_last_be = 4'hA;
    rq_rq =
	273'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pcie_ep_user_clk)
  begin
    #0;
    if (pcie_ep_user_reset != `BSV_RESET_VALUE)
      if (user_reset_n_RESET_OUT != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_drive_axi_cc)
	  $display("drive axi_cc, data: %h, keep: %h, last: %h",
		   fAxiCc_D_OUT[264:9],
		   fAxiCc_D_OUT[8:1],
		   fAxiCc_D_OUT[0]);
    if (user_reset_n_RESET_OUT != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cq_wr_header)
	$display("cq_desc.reqtype=%h", fAxiCq_D_OUT[96:93]);
    if (user_reset_n_RESET_OUT != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cq_rd_header)
	$display("rl_cq_rd_header: cq_desc = %16x",
		 { 1'd0,
		   fAxiCq_D_OUT[144:139],
		   CASE_fAxiCqD_OUT_BITS_138_TO_133_7_fAxiCqD_O_ETC__q3,
		   fAxiCq_D_OUT[132:130],
		   CASE_fAxiCqD_OUT_BITS_129_TO_122_0_fAxiCqD_O_ETC__q4,
		   fAxiCq_D_OUT[121:98],
		   1'd0,
		   fAxiCq_D_OUT[96:18] });
  end
  // synopsys translate_on
endmodule  // mkPcieEndpointX7

