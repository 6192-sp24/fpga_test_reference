//
// Generated by Bluespec Compiler (build 7d25cde)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule methods_say_enq  CF ( methods_say2_enq,
// 			       methods_say2_notFull,
// 			       methods_setLeds_enq,
// 			       methods_setLeds_notFull,
// 			       portalIfc_messageSize_size,
// 			       portalIfc_indications_0_first,
// 			       portalIfc_indications_0_deq,
// 			       portalIfc_indications_1_first,
// 			       portalIfc_indications_1_deq,
// 			       portalIfc_indications_1_notEmpty,
// 			       portalIfc_indications_2_first,
// 			       portalIfc_indications_2_deq,
// 			       portalIfc_indications_2_notEmpty );
// schedule methods_say_enq  C ( methods_say_enq );
//
// schedule methods_say_notFull  CF ( methods_say_notFull,
// 				   methods_say2_enq,
// 				   methods_say2_notFull,
// 				   methods_setLeds_enq,
// 				   methods_setLeds_notFull,
// 				   portalIfc_messageSize_size,
// 				   portalIfc_indications_0_first,
// 				   portalIfc_indications_0_notEmpty,
// 				   portalIfc_indications_1_first,
// 				   portalIfc_indications_1_deq,
// 				   portalIfc_indications_1_notEmpty,
// 				   portalIfc_indications_2_first,
// 				   portalIfc_indications_2_deq,
// 				   portalIfc_indications_2_notEmpty,
// 				   portalIfc_intr_status,
// 				   portalIfc_intr_channel );
// schedule methods_say_notFull  SB ( methods_say_enq,
// 				   portalIfc_indications_0_deq );
//
// schedule methods_say2_enq  CF ( methods_say_enq,
// 				methods_say_notFull,
// 				methods_setLeds_enq,
// 				methods_setLeds_notFull,
// 				portalIfc_messageSize_size,
// 				portalIfc_indications_0_first,
// 				portalIfc_indications_0_deq,
// 				portalIfc_indications_0_notEmpty,
// 				portalIfc_indications_1_first,
// 				portalIfc_indications_1_deq,
// 				portalIfc_indications_2_first,
// 				portalIfc_indications_2_deq,
// 				portalIfc_indications_2_notEmpty );
// schedule methods_say2_enq  C ( methods_say2_enq );
//
// schedule methods_say2_notFull  CF ( methods_say_enq,
// 				    methods_say_notFull,
// 				    methods_say2_notFull,
// 				    methods_setLeds_enq,
// 				    methods_setLeds_notFull,
// 				    portalIfc_messageSize_size,
// 				    portalIfc_indications_0_first,
// 				    portalIfc_indications_0_deq,
// 				    portalIfc_indications_0_notEmpty,
// 				    portalIfc_indications_1_first,
// 				    portalIfc_indications_1_notEmpty,
// 				    portalIfc_indications_2_first,
// 				    portalIfc_indications_2_deq,
// 				    portalIfc_indications_2_notEmpty,
// 				    portalIfc_intr_status,
// 				    portalIfc_intr_channel );
// schedule methods_say2_notFull  SB ( methods_say2_enq,
// 				    portalIfc_indications_1_deq );
//
// schedule methods_setLeds_enq  CF ( methods_say_enq,
// 				   methods_say_notFull,
// 				   methods_say2_enq,
// 				   methods_say2_notFull,
// 				   portalIfc_messageSize_size,
// 				   portalIfc_indications_0_first,
// 				   portalIfc_indications_0_deq,
// 				   portalIfc_indications_0_notEmpty,
// 				   portalIfc_indications_1_first,
// 				   portalIfc_indications_1_deq,
// 				   portalIfc_indications_1_notEmpty,
// 				   portalIfc_indications_2_first,
// 				   portalIfc_indications_2_deq );
// schedule methods_setLeds_enq  C ( methods_setLeds_enq );
//
// schedule methods_setLeds_notFull  CF ( methods_say_enq,
// 				       methods_say_notFull,
// 				       methods_say2_enq,
// 				       methods_say2_notFull,
// 				       methods_setLeds_notFull,
// 				       portalIfc_messageSize_size,
// 				       portalIfc_indications_0_first,
// 				       portalIfc_indications_0_deq,
// 				       portalIfc_indications_0_notEmpty,
// 				       portalIfc_indications_1_first,
// 				       portalIfc_indications_1_deq,
// 				       portalIfc_indications_1_notEmpty,
// 				       portalIfc_indications_2_first,
// 				       portalIfc_indications_2_notEmpty,
// 				       portalIfc_intr_status,
// 				       portalIfc_intr_channel );
// schedule methods_setLeds_notFull  SB ( methods_setLeds_enq,
// 				       portalIfc_indications_2_deq );
//
// schedule portalIfc_messageSize_size  CF ( methods_say_enq,
// 					  methods_say_notFull,
// 					  methods_say2_enq,
// 					  methods_say2_notFull,
// 					  methods_setLeds_enq,
// 					  methods_setLeds_notFull,
// 					  portalIfc_messageSize_size,
// 					  portalIfc_indications_0_first,
// 					  portalIfc_indications_0_deq,
// 					  portalIfc_indications_0_notEmpty,
// 					  portalIfc_indications_1_first,
// 					  portalIfc_indications_1_deq,
// 					  portalIfc_indications_1_notEmpty,
// 					  portalIfc_indications_2_first,
// 					  portalIfc_indications_2_deq,
// 					  portalIfc_indications_2_notEmpty,
// 					  portalIfc_intr_status,
// 					  portalIfc_intr_channel );
//
// schedule portalIfc_indications_0_first  CF ( methods_say_enq,
// 					     methods_say_notFull,
// 					     methods_say2_enq,
// 					     methods_say2_notFull,
// 					     methods_setLeds_enq,
// 					     methods_setLeds_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_0_first  SB ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_deq  CF ( methods_say_enq,
// 					   methods_say2_enq,
// 					   methods_say2_notFull,
// 					   methods_setLeds_enq,
// 					   methods_setLeds_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty );
// schedule portalIfc_indications_0_deq  C ( portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_0_notEmpty  CF ( methods_say_notFull,
// 						methods_say2_enq,
// 						methods_say2_notFull,
// 						methods_setLeds_enq,
// 						methods_setLeds_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_0_notEmpty  SB ( methods_say_enq,
// 						portalIfc_indications_0_deq );
//
// schedule portalIfc_indications_1_first  CF ( methods_say_enq,
// 					     methods_say_notFull,
// 					     methods_say2_enq,
// 					     methods_say2_notFull,
// 					     methods_setLeds_enq,
// 					     methods_setLeds_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_deq,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_1_first  SB ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_deq  CF ( methods_say_enq,
// 					   methods_say_notFull,
// 					   methods_say2_enq,
// 					   methods_setLeds_enq,
// 					   methods_setLeds_notFull,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_2_first,
// 					   portalIfc_indications_2_deq,
// 					   portalIfc_indications_2_notEmpty );
// schedule portalIfc_indications_1_deq  C ( portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_1_notEmpty  CF ( methods_say_enq,
// 						methods_say_notFull,
// 						methods_say2_notFull,
// 						methods_setLeds_enq,
// 						methods_setLeds_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_deq,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_1_notEmpty  SB ( methods_say2_enq,
// 						portalIfc_indications_1_deq );
//
// schedule portalIfc_indications_2_first  CF ( methods_say_enq,
// 					     methods_say_notFull,
// 					     methods_say2_enq,
// 					     methods_say2_notFull,
// 					     methods_setLeds_enq,
// 					     methods_setLeds_notFull,
// 					     portalIfc_messageSize_size,
// 					     portalIfc_indications_0_first,
// 					     portalIfc_indications_0_deq,
// 					     portalIfc_indications_0_notEmpty,
// 					     portalIfc_indications_1_first,
// 					     portalIfc_indications_1_deq,
// 					     portalIfc_indications_1_notEmpty,
// 					     portalIfc_indications_2_first,
// 					     portalIfc_indications_2_notEmpty,
// 					     portalIfc_intr_status,
// 					     portalIfc_intr_channel );
// schedule portalIfc_indications_2_first  SB ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_deq  CF ( methods_say_enq,
// 					   methods_say_notFull,
// 					   methods_say2_enq,
// 					   methods_say2_notFull,
// 					   methods_setLeds_enq,
// 					   portalIfc_messageSize_size,
// 					   portalIfc_indications_0_first,
// 					   portalIfc_indications_0_deq,
// 					   portalIfc_indications_0_notEmpty,
// 					   portalIfc_indications_1_first,
// 					   portalIfc_indications_1_deq,
// 					   portalIfc_indications_1_notEmpty );
// schedule portalIfc_indications_2_deq  C ( portalIfc_indications_2_deq );
//
// schedule portalIfc_indications_2_notEmpty  CF ( methods_say_enq,
// 						methods_say_notFull,
// 						methods_say2_enq,
// 						methods_say2_notFull,
// 						methods_setLeds_notFull,
// 						portalIfc_messageSize_size,
// 						portalIfc_indications_0_first,
// 						portalIfc_indications_0_deq,
// 						portalIfc_indications_0_notEmpty,
// 						portalIfc_indications_1_first,
// 						portalIfc_indications_1_deq,
// 						portalIfc_indications_1_notEmpty,
// 						portalIfc_indications_2_first,
// 						portalIfc_indications_2_notEmpty,
// 						portalIfc_intr_status,
// 						portalIfc_intr_channel );
// schedule portalIfc_indications_2_notEmpty  SB ( methods_setLeds_enq,
// 						portalIfc_indications_2_deq );
//
// schedule portalIfc_intr_status  CF ( methods_say_notFull,
// 				     methods_say2_notFull,
// 				     methods_setLeds_notFull,
// 				     portalIfc_messageSize_size,
// 				     portalIfc_indications_0_first,
// 				     portalIfc_indications_0_notEmpty,
// 				     portalIfc_indications_1_first,
// 				     portalIfc_indications_1_notEmpty,
// 				     portalIfc_indications_2_first,
// 				     portalIfc_indications_2_notEmpty,
// 				     portalIfc_intr_status,
// 				     portalIfc_intr_channel );
// schedule portalIfc_intr_status  SB ( methods_say_enq,
// 				     methods_say2_enq,
// 				     methods_setLeds_enq,
// 				     portalIfc_indications_0_deq,
// 				     portalIfc_indications_1_deq,
// 				     portalIfc_indications_2_deq );
//
// schedule portalIfc_intr_channel  CF ( methods_say_notFull,
// 				      methods_say2_notFull,
// 				      methods_setLeds_notFull,
// 				      portalIfc_messageSize_size,
// 				      portalIfc_indications_0_first,
// 				      portalIfc_indications_0_notEmpty,
// 				      portalIfc_indications_1_first,
// 				      portalIfc_indications_1_notEmpty,
// 				      portalIfc_indications_2_first,
// 				      portalIfc_indications_2_notEmpty,
// 				      portalIfc_intr_status,
// 				      portalIfc_intr_channel );
// schedule portalIfc_intr_channel  SB ( methods_say_enq,
// 				      methods_say2_enq,
// 				      methods_setLeds_enq,
// 				      portalIfc_indications_0_deq,
// 				      portalIfc_indications_1_deq,
// 				      portalIfc_indications_2_deq );
//
//
// Ports:
// Name                         I/O  size props
// RDY_methods_say_enq            O     1
// methods_say_notFull            O     1
// RDY_methods_say_notFull        O     1 const
// RDY_methods_say2_enq           O     1
// methods_say2_notFull           O     1
// RDY_methods_say2_notFull       O     1 const
// RDY_methods_setLeds_enq        O     1
// methods_setLeds_notFull        O     1
// RDY_methods_setLeds_notFull    O     1 const
// portalIfc_messageSize_size     O    16
// RDY_portalIfc_messageSize_size  O     1 const
// portalIfc_indications_0_first  O    32 reg
// RDY_portalIfc_indications_0_first  O     1 reg
// RDY_portalIfc_indications_0_deq  O     1 reg
// portalIfc_indications_0_notEmpty  O     1 reg
// RDY_portalIfc_indications_0_notEmpty  O     1 const
// portalIfc_indications_1_first  O    32 reg
// RDY_portalIfc_indications_1_first  O     1 reg
// RDY_portalIfc_indications_1_deq  O     1 reg
// portalIfc_indications_1_notEmpty  O     1 reg
// RDY_portalIfc_indications_1_notEmpty  O     1 const
// portalIfc_indications_2_first  O    32 reg
// RDY_portalIfc_indications_2_first  O     1 reg
// RDY_portalIfc_indications_2_deq  O     1 reg
// portalIfc_indications_2_notEmpty  O     1 reg
// RDY_portalIfc_indications_2_notEmpty  O     1 const
// portalIfc_intr_status          O     1
// RDY_portalIfc_intr_status      O     1 const
// portalIfc_intr_channel         O    32
// RDY_portalIfc_intr_channel     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// methods_say_enq_v              I    32 reg
// methods_say2_enq_v             I    32 reg
// methods_setLeds_enq_v          I     8 reg
// portalIfc_messageSize_size_methodNumber  I    16
// EN_methods_say_enq             I     1
// EN_methods_say2_enq            I     1
// EN_methods_setLeds_enq         I     1
// EN_portalIfc_indications_0_deq  I     1
// EN_portalIfc_indications_1_deq  I     1
// EN_portalIfc_indications_2_deq  I     1
//
// Combinational paths from inputs to outputs:
//   portalIfc_messageSize_size_methodNumber -> portalIfc_messageSize_size
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEchoRequestOutputPipes(CLK,
				RST_N,

				methods_say_enq_v,
				EN_methods_say_enq,
				RDY_methods_say_enq,

				methods_say_notFull,
				RDY_methods_say_notFull,

				methods_say2_enq_v,
				EN_methods_say2_enq,
				RDY_methods_say2_enq,

				methods_say2_notFull,
				RDY_methods_say2_notFull,

				methods_setLeds_enq_v,
				EN_methods_setLeds_enq,
				RDY_methods_setLeds_enq,

				methods_setLeds_notFull,
				RDY_methods_setLeds_notFull,

				portalIfc_messageSize_size_methodNumber,
				portalIfc_messageSize_size,
				RDY_portalIfc_messageSize_size,

				portalIfc_indications_0_first,
				RDY_portalIfc_indications_0_first,

				EN_portalIfc_indications_0_deq,
				RDY_portalIfc_indications_0_deq,

				portalIfc_indications_0_notEmpty,
				RDY_portalIfc_indications_0_notEmpty,

				portalIfc_indications_1_first,
				RDY_portalIfc_indications_1_first,

				EN_portalIfc_indications_1_deq,
				RDY_portalIfc_indications_1_deq,

				portalIfc_indications_1_notEmpty,
				RDY_portalIfc_indications_1_notEmpty,

				portalIfc_indications_2_first,
				RDY_portalIfc_indications_2_first,

				EN_portalIfc_indications_2_deq,
				RDY_portalIfc_indications_2_deq,

				portalIfc_indications_2_notEmpty,
				RDY_portalIfc_indications_2_notEmpty,

				portalIfc_intr_status,
				RDY_portalIfc_intr_status,

				portalIfc_intr_channel,
				RDY_portalIfc_intr_channel);
  input  CLK;
  input  RST_N;

  // action method methods_say_enq
  input  [31 : 0] methods_say_enq_v;
  input  EN_methods_say_enq;
  output RDY_methods_say_enq;

  // value method methods_say_notFull
  output methods_say_notFull;
  output RDY_methods_say_notFull;

  // action method methods_say2_enq
  input  [31 : 0] methods_say2_enq_v;
  input  EN_methods_say2_enq;
  output RDY_methods_say2_enq;

  // value method methods_say2_notFull
  output methods_say2_notFull;
  output RDY_methods_say2_notFull;

  // action method methods_setLeds_enq
  input  [7 : 0] methods_setLeds_enq_v;
  input  EN_methods_setLeds_enq;
  output RDY_methods_setLeds_enq;

  // value method methods_setLeds_notFull
  output methods_setLeds_notFull;
  output RDY_methods_setLeds_notFull;

  // value method portalIfc_messageSize_size
  input  [15 : 0] portalIfc_messageSize_size_methodNumber;
  output [15 : 0] portalIfc_messageSize_size;
  output RDY_portalIfc_messageSize_size;

  // value method portalIfc_indications_0_first
  output [31 : 0] portalIfc_indications_0_first;
  output RDY_portalIfc_indications_0_first;

  // action method portalIfc_indications_0_deq
  input  EN_portalIfc_indications_0_deq;
  output RDY_portalIfc_indications_0_deq;

  // value method portalIfc_indications_0_notEmpty
  output portalIfc_indications_0_notEmpty;
  output RDY_portalIfc_indications_0_notEmpty;

  // value method portalIfc_indications_1_first
  output [31 : 0] portalIfc_indications_1_first;
  output RDY_portalIfc_indications_1_first;

  // action method portalIfc_indications_1_deq
  input  EN_portalIfc_indications_1_deq;
  output RDY_portalIfc_indications_1_deq;

  // value method portalIfc_indications_1_notEmpty
  output portalIfc_indications_1_notEmpty;
  output RDY_portalIfc_indications_1_notEmpty;

  // value method portalIfc_indications_2_first
  output [31 : 0] portalIfc_indications_2_first;
  output RDY_portalIfc_indications_2_first;

  // action method portalIfc_indications_2_deq
  input  EN_portalIfc_indications_2_deq;
  output RDY_portalIfc_indications_2_deq;

  // value method portalIfc_indications_2_notEmpty
  output portalIfc_indications_2_notEmpty;
  output RDY_portalIfc_indications_2_notEmpty;

  // value method portalIfc_intr_status
  output portalIfc_intr_status;
  output RDY_portalIfc_intr_status;

  // value method portalIfc_intr_channel
  output [31 : 0] portalIfc_intr_channel;
  output RDY_portalIfc_intr_channel;

  // signals for module outputs
  reg [15 : 0] portalIfc_messageSize_size;
  wire [31 : 0] portalIfc_indications_0_first,
		portalIfc_indications_1_first,
		portalIfc_indications_2_first,
		portalIfc_intr_channel;
  wire RDY_methods_say2_enq,
       RDY_methods_say2_notFull,
       RDY_methods_say_enq,
       RDY_methods_say_notFull,
       RDY_methods_setLeds_enq,
       RDY_methods_setLeds_notFull,
       RDY_portalIfc_indications_0_deq,
       RDY_portalIfc_indications_0_first,
       RDY_portalIfc_indications_0_notEmpty,
       RDY_portalIfc_indications_1_deq,
       RDY_portalIfc_indications_1_first,
       RDY_portalIfc_indications_1_notEmpty,
       RDY_portalIfc_indications_2_deq,
       RDY_portalIfc_indications_2_first,
       RDY_portalIfc_indications_2_notEmpty,
       RDY_portalIfc_intr_channel,
       RDY_portalIfc_intr_status,
       RDY_portalIfc_messageSize_size,
       methods_say2_notFull,
       methods_say_notFull,
       methods_setLeds_notFull,
       portalIfc_indications_0_notEmpty,
       portalIfc_indications_1_notEmpty,
       portalIfc_indications_2_notEmpty,
       portalIfc_intr_status;

  // register say2_responseAdapter_bits
  reg [31 : 0] say2_responseAdapter_bits;
  wire [31 : 0] say2_responseAdapter_bits_D_IN;
  wire say2_responseAdapter_bits_EN;

  // register say2_responseAdapter_notEmptyReg
  reg say2_responseAdapter_notEmptyReg;
  wire say2_responseAdapter_notEmptyReg_D_IN,
       say2_responseAdapter_notEmptyReg_EN;

  // register say2_responseAdapter_shift
  reg [5 : 0] say2_responseAdapter_shift;
  wire [5 : 0] say2_responseAdapter_shift_D_IN;
  wire say2_responseAdapter_shift_EN;

  // register say_responseAdapter_bits
  reg [31 : 0] say_responseAdapter_bits;
  wire [31 : 0] say_responseAdapter_bits_D_IN;
  wire say_responseAdapter_bits_EN;

  // register say_responseAdapter_notEmptyReg
  reg say_responseAdapter_notEmptyReg;
  wire say_responseAdapter_notEmptyReg_D_IN,
       say_responseAdapter_notEmptyReg_EN;

  // register say_responseAdapter_shift
  reg [5 : 0] say_responseAdapter_shift;
  wire [5 : 0] say_responseAdapter_shift_D_IN;
  wire say_responseAdapter_shift_EN;

  // register setLeds_responseAdapter_bits
  reg [31 : 0] setLeds_responseAdapter_bits;
  wire [31 : 0] setLeds_responseAdapter_bits_D_IN;
  wire setLeds_responseAdapter_bits_EN;

  // register setLeds_responseAdapter_notEmptyReg
  reg setLeds_responseAdapter_notEmptyReg;
  wire setLeds_responseAdapter_notEmptyReg_D_IN,
       setLeds_responseAdapter_notEmptyReg_EN;

  // register setLeds_responseAdapter_shift
  reg [3 : 0] setLeds_responseAdapter_shift;
  wire [3 : 0] setLeds_responseAdapter_shift_D_IN;
  wire setLeds_responseAdapter_shift_EN;

  // action method methods_say_enq
  assign RDY_methods_say_enq = !say_responseAdapter_notEmptyReg ;

  // value method methods_say_notFull
  assign methods_say_notFull = !say_responseAdapter_notEmptyReg ;
  assign RDY_methods_say_notFull = 1'd1 ;

  // action method methods_say2_enq
  assign RDY_methods_say2_enq = !say2_responseAdapter_notEmptyReg ;

  // value method methods_say2_notFull
  assign methods_say2_notFull = !say2_responseAdapter_notEmptyReg ;
  assign RDY_methods_say2_notFull = 1'd1 ;

  // action method methods_setLeds_enq
  assign RDY_methods_setLeds_enq = !setLeds_responseAdapter_notEmptyReg ;

  // value method methods_setLeds_notFull
  assign methods_setLeds_notFull = !setLeds_responseAdapter_notEmptyReg ;
  assign RDY_methods_setLeds_notFull = 1'd1 ;

  // value method portalIfc_messageSize_size
  always@(portalIfc_messageSize_size_methodNumber)
  begin
    case (portalIfc_messageSize_size_methodNumber)
      16'd0, 16'd1: portalIfc_messageSize_size = 16'd32;
      default: portalIfc_messageSize_size = 16'd8;
    endcase
  end
  assign RDY_portalIfc_messageSize_size = 1'd1 ;

  // value method portalIfc_indications_0_first
  assign portalIfc_indications_0_first = say_responseAdapter_bits ;
  assign RDY_portalIfc_indications_0_first = say_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_0_deq
  assign RDY_portalIfc_indications_0_deq = say_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_0_notEmpty
  assign portalIfc_indications_0_notEmpty = say_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_0_notEmpty = 1'd1 ;

  // value method portalIfc_indications_1_first
  assign portalIfc_indications_1_first = say2_responseAdapter_bits ;
  assign RDY_portalIfc_indications_1_first =
	     say2_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_1_deq
  assign RDY_portalIfc_indications_1_deq = say2_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_1_notEmpty
  assign portalIfc_indications_1_notEmpty = say2_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_1_notEmpty = 1'd1 ;

  // value method portalIfc_indications_2_first
  assign portalIfc_indications_2_first = setLeds_responseAdapter_bits ;
  assign RDY_portalIfc_indications_2_first =
	     setLeds_responseAdapter_notEmptyReg ;

  // action method portalIfc_indications_2_deq
  assign RDY_portalIfc_indications_2_deq =
	     setLeds_responseAdapter_notEmptyReg ;

  // value method portalIfc_indications_2_notEmpty
  assign portalIfc_indications_2_notEmpty =
	     setLeds_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_indications_2_notEmpty = 1'd1 ;

  // value method portalIfc_intr_status
  assign portalIfc_intr_status =
	     say_responseAdapter_notEmptyReg ||
	     say2_responseAdapter_notEmptyReg ||
	     setLeds_responseAdapter_notEmptyReg ;
  assign RDY_portalIfc_intr_status = 1'd1 ;

  // value method portalIfc_intr_channel
  assign portalIfc_intr_channel =
	     say_responseAdapter_notEmptyReg ?
	       32'd0 :
	       (say2_responseAdapter_notEmptyReg ?
		  32'd1 :
		  (setLeds_responseAdapter_notEmptyReg ?
		     32'd2 :
		     32'hFFFFFFFF)) ;
  assign RDY_portalIfc_intr_channel = 1'd1 ;

  // register say2_responseAdapter_bits
  assign say2_responseAdapter_bits_D_IN = methods_say2_enq_v ;
  assign say2_responseAdapter_bits_EN = EN_methods_say2_enq ;

  // register say2_responseAdapter_notEmptyReg
  assign say2_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_1_deq ;
  assign say2_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_1_deq || EN_methods_say2_enq ;

  // register say2_responseAdapter_shift
  assign say2_responseAdapter_shift_D_IN = 6'h0 ;
  assign say2_responseAdapter_shift_EN = 1'b0 ;

  // register say_responseAdapter_bits
  assign say_responseAdapter_bits_D_IN = methods_say_enq_v ;
  assign say_responseAdapter_bits_EN = EN_methods_say_enq ;

  // register say_responseAdapter_notEmptyReg
  assign say_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_0_deq ;
  assign say_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_0_deq || EN_methods_say_enq ;

  // register say_responseAdapter_shift
  assign say_responseAdapter_shift_D_IN = 6'h0 ;
  assign say_responseAdapter_shift_EN = 1'b0 ;

  // register setLeds_responseAdapter_bits
  assign setLeds_responseAdapter_bits_D_IN =
	     { 24'd0, methods_setLeds_enq_v } ;
  assign setLeds_responseAdapter_bits_EN = EN_methods_setLeds_enq ;

  // register setLeds_responseAdapter_notEmptyReg
  assign setLeds_responseAdapter_notEmptyReg_D_IN =
	     !EN_portalIfc_indications_2_deq ;
  assign setLeds_responseAdapter_notEmptyReg_EN =
	     EN_portalIfc_indications_2_deq || EN_methods_setLeds_enq ;

  // register setLeds_responseAdapter_shift
  assign setLeds_responseAdapter_shift_D_IN = 4'h0 ;
  assign setLeds_responseAdapter_shift_EN = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        say2_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	say2_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	say2_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 6'd0;
	say_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	say_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	say_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 6'd0;
	setLeds_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY 32'd0;
	setLeds_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	setLeds_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (say2_responseAdapter_bits_EN)
	  say2_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      say2_responseAdapter_bits_D_IN;
	if (say2_responseAdapter_notEmptyReg_EN)
	  say2_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      say2_responseAdapter_notEmptyReg_D_IN;
	if (say2_responseAdapter_shift_EN)
	  say2_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      say2_responseAdapter_shift_D_IN;
	if (say_responseAdapter_bits_EN)
	  say_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      say_responseAdapter_bits_D_IN;
	if (say_responseAdapter_notEmptyReg_EN)
	  say_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      say_responseAdapter_notEmptyReg_D_IN;
	if (say_responseAdapter_shift_EN)
	  say_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      say_responseAdapter_shift_D_IN;
	if (setLeds_responseAdapter_bits_EN)
	  setLeds_responseAdapter_bits <= `BSV_ASSIGNMENT_DELAY
	      setLeds_responseAdapter_bits_D_IN;
	if (setLeds_responseAdapter_notEmptyReg_EN)
	  setLeds_responseAdapter_notEmptyReg <= `BSV_ASSIGNMENT_DELAY
	      setLeds_responseAdapter_notEmptyReg_D_IN;
	if (setLeds_responseAdapter_shift_EN)
	  setLeds_responseAdapter_shift <= `BSV_ASSIGNMENT_DELAY
	      setLeds_responseAdapter_shift_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    say2_responseAdapter_bits = 32'hAAAAAAAA;
    say2_responseAdapter_notEmptyReg = 1'h0;
    say2_responseAdapter_shift = 6'h2A;
    say_responseAdapter_bits = 32'hAAAAAAAA;
    say_responseAdapter_notEmptyReg = 1'h0;
    say_responseAdapter_shift = 6'h2A;
    setLeds_responseAdapter_bits = 32'hAAAAAAAA;
    setLeds_responseAdapter_notEmptyReg = 1'h0;
    setLeds_responseAdapter_shift = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkEchoRequestOutputPipes

