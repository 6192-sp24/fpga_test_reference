//
// Generated by Bluespec Compiler (build 7d25cde)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_heard  CF ( ifc_heard2, inverseIfc_heard, inverseIfc_heard2 );
// schedule ifc_heard  C ( ifc_heard );
//
// schedule ifc_heard2  CF ( ifc_heard, inverseIfc_heard, inverseIfc_heard2 );
// schedule ifc_heard2  C ( ifc_heard2 );
//
// schedule inverseIfc_heard  CF ( ifc_heard, ifc_heard2, inverseIfc_heard2 );
// schedule inverseIfc_heard  C ( inverseIfc_heard );
//
// schedule inverseIfc_heard2  CF ( ifc_heard, ifc_heard2, inverseIfc_heard );
// schedule inverseIfc_heard2  C ( inverseIfc_heard2 );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_heard                  O     1 reg
// RDY_ifc_heard2                 O     1 reg
// inverseIfc_heard               O    32 reg
// RDY_inverseIfc_heard           O     1 reg
// inverseIfc_heard2              O    32 reg
// RDY_inverseIfc_heard2          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_heard_v                    I    32 reg
// ifc_heard2_a                   I    16 reg
// ifc_heard2_b                   I    16 reg
// EN_ifc_heard                   I     1
// EN_ifc_heard2                  I     1
// EN_inverseIfc_heard            I     1
// EN_inverseIfc_heard2           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEchoIndicationInverter(CLK,
				RST_N,

				ifc_heard_v,
				EN_ifc_heard,
				RDY_ifc_heard,

				ifc_heard2_a,
				ifc_heard2_b,
				EN_ifc_heard2,
				RDY_ifc_heard2,

				EN_inverseIfc_heard,
				inverseIfc_heard,
				RDY_inverseIfc_heard,

				EN_inverseIfc_heard2,
				inverseIfc_heard2,
				RDY_inverseIfc_heard2);
  input  CLK;
  input  RST_N;

  // action method ifc_heard
  input  [31 : 0] ifc_heard_v;
  input  EN_ifc_heard;
  output RDY_ifc_heard;

  // action method ifc_heard2
  input  [15 : 0] ifc_heard2_a;
  input  [15 : 0] ifc_heard2_b;
  input  EN_ifc_heard2;
  output RDY_ifc_heard2;

  // actionvalue method inverseIfc_heard
  input  EN_inverseIfc_heard;
  output [31 : 0] inverseIfc_heard;
  output RDY_inverseIfc_heard;

  // actionvalue method inverseIfc_heard2
  input  EN_inverseIfc_heard2;
  output [31 : 0] inverseIfc_heard2;
  output RDY_inverseIfc_heard2;

  // signals for module outputs
  wire [31 : 0] inverseIfc_heard, inverseIfc_heard2;
  wire RDY_ifc_heard,
       RDY_ifc_heard2,
       RDY_inverseIfc_heard,
       RDY_inverseIfc_heard2;

  // ports of submodule fifo_heard
  wire [31 : 0] fifo_heard_D_IN, fifo_heard_D_OUT;
  wire fifo_heard_CLR,
       fifo_heard_DEQ,
       fifo_heard_EMPTY_N,
       fifo_heard_ENQ,
       fifo_heard_FULL_N;

  // ports of submodule fifo_heard2
  wire [31 : 0] fifo_heard2_D_IN, fifo_heard2_D_OUT;
  wire fifo_heard2_CLR,
       fifo_heard2_DEQ,
       fifo_heard2_EMPTY_N,
       fifo_heard2_ENQ,
       fifo_heard2_FULL_N;

  // action method ifc_heard
  assign RDY_ifc_heard = fifo_heard_FULL_N ;

  // action method ifc_heard2
  assign RDY_ifc_heard2 = fifo_heard2_FULL_N ;

  // actionvalue method inverseIfc_heard
  assign inverseIfc_heard = fifo_heard_D_OUT ;
  assign RDY_inverseIfc_heard = fifo_heard_EMPTY_N ;

  // actionvalue method inverseIfc_heard2
  assign inverseIfc_heard2 = fifo_heard2_D_OUT ;
  assign RDY_inverseIfc_heard2 = fifo_heard2_EMPTY_N ;

  // submodule fifo_heard
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_heard(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fifo_heard_D_IN),
						     .ENQ(fifo_heard_ENQ),
						     .DEQ(fifo_heard_DEQ),
						     .CLR(fifo_heard_CLR),
						     .D_OUT(fifo_heard_D_OUT),
						     .FULL_N(fifo_heard_FULL_N),
						     .EMPTY_N(fifo_heard_EMPTY_N));

  // submodule fifo_heard2
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_heard2(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(fifo_heard2_D_IN),
						      .ENQ(fifo_heard2_ENQ),
						      .DEQ(fifo_heard2_DEQ),
						      .CLR(fifo_heard2_CLR),
						      .D_OUT(fifo_heard2_D_OUT),
						      .FULL_N(fifo_heard2_FULL_N),
						      .EMPTY_N(fifo_heard2_EMPTY_N));

  // submodule fifo_heard
  assign fifo_heard_D_IN = ifc_heard_v ;
  assign fifo_heard_ENQ = EN_ifc_heard ;
  assign fifo_heard_DEQ = EN_inverseIfc_heard ;
  assign fifo_heard_CLR = 1'b0 ;

  // submodule fifo_heard2
  assign fifo_heard2_D_IN = { ifc_heard2_a, ifc_heard2_b } ;
  assign fifo_heard2_ENQ = EN_ifc_heard2 ;
  assign fifo_heard2_DEQ = EN_inverseIfc_heard2 ;
  assign fifo_heard2_CLR = 1'b0 ;
endmodule  // mkEchoIndicationInverter

