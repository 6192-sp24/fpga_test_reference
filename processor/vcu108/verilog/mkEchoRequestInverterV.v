//
// Generated by Bluespec Compiler (build 7d25cde)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_say  CF ( ifc_say,
// 		       ifc_say2,
// 		       ifc_setLeds,
// 		       inverseIfc_say,
// 		       inverseIfc_say2,
// 		       inverseIfc_setLeds );
//
// schedule ifc_say2  CF ( ifc_say,
// 			ifc_say2,
// 			ifc_setLeds,
// 			inverseIfc_say,
// 			inverseIfc_say2,
// 			inverseIfc_setLeds );
//
// schedule ifc_setLeds  CF ( ifc_say,
// 			   ifc_say2,
// 			   ifc_setLeds,
// 			   inverseIfc_say,
// 			   inverseIfc_say2,
// 			   inverseIfc_setLeds );
//
// schedule inverseIfc_say  CF ( ifc_say,
// 			      ifc_say2,
// 			      ifc_setLeds,
// 			      inverseIfc_say,
// 			      inverseIfc_say2,
// 			      inverseIfc_setLeds );
//
// schedule inverseIfc_say2  CF ( ifc_say,
// 			       ifc_say2,
// 			       ifc_setLeds,
// 			       inverseIfc_say,
// 			       inverseIfc_say2,
// 			       inverseIfc_setLeds );
//
// schedule inverseIfc_setLeds  CF ( ifc_say,
// 				  ifc_say2,
// 				  ifc_setLeds,
// 				  inverseIfc_say,
// 				  inverseIfc_say2,
// 				  inverseIfc_setLeds );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_say                    O     1
// RDY_ifc_say2                   O     1
// RDY_ifc_setLeds                O     1
// inverseIfc_say                 O    32
// RDY_inverseIfc_say             O     1
// inverseIfc_say2                O    32
// RDY_inverseIfc_say2            O     1
// inverseIfc_setLeds             O     8
// RDY_inverseIfc_setLeds         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_say_v                      I    32
// ifc_say2_a                     I    16
// ifc_say2_b                     I    16
// ifc_setLeds_v                  I     8
// EN_ifc_say                     I     1
// EN_ifc_say2                    I     1
// EN_ifc_setLeds                 I     1
// EN_inverseIfc_say              I     1
// EN_inverseIfc_say2             I     1
// EN_inverseIfc_setLeds          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEchoRequestInverterV(CLK,
			      RST_N,

			      ifc_say_v,
			      EN_ifc_say,
			      RDY_ifc_say,

			      ifc_say2_a,
			      ifc_say2_b,
			      EN_ifc_say2,
			      RDY_ifc_say2,

			      ifc_setLeds_v,
			      EN_ifc_setLeds,
			      RDY_ifc_setLeds,

			      EN_inverseIfc_say,
			      inverseIfc_say,
			      RDY_inverseIfc_say,

			      EN_inverseIfc_say2,
			      inverseIfc_say2,
			      RDY_inverseIfc_say2,

			      EN_inverseIfc_setLeds,
			      inverseIfc_setLeds,
			      RDY_inverseIfc_setLeds);
  input  CLK;
  input  RST_N;

  // action method ifc_say
  input  [31 : 0] ifc_say_v;
  input  EN_ifc_say;
  output RDY_ifc_say;

  // action method ifc_say2
  input  [15 : 0] ifc_say2_a;
  input  [15 : 0] ifc_say2_b;
  input  EN_ifc_say2;
  output RDY_ifc_say2;

  // action method ifc_setLeds
  input  [7 : 0] ifc_setLeds_v;
  input  EN_ifc_setLeds;
  output RDY_ifc_setLeds;

  // actionvalue method inverseIfc_say
  input  EN_inverseIfc_say;
  output [31 : 0] inverseIfc_say;
  output RDY_inverseIfc_say;

  // actionvalue method inverseIfc_say2
  input  EN_inverseIfc_say2;
  output [31 : 0] inverseIfc_say2;
  output RDY_inverseIfc_say2;

  // actionvalue method inverseIfc_setLeds
  input  EN_inverseIfc_setLeds;
  output [7 : 0] inverseIfc_setLeds;
  output RDY_inverseIfc_setLeds;

  // signals for module outputs
  wire [31 : 0] inverseIfc_say, inverseIfc_say2;
  wire [7 : 0] inverseIfc_setLeds;
  wire RDY_ifc_say,
       RDY_ifc_say2,
       RDY_ifc_setLeds,
       RDY_inverseIfc_say,
       RDY_inverseIfc_say2,
       RDY_inverseIfc_setLeds;

  // ports of submodule inv_say2_inverter
  wire [31 : 0] inv_say2_inverter_get, inv_say2_inverter_put;
  wire inv_say2_inverter_EN_get,
       inv_say2_inverter_EN_put,
       inv_say2_inverter_RDY_get,
       inv_say2_inverter_RDY_put;

  // ports of submodule inv_say_inverter
  wire [31 : 0] inv_say_inverter_get, inv_say_inverter_put;
  wire inv_say_inverter_EN_get,
       inv_say_inverter_EN_put,
       inv_say_inverter_RDY_get,
       inv_say_inverter_RDY_put;

  // ports of submodule inv_setLeds_inverter
  wire [7 : 0] inv_setLeds_inverter_get, inv_setLeds_inverter_put;
  wire inv_setLeds_inverter_EN_get,
       inv_setLeds_inverter_EN_put,
       inv_setLeds_inverter_RDY_get,
       inv_setLeds_inverter_RDY_put;

  // action method ifc_say
  assign RDY_ifc_say = inv_say_inverter_RDY_put ;

  // action method ifc_say2
  assign RDY_ifc_say2 = inv_say2_inverter_RDY_put ;

  // action method ifc_setLeds
  assign RDY_ifc_setLeds = inv_setLeds_inverter_RDY_put ;

  // actionvalue method inverseIfc_say
  assign inverseIfc_say = inv_say_inverter_get ;
  assign RDY_inverseIfc_say = inv_say_inverter_RDY_get ;

  // actionvalue method inverseIfc_say2
  assign inverseIfc_say2 = inv_say2_inverter_get ;
  assign RDY_inverseIfc_say2 = inv_say2_inverter_RDY_get ;

  // actionvalue method inverseIfc_setLeds
  assign inverseIfc_setLeds = inv_setLeds_inverter_get ;
  assign RDY_inverseIfc_setLeds = inv_setLeds_inverter_RDY_get ;

  // submodule inv_say2_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_say2_inverter(.CLK(CLK),
						       .RST(RST_N),
						       .put(inv_say2_inverter_put),
						       .EN_put(inv_say2_inverter_EN_put),
						       .EN_get(inv_say2_inverter_EN_get),
						       .RDY_put(inv_say2_inverter_RDY_put),
						       .get(inv_say2_inverter_get),
						       .RDY_get(inv_say2_inverter_RDY_get));

  // submodule inv_say_inverter
  PutInverter #(.DATA_WIDTH(32'd32)) inv_say_inverter(.CLK(CLK),
						      .RST(RST_N),
						      .put(inv_say_inverter_put),
						      .EN_put(inv_say_inverter_EN_put),
						      .EN_get(inv_say_inverter_EN_get),
						      .RDY_put(inv_say_inverter_RDY_put),
						      .get(inv_say_inverter_get),
						      .RDY_get(inv_say_inverter_RDY_get));

  // submodule inv_setLeds_inverter
  PutInverter #(.DATA_WIDTH(32'd8)) inv_setLeds_inverter(.CLK(CLK),
							 .RST(RST_N),
							 .put(inv_setLeds_inverter_put),
							 .EN_put(inv_setLeds_inverter_EN_put),
							 .EN_get(inv_setLeds_inverter_EN_get),
							 .RDY_put(inv_setLeds_inverter_RDY_put),
							 .get(inv_setLeds_inverter_get),
							 .RDY_get(inv_setLeds_inverter_RDY_get));

  // submodule inv_say2_inverter
  assign inv_say2_inverter_put = { ifc_say2_a, ifc_say2_b } ;
  assign inv_say2_inverter_EN_put = EN_ifc_say2 ;
  assign inv_say2_inverter_EN_get = EN_inverseIfc_say2 ;

  // submodule inv_say_inverter
  assign inv_say_inverter_put = ifc_say_v ;
  assign inv_say_inverter_EN_put = EN_ifc_say ;
  assign inv_say_inverter_EN_get = EN_inverseIfc_say ;

  // submodule inv_setLeds_inverter
  assign inv_setLeds_inverter_put = ifc_setLeds_v ;
  assign inv_setLeds_inverter_EN_put = EN_ifc_setLeds ;
  assign inv_setLeds_inverter_EN_get = EN_inverseIfc_setLeds ;
endmodule  // mkEchoRequestInverterV

