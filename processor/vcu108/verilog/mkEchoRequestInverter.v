//
// Generated by Bluespec Compiler (build 7d25cde)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule ifc_say  CF ( ifc_say2,
// 		       ifc_setLeds,
// 		       inverseIfc_say,
// 		       inverseIfc_say2,
// 		       inverseIfc_setLeds );
// schedule ifc_say  C ( ifc_say );
//
// schedule ifc_say2  CF ( ifc_say,
// 			ifc_setLeds,
// 			inverseIfc_say,
// 			inverseIfc_say2,
// 			inverseIfc_setLeds );
// schedule ifc_say2  C ( ifc_say2 );
//
// schedule ifc_setLeds  CF ( ifc_say,
// 			   ifc_say2,
// 			   inverseIfc_say,
// 			   inverseIfc_say2,
// 			   inverseIfc_setLeds );
// schedule ifc_setLeds  C ( ifc_setLeds );
//
// schedule inverseIfc_say  CF ( ifc_say,
// 			      ifc_say2,
// 			      ifc_setLeds,
// 			      inverseIfc_say2,
// 			      inverseIfc_setLeds );
// schedule inverseIfc_say  C ( inverseIfc_say );
//
// schedule inverseIfc_say2  CF ( ifc_say,
// 			       ifc_say2,
// 			       ifc_setLeds,
// 			       inverseIfc_say,
// 			       inverseIfc_setLeds );
// schedule inverseIfc_say2  C ( inverseIfc_say2 );
//
// schedule inverseIfc_setLeds  CF ( ifc_say,
// 				  ifc_say2,
// 				  ifc_setLeds,
// 				  inverseIfc_say,
// 				  inverseIfc_say2 );
// schedule inverseIfc_setLeds  C ( inverseIfc_setLeds );
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_say                    O     1 reg
// RDY_ifc_say2                   O     1 reg
// RDY_ifc_setLeds                O     1 reg
// inverseIfc_say                 O    32 reg
// RDY_inverseIfc_say             O     1 reg
// inverseIfc_say2                O    32 reg
// RDY_inverseIfc_say2            O     1 reg
// inverseIfc_setLeds             O     8 reg
// RDY_inverseIfc_setLeds         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_say_v                      I    32 reg
// ifc_say2_a                     I    16 reg
// ifc_say2_b                     I    16 reg
// ifc_setLeds_v                  I     8 reg
// EN_ifc_say                     I     1
// EN_ifc_say2                    I     1
// EN_ifc_setLeds                 I     1
// EN_inverseIfc_say              I     1
// EN_inverseIfc_say2             I     1
// EN_inverseIfc_setLeds          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEchoRequestInverter(CLK,
			     RST_N,

			     ifc_say_v,
			     EN_ifc_say,
			     RDY_ifc_say,

			     ifc_say2_a,
			     ifc_say2_b,
			     EN_ifc_say2,
			     RDY_ifc_say2,

			     ifc_setLeds_v,
			     EN_ifc_setLeds,
			     RDY_ifc_setLeds,

			     EN_inverseIfc_say,
			     inverseIfc_say,
			     RDY_inverseIfc_say,

			     EN_inverseIfc_say2,
			     inverseIfc_say2,
			     RDY_inverseIfc_say2,

			     EN_inverseIfc_setLeds,
			     inverseIfc_setLeds,
			     RDY_inverseIfc_setLeds);
  input  CLK;
  input  RST_N;

  // action method ifc_say
  input  [31 : 0] ifc_say_v;
  input  EN_ifc_say;
  output RDY_ifc_say;

  // action method ifc_say2
  input  [15 : 0] ifc_say2_a;
  input  [15 : 0] ifc_say2_b;
  input  EN_ifc_say2;
  output RDY_ifc_say2;

  // action method ifc_setLeds
  input  [7 : 0] ifc_setLeds_v;
  input  EN_ifc_setLeds;
  output RDY_ifc_setLeds;

  // actionvalue method inverseIfc_say
  input  EN_inverseIfc_say;
  output [31 : 0] inverseIfc_say;
  output RDY_inverseIfc_say;

  // actionvalue method inverseIfc_say2
  input  EN_inverseIfc_say2;
  output [31 : 0] inverseIfc_say2;
  output RDY_inverseIfc_say2;

  // actionvalue method inverseIfc_setLeds
  input  EN_inverseIfc_setLeds;
  output [7 : 0] inverseIfc_setLeds;
  output RDY_inverseIfc_setLeds;

  // signals for module outputs
  wire [31 : 0] inverseIfc_say, inverseIfc_say2;
  wire [7 : 0] inverseIfc_setLeds;
  wire RDY_ifc_say,
       RDY_ifc_say2,
       RDY_ifc_setLeds,
       RDY_inverseIfc_say,
       RDY_inverseIfc_say2,
       RDY_inverseIfc_setLeds;

  // ports of submodule fifo_say
  wire [31 : 0] fifo_say_D_IN, fifo_say_D_OUT;
  wire fifo_say_CLR,
       fifo_say_DEQ,
       fifo_say_EMPTY_N,
       fifo_say_ENQ,
       fifo_say_FULL_N;

  // ports of submodule fifo_say2
  wire [31 : 0] fifo_say2_D_IN, fifo_say2_D_OUT;
  wire fifo_say2_CLR,
       fifo_say2_DEQ,
       fifo_say2_EMPTY_N,
       fifo_say2_ENQ,
       fifo_say2_FULL_N;

  // ports of submodule fifo_setLeds
  wire [7 : 0] fifo_setLeds_D_IN, fifo_setLeds_D_OUT;
  wire fifo_setLeds_CLR,
       fifo_setLeds_DEQ,
       fifo_setLeds_EMPTY_N,
       fifo_setLeds_ENQ,
       fifo_setLeds_FULL_N;

  // action method ifc_say
  assign RDY_ifc_say = fifo_say_FULL_N ;

  // action method ifc_say2
  assign RDY_ifc_say2 = fifo_say2_FULL_N ;

  // action method ifc_setLeds
  assign RDY_ifc_setLeds = fifo_setLeds_FULL_N ;

  // actionvalue method inverseIfc_say
  assign inverseIfc_say = fifo_say_D_OUT ;
  assign RDY_inverseIfc_say = fifo_say_EMPTY_N ;

  // actionvalue method inverseIfc_say2
  assign inverseIfc_say2 = fifo_say2_D_OUT ;
  assign RDY_inverseIfc_say2 = fifo_say2_EMPTY_N ;

  // actionvalue method inverseIfc_setLeds
  assign inverseIfc_setLeds = fifo_setLeds_D_OUT ;
  assign RDY_inverseIfc_setLeds = fifo_setLeds_EMPTY_N ;

  // submodule fifo_say
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_say(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fifo_say_D_IN),
						   .ENQ(fifo_say_ENQ),
						   .DEQ(fifo_say_DEQ),
						   .CLR(fifo_say_CLR),
						   .D_OUT(fifo_say_D_OUT),
						   .FULL_N(fifo_say_FULL_N),
						   .EMPTY_N(fifo_say_EMPTY_N));

  // submodule fifo_say2
  FIFO2 #(.width(32'd32), .guarded(1'd1)) fifo_say2(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(fifo_say2_D_IN),
						    .ENQ(fifo_say2_ENQ),
						    .DEQ(fifo_say2_DEQ),
						    .CLR(fifo_say2_CLR),
						    .D_OUT(fifo_say2_D_OUT),
						    .FULL_N(fifo_say2_FULL_N),
						    .EMPTY_N(fifo_say2_EMPTY_N));

  // submodule fifo_setLeds
  FIFO2 #(.width(32'd8), .guarded(1'd1)) fifo_setLeds(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(fifo_setLeds_D_IN),
						      .ENQ(fifo_setLeds_ENQ),
						      .DEQ(fifo_setLeds_DEQ),
						      .CLR(fifo_setLeds_CLR),
						      .D_OUT(fifo_setLeds_D_OUT),
						      .FULL_N(fifo_setLeds_FULL_N),
						      .EMPTY_N(fifo_setLeds_EMPTY_N));

  // submodule fifo_say
  assign fifo_say_D_IN = ifc_say_v ;
  assign fifo_say_ENQ = EN_ifc_say ;
  assign fifo_say_DEQ = EN_inverseIfc_say ;
  assign fifo_say_CLR = 1'b0 ;

  // submodule fifo_say2
  assign fifo_say2_D_IN = { ifc_say2_a, ifc_say2_b } ;
  assign fifo_say2_ENQ = EN_ifc_say2 ;
  assign fifo_say2_DEQ = EN_inverseIfc_say2 ;
  assign fifo_say2_CLR = 1'b0 ;

  // submodule fifo_setLeds
  assign fifo_setLeds_D_IN = ifc_setLeds_v ;
  assign fifo_setLeds_ENQ = EN_ifc_setLeds ;
  assign fifo_setLeds_DEQ = EN_inverseIfc_setLeds ;
  assign fifo_setLeds_CLR = 1'b0 ;
endmodule  // mkEchoRequestInverter

