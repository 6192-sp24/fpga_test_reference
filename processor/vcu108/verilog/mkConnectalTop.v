//
// Generated by Bluespec Compiler (build 7d25cde)
//
// timestamp removed
//
// BVI format method schedule info:
// schedule slave_read_server_readReq_put  CF ( slave_read_server_readData_get,
// 					     slave_write_server_writeReq_put,
// 					     slave_write_server_writeData_put,
// 					     slave_write_server_writeDone_get,
// 					     interrupt_0__read,
// 					     interrupt_1__read,
// 					     interrupt_2__read,
// 					     interrupt_3__read,
// 					     interrupt_4__read,
// 					     interrupt_5__read,
// 					     interrupt_6__read,
// 					     interrupt_7__read,
// 					     interrupt_8__read,
// 					     interrupt_9__read,
// 					     interrupt_10__read,
// 					     interrupt_11__read,
// 					     interrupt_12__read,
// 					     interrupt_13__read,
// 					     interrupt_14__read,
// 					     interrupt_15__read,
// 					     readers_0_readReq_get,
// 					     readers_0_readData_put,
// 					     readers_1_readReq_get,
// 					     readers_1_readData_put,
// 					     writers_0_writeReq_get,
// 					     writers_0_writeData_get,
// 					     writers_0_writeDone_put,
// 					     writers_1_writeReq_get,
// 					     writers_1_writeData_get,
// 					     writers_1_writeDone_put );
// schedule slave_read_server_readReq_put  C ( slave_read_server_readReq_put );
//
// schedule slave_read_server_readData_get  CF ( slave_read_server_readReq_put,
// 					      slave_write_server_writeReq_put,
// 					      slave_write_server_writeData_put,
// 					      slave_write_server_writeDone_get,
// 					      interrupt_0__read,
// 					      interrupt_1__read,
// 					      interrupt_2__read,
// 					      interrupt_3__read,
// 					      interrupt_4__read,
// 					      interrupt_5__read,
// 					      interrupt_6__read,
// 					      interrupt_7__read,
// 					      interrupt_8__read,
// 					      interrupt_9__read,
// 					      interrupt_10__read,
// 					      interrupt_11__read,
// 					      interrupt_12__read,
// 					      interrupt_13__read,
// 					      interrupt_14__read,
// 					      interrupt_15__read,
// 					      readers_0_readReq_get,
// 					      readers_0_readData_put,
// 					      readers_1_readReq_get,
// 					      readers_1_readData_put,
// 					      writers_0_writeReq_get,
// 					      writers_0_writeData_get,
// 					      writers_0_writeDone_put,
// 					      writers_1_writeReq_get,
// 					      writers_1_writeData_get,
// 					      writers_1_writeDone_put );
// schedule slave_read_server_readData_get  C ( slave_read_server_readData_get );
//
// schedule slave_write_server_writeReq_put  CF ( slave_read_server_readReq_put,
// 					       slave_read_server_readData_get,
// 					       slave_write_server_writeDone_get,
// 					       interrupt_0__read,
// 					       interrupt_1__read,
// 					       interrupt_2__read,
// 					       interrupt_3__read,
// 					       interrupt_4__read,
// 					       interrupt_5__read,
// 					       interrupt_6__read,
// 					       interrupt_7__read,
// 					       interrupt_8__read,
// 					       interrupt_9__read,
// 					       interrupt_10__read,
// 					       interrupt_11__read,
// 					       interrupt_12__read,
// 					       interrupt_13__read,
// 					       interrupt_14__read,
// 					       interrupt_15__read,
// 					       readers_0_readReq_get,
// 					       readers_0_readData_put,
// 					       readers_1_readReq_get,
// 					       readers_1_readData_put,
// 					       writers_0_writeReq_get,
// 					       writers_0_writeData_get,
// 					       writers_0_writeDone_put,
// 					       writers_1_writeReq_get,
// 					       writers_1_writeData_get,
// 					       writers_1_writeDone_put );
// schedule slave_write_server_writeReq_put  C ( slave_write_server_writeReq_put );
//
// schedule slave_write_server_writeData_put  CF ( slave_read_server_readReq_put,
// 						slave_read_server_readData_get,
// 						slave_write_server_writeDone_get,
// 						interrupt_0__read,
// 						interrupt_1__read,
// 						interrupt_2__read,
// 						interrupt_3__read,
// 						interrupt_4__read,
// 						interrupt_5__read,
// 						interrupt_6__read,
// 						interrupt_7__read,
// 						interrupt_8__read,
// 						interrupt_9__read,
// 						interrupt_10__read,
// 						interrupt_11__read,
// 						interrupt_12__read,
// 						interrupt_13__read,
// 						interrupt_14__read,
// 						interrupt_15__read,
// 						readers_0_readReq_get,
// 						readers_0_readData_put,
// 						readers_1_readReq_get,
// 						readers_1_readData_put,
// 						writers_0_writeReq_get,
// 						writers_0_writeData_get,
// 						writers_0_writeDone_put,
// 						writers_1_writeReq_get,
// 						writers_1_writeData_get,
// 						writers_1_writeDone_put );
// schedule slave_write_server_writeData_put  SBR ( slave_write_server_writeReq_put );
// schedule slave_write_server_writeData_put  C ( slave_write_server_writeData_put );
//
// schedule slave_write_server_writeDone_get  CF ( slave_read_server_readReq_put,
// 						slave_read_server_readData_get,
// 						slave_write_server_writeReq_put,
// 						slave_write_server_writeData_put,
// 						interrupt_0__read,
// 						interrupt_1__read,
// 						interrupt_2__read,
// 						interrupt_3__read,
// 						interrupt_4__read,
// 						interrupt_5__read,
// 						interrupt_6__read,
// 						interrupt_7__read,
// 						interrupt_8__read,
// 						interrupt_9__read,
// 						interrupt_10__read,
// 						interrupt_11__read,
// 						interrupt_12__read,
// 						interrupt_13__read,
// 						interrupt_14__read,
// 						interrupt_15__read,
// 						readers_0_readReq_get,
// 						readers_0_readData_put,
// 						readers_1_readReq_get,
// 						readers_1_readData_put,
// 						writers_0_writeReq_get,
// 						writers_0_writeData_get,
// 						writers_0_writeDone_put,
// 						writers_1_writeReq_get,
// 						writers_1_writeData_get,
// 						writers_1_writeDone_put );
// schedule slave_write_server_writeDone_get  C ( slave_write_server_writeDone_get );
//
// schedule interrupt_0__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_1__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_2__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_3__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_4__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_5__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_6__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_7__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_8__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_9__read  CF ( slave_read_server_readReq_put,
// 				 slave_read_server_readData_get,
// 				 slave_write_server_writeReq_put,
// 				 slave_write_server_writeData_put,
// 				 slave_write_server_writeDone_get,
// 				 interrupt_0__read,
// 				 interrupt_1__read,
// 				 interrupt_2__read,
// 				 interrupt_3__read,
// 				 interrupt_4__read,
// 				 interrupt_5__read,
// 				 interrupt_6__read,
// 				 interrupt_7__read,
// 				 interrupt_8__read,
// 				 interrupt_9__read,
// 				 interrupt_10__read,
// 				 interrupt_11__read,
// 				 interrupt_12__read,
// 				 interrupt_13__read,
// 				 interrupt_14__read,
// 				 interrupt_15__read,
// 				 readers_0_readReq_get,
// 				 readers_0_readData_put,
// 				 readers_1_readReq_get,
// 				 readers_1_readData_put,
// 				 writers_0_writeReq_get,
// 				 writers_0_writeData_get,
// 				 writers_0_writeDone_put,
// 				 writers_1_writeReq_get,
// 				 writers_1_writeData_get,
// 				 writers_1_writeDone_put );
//
// schedule interrupt_10__read  CF ( slave_read_server_readReq_put,
// 				  slave_read_server_readData_get,
// 				  slave_write_server_writeReq_put,
// 				  slave_write_server_writeData_put,
// 				  slave_write_server_writeDone_get,
// 				  interrupt_0__read,
// 				  interrupt_1__read,
// 				  interrupt_2__read,
// 				  interrupt_3__read,
// 				  interrupt_4__read,
// 				  interrupt_5__read,
// 				  interrupt_6__read,
// 				  interrupt_7__read,
// 				  interrupt_8__read,
// 				  interrupt_9__read,
// 				  interrupt_10__read,
// 				  interrupt_11__read,
// 				  interrupt_12__read,
// 				  interrupt_13__read,
// 				  interrupt_14__read,
// 				  interrupt_15__read,
// 				  readers_0_readReq_get,
// 				  readers_0_readData_put,
// 				  readers_1_readReq_get,
// 				  readers_1_readData_put,
// 				  writers_0_writeReq_get,
// 				  writers_0_writeData_get,
// 				  writers_0_writeDone_put,
// 				  writers_1_writeReq_get,
// 				  writers_1_writeData_get,
// 				  writers_1_writeDone_put );
//
// schedule interrupt_11__read  CF ( slave_read_server_readReq_put,
// 				  slave_read_server_readData_get,
// 				  slave_write_server_writeReq_put,
// 				  slave_write_server_writeData_put,
// 				  slave_write_server_writeDone_get,
// 				  interrupt_0__read,
// 				  interrupt_1__read,
// 				  interrupt_2__read,
// 				  interrupt_3__read,
// 				  interrupt_4__read,
// 				  interrupt_5__read,
// 				  interrupt_6__read,
// 				  interrupt_7__read,
// 				  interrupt_8__read,
// 				  interrupt_9__read,
// 				  interrupt_10__read,
// 				  interrupt_11__read,
// 				  interrupt_12__read,
// 				  interrupt_13__read,
// 				  interrupt_14__read,
// 				  interrupt_15__read,
// 				  readers_0_readReq_get,
// 				  readers_0_readData_put,
// 				  readers_1_readReq_get,
// 				  readers_1_readData_put,
// 				  writers_0_writeReq_get,
// 				  writers_0_writeData_get,
// 				  writers_0_writeDone_put,
// 				  writers_1_writeReq_get,
// 				  writers_1_writeData_get,
// 				  writers_1_writeDone_put );
//
// schedule interrupt_12__read  CF ( slave_read_server_readReq_put,
// 				  slave_read_server_readData_get,
// 				  slave_write_server_writeReq_put,
// 				  slave_write_server_writeData_put,
// 				  slave_write_server_writeDone_get,
// 				  interrupt_0__read,
// 				  interrupt_1__read,
// 				  interrupt_2__read,
// 				  interrupt_3__read,
// 				  interrupt_4__read,
// 				  interrupt_5__read,
// 				  interrupt_6__read,
// 				  interrupt_7__read,
// 				  interrupt_8__read,
// 				  interrupt_9__read,
// 				  interrupt_10__read,
// 				  interrupt_11__read,
// 				  interrupt_12__read,
// 				  interrupt_13__read,
// 				  interrupt_14__read,
// 				  interrupt_15__read,
// 				  readers_0_readReq_get,
// 				  readers_0_readData_put,
// 				  readers_1_readReq_get,
// 				  readers_1_readData_put,
// 				  writers_0_writeReq_get,
// 				  writers_0_writeData_get,
// 				  writers_0_writeDone_put,
// 				  writers_1_writeReq_get,
// 				  writers_1_writeData_get,
// 				  writers_1_writeDone_put );
//
// schedule interrupt_13__read  CF ( slave_read_server_readReq_put,
// 				  slave_read_server_readData_get,
// 				  slave_write_server_writeReq_put,
// 				  slave_write_server_writeData_put,
// 				  slave_write_server_writeDone_get,
// 				  interrupt_0__read,
// 				  interrupt_1__read,
// 				  interrupt_2__read,
// 				  interrupt_3__read,
// 				  interrupt_4__read,
// 				  interrupt_5__read,
// 				  interrupt_6__read,
// 				  interrupt_7__read,
// 				  interrupt_8__read,
// 				  interrupt_9__read,
// 				  interrupt_10__read,
// 				  interrupt_11__read,
// 				  interrupt_12__read,
// 				  interrupt_13__read,
// 				  interrupt_14__read,
// 				  interrupt_15__read,
// 				  readers_0_readReq_get,
// 				  readers_0_readData_put,
// 				  readers_1_readReq_get,
// 				  readers_1_readData_put,
// 				  writers_0_writeReq_get,
// 				  writers_0_writeData_get,
// 				  writers_0_writeDone_put,
// 				  writers_1_writeReq_get,
// 				  writers_1_writeData_get,
// 				  writers_1_writeDone_put );
//
// schedule interrupt_14__read  CF ( slave_read_server_readReq_put,
// 				  slave_read_server_readData_get,
// 				  slave_write_server_writeReq_put,
// 				  slave_write_server_writeData_put,
// 				  slave_write_server_writeDone_get,
// 				  interrupt_0__read,
// 				  interrupt_1__read,
// 				  interrupt_2__read,
// 				  interrupt_3__read,
// 				  interrupt_4__read,
// 				  interrupt_5__read,
// 				  interrupt_6__read,
// 				  interrupt_7__read,
// 				  interrupt_8__read,
// 				  interrupt_9__read,
// 				  interrupt_10__read,
// 				  interrupt_11__read,
// 				  interrupt_12__read,
// 				  interrupt_13__read,
// 				  interrupt_14__read,
// 				  interrupt_15__read,
// 				  readers_0_readReq_get,
// 				  readers_0_readData_put,
// 				  readers_1_readReq_get,
// 				  readers_1_readData_put,
// 				  writers_0_writeReq_get,
// 				  writers_0_writeData_get,
// 				  writers_0_writeDone_put,
// 				  writers_1_writeReq_get,
// 				  writers_1_writeData_get,
// 				  writers_1_writeDone_put );
//
// schedule interrupt_15__read  CF ( slave_read_server_readReq_put,
// 				  slave_read_server_readData_get,
// 				  slave_write_server_writeReq_put,
// 				  slave_write_server_writeData_put,
// 				  slave_write_server_writeDone_get,
// 				  interrupt_0__read,
// 				  interrupt_1__read,
// 				  interrupt_2__read,
// 				  interrupt_3__read,
// 				  interrupt_4__read,
// 				  interrupt_5__read,
// 				  interrupt_6__read,
// 				  interrupt_7__read,
// 				  interrupt_8__read,
// 				  interrupt_9__read,
// 				  interrupt_10__read,
// 				  interrupt_11__read,
// 				  interrupt_12__read,
// 				  interrupt_13__read,
// 				  interrupt_14__read,
// 				  interrupt_15__read,
// 				  readers_0_readReq_get,
// 				  readers_0_readData_put,
// 				  readers_1_readReq_get,
// 				  readers_1_readData_put,
// 				  writers_0_writeReq_get,
// 				  writers_0_writeData_get,
// 				  writers_0_writeDone_put,
// 				  writers_1_writeReq_get,
// 				  writers_1_writeData_get,
// 				  writers_1_writeDone_put );
//
// schedule readers_0_readReq_get  CF ( slave_read_server_readReq_put,
// 				     slave_read_server_readData_get,
// 				     slave_write_server_writeReq_put,
// 				     slave_write_server_writeData_put,
// 				     slave_write_server_writeDone_get,
// 				     interrupt_0__read,
// 				     interrupt_1__read,
// 				     interrupt_2__read,
// 				     interrupt_3__read,
// 				     interrupt_4__read,
// 				     interrupt_5__read,
// 				     interrupt_6__read,
// 				     interrupt_7__read,
// 				     interrupt_8__read,
// 				     interrupt_9__read,
// 				     interrupt_10__read,
// 				     interrupt_11__read,
// 				     interrupt_12__read,
// 				     interrupt_13__read,
// 				     interrupt_14__read,
// 				     interrupt_15__read,
// 				     readers_0_readReq_get,
// 				     readers_0_readData_put,
// 				     readers_1_readReq_get,
// 				     readers_1_readData_put,
// 				     writers_0_writeReq_get,
// 				     writers_0_writeData_get,
// 				     writers_0_writeDone_put,
// 				     writers_1_writeReq_get,
// 				     writers_1_writeData_get,
// 				     writers_1_writeDone_put );
//
// schedule readers_0_readData_put  CF ( slave_read_server_readReq_put,
// 				      slave_read_server_readData_get,
// 				      slave_write_server_writeReq_put,
// 				      slave_write_server_writeData_put,
// 				      slave_write_server_writeDone_get,
// 				      interrupt_0__read,
// 				      interrupt_1__read,
// 				      interrupt_2__read,
// 				      interrupt_3__read,
// 				      interrupt_4__read,
// 				      interrupt_5__read,
// 				      interrupt_6__read,
// 				      interrupt_7__read,
// 				      interrupt_8__read,
// 				      interrupt_9__read,
// 				      interrupt_10__read,
// 				      interrupt_11__read,
// 				      interrupt_12__read,
// 				      interrupt_13__read,
// 				      interrupt_14__read,
// 				      interrupt_15__read,
// 				      readers_0_readReq_get,
// 				      readers_0_readData_put,
// 				      readers_1_readReq_get,
// 				      readers_1_readData_put,
// 				      writers_0_writeReq_get,
// 				      writers_0_writeData_get,
// 				      writers_0_writeDone_put,
// 				      writers_1_writeReq_get,
// 				      writers_1_writeData_get,
// 				      writers_1_writeDone_put );
//
// schedule readers_1_readReq_get  CF ( slave_read_server_readReq_put,
// 				     slave_read_server_readData_get,
// 				     slave_write_server_writeReq_put,
// 				     slave_write_server_writeData_put,
// 				     slave_write_server_writeDone_get,
// 				     interrupt_0__read,
// 				     interrupt_1__read,
// 				     interrupt_2__read,
// 				     interrupt_3__read,
// 				     interrupt_4__read,
// 				     interrupt_5__read,
// 				     interrupt_6__read,
// 				     interrupt_7__read,
// 				     interrupt_8__read,
// 				     interrupt_9__read,
// 				     interrupt_10__read,
// 				     interrupt_11__read,
// 				     interrupt_12__read,
// 				     interrupt_13__read,
// 				     interrupt_14__read,
// 				     interrupt_15__read,
// 				     readers_0_readReq_get,
// 				     readers_0_readData_put,
// 				     readers_1_readReq_get,
// 				     readers_1_readData_put,
// 				     writers_0_writeReq_get,
// 				     writers_0_writeData_get,
// 				     writers_0_writeDone_put,
// 				     writers_1_writeReq_get,
// 				     writers_1_writeData_get,
// 				     writers_1_writeDone_put );
//
// schedule readers_1_readData_put  CF ( slave_read_server_readReq_put,
// 				      slave_read_server_readData_get,
// 				      slave_write_server_writeReq_put,
// 				      slave_write_server_writeData_put,
// 				      slave_write_server_writeDone_get,
// 				      interrupt_0__read,
// 				      interrupt_1__read,
// 				      interrupt_2__read,
// 				      interrupt_3__read,
// 				      interrupt_4__read,
// 				      interrupt_5__read,
// 				      interrupt_6__read,
// 				      interrupt_7__read,
// 				      interrupt_8__read,
// 				      interrupt_9__read,
// 				      interrupt_10__read,
// 				      interrupt_11__read,
// 				      interrupt_12__read,
// 				      interrupt_13__read,
// 				      interrupt_14__read,
// 				      interrupt_15__read,
// 				      readers_0_readReq_get,
// 				      readers_0_readData_put,
// 				      readers_1_readReq_get,
// 				      readers_1_readData_put,
// 				      writers_0_writeReq_get,
// 				      writers_0_writeData_get,
// 				      writers_0_writeDone_put,
// 				      writers_1_writeReq_get,
// 				      writers_1_writeData_get,
// 				      writers_1_writeDone_put );
//
// schedule writers_0_writeReq_get  CF ( slave_read_server_readReq_put,
// 				      slave_read_server_readData_get,
// 				      slave_write_server_writeReq_put,
// 				      slave_write_server_writeData_put,
// 				      slave_write_server_writeDone_get,
// 				      interrupt_0__read,
// 				      interrupt_1__read,
// 				      interrupt_2__read,
// 				      interrupt_3__read,
// 				      interrupt_4__read,
// 				      interrupt_5__read,
// 				      interrupt_6__read,
// 				      interrupt_7__read,
// 				      interrupt_8__read,
// 				      interrupt_9__read,
// 				      interrupt_10__read,
// 				      interrupt_11__read,
// 				      interrupt_12__read,
// 				      interrupt_13__read,
// 				      interrupt_14__read,
// 				      interrupt_15__read,
// 				      readers_0_readReq_get,
// 				      readers_0_readData_put,
// 				      readers_1_readReq_get,
// 				      readers_1_readData_put,
// 				      writers_0_writeReq_get,
// 				      writers_0_writeData_get,
// 				      writers_0_writeDone_put,
// 				      writers_1_writeReq_get,
// 				      writers_1_writeData_get,
// 				      writers_1_writeDone_put );
//
// schedule writers_0_writeData_get  CF ( slave_read_server_readReq_put,
// 				       slave_read_server_readData_get,
// 				       slave_write_server_writeReq_put,
// 				       slave_write_server_writeData_put,
// 				       slave_write_server_writeDone_get,
// 				       interrupt_0__read,
// 				       interrupt_1__read,
// 				       interrupt_2__read,
// 				       interrupt_3__read,
// 				       interrupt_4__read,
// 				       interrupt_5__read,
// 				       interrupt_6__read,
// 				       interrupt_7__read,
// 				       interrupt_8__read,
// 				       interrupt_9__read,
// 				       interrupt_10__read,
// 				       interrupt_11__read,
// 				       interrupt_12__read,
// 				       interrupt_13__read,
// 				       interrupt_14__read,
// 				       interrupt_15__read,
// 				       readers_0_readReq_get,
// 				       readers_0_readData_put,
// 				       readers_1_readReq_get,
// 				       readers_1_readData_put,
// 				       writers_0_writeReq_get,
// 				       writers_0_writeData_get,
// 				       writers_0_writeDone_put,
// 				       writers_1_writeReq_get,
// 				       writers_1_writeData_get,
// 				       writers_1_writeDone_put );
//
// schedule writers_0_writeDone_put  CF ( slave_read_server_readReq_put,
// 				       slave_read_server_readData_get,
// 				       slave_write_server_writeReq_put,
// 				       slave_write_server_writeData_put,
// 				       slave_write_server_writeDone_get,
// 				       interrupt_0__read,
// 				       interrupt_1__read,
// 				       interrupt_2__read,
// 				       interrupt_3__read,
// 				       interrupt_4__read,
// 				       interrupt_5__read,
// 				       interrupt_6__read,
// 				       interrupt_7__read,
// 				       interrupt_8__read,
// 				       interrupt_9__read,
// 				       interrupt_10__read,
// 				       interrupt_11__read,
// 				       interrupt_12__read,
// 				       interrupt_13__read,
// 				       interrupt_14__read,
// 				       interrupt_15__read,
// 				       readers_0_readReq_get,
// 				       readers_0_readData_put,
// 				       readers_1_readReq_get,
// 				       readers_1_readData_put,
// 				       writers_0_writeReq_get,
// 				       writers_0_writeData_get,
// 				       writers_0_writeDone_put,
// 				       writers_1_writeReq_get,
// 				       writers_1_writeData_get,
// 				       writers_1_writeDone_put );
//
// schedule writers_1_writeReq_get  CF ( slave_read_server_readReq_put,
// 				      slave_read_server_readData_get,
// 				      slave_write_server_writeReq_put,
// 				      slave_write_server_writeData_put,
// 				      slave_write_server_writeDone_get,
// 				      interrupt_0__read,
// 				      interrupt_1__read,
// 				      interrupt_2__read,
// 				      interrupt_3__read,
// 				      interrupt_4__read,
// 				      interrupt_5__read,
// 				      interrupt_6__read,
// 				      interrupt_7__read,
// 				      interrupt_8__read,
// 				      interrupt_9__read,
// 				      interrupt_10__read,
// 				      interrupt_11__read,
// 				      interrupt_12__read,
// 				      interrupt_13__read,
// 				      interrupt_14__read,
// 				      interrupt_15__read,
// 				      readers_0_readReq_get,
// 				      readers_0_readData_put,
// 				      readers_1_readReq_get,
// 				      readers_1_readData_put,
// 				      writers_0_writeReq_get,
// 				      writers_0_writeData_get,
// 				      writers_0_writeDone_put,
// 				      writers_1_writeReq_get,
// 				      writers_1_writeData_get,
// 				      writers_1_writeDone_put );
//
// schedule writers_1_writeData_get  CF ( slave_read_server_readReq_put,
// 				       slave_read_server_readData_get,
// 				       slave_write_server_writeReq_put,
// 				       slave_write_server_writeData_put,
// 				       slave_write_server_writeDone_get,
// 				       interrupt_0__read,
// 				       interrupt_1__read,
// 				       interrupt_2__read,
// 				       interrupt_3__read,
// 				       interrupt_4__read,
// 				       interrupt_5__read,
// 				       interrupt_6__read,
// 				       interrupt_7__read,
// 				       interrupt_8__read,
// 				       interrupt_9__read,
// 				       interrupt_10__read,
// 				       interrupt_11__read,
// 				       interrupt_12__read,
// 				       interrupt_13__read,
// 				       interrupt_14__read,
// 				       interrupt_15__read,
// 				       readers_0_readReq_get,
// 				       readers_0_readData_put,
// 				       readers_1_readReq_get,
// 				       readers_1_readData_put,
// 				       writers_0_writeReq_get,
// 				       writers_0_writeData_get,
// 				       writers_0_writeDone_put,
// 				       writers_1_writeReq_get,
// 				       writers_1_writeData_get,
// 				       writers_1_writeDone_put );
//
// schedule writers_1_writeDone_put  CF ( slave_read_server_readReq_put,
// 				       slave_read_server_readData_get,
// 				       slave_write_server_writeReq_put,
// 				       slave_write_server_writeData_put,
// 				       slave_write_server_writeDone_get,
// 				       interrupt_0__read,
// 				       interrupt_1__read,
// 				       interrupt_2__read,
// 				       interrupt_3__read,
// 				       interrupt_4__read,
// 				       interrupt_5__read,
// 				       interrupt_6__read,
// 				       interrupt_7__read,
// 				       interrupt_8__read,
// 				       interrupt_9__read,
// 				       interrupt_10__read,
// 				       interrupt_11__read,
// 				       interrupt_12__read,
// 				       interrupt_13__read,
// 				       interrupt_14__read,
// 				       interrupt_15__read,
// 				       readers_0_readReq_get,
// 				       readers_0_readData_put,
// 				       readers_1_readReq_get,
// 				       readers_1_readData_put,
// 				       writers_0_writeReq_get,
// 				       writers_0_writeData_get,
// 				       writers_0_writeDone_put,
// 				       writers_1_writeReq_get,
// 				       writers_1_writeData_get,
// 				       writers_1_writeDone_put );
//
//
// Ports:
// Name                         I/O  size props
// RDY_slave_read_server_readReq_put  O     1
// slave_read_server_readData_get  O    39 reg
// RDY_slave_read_server_readData_get  O     1
// RDY_slave_write_server_writeReq_put  O     1
// RDY_slave_write_server_writeData_put  O     1
// slave_write_server_writeDone_get  O     6 reg
// RDY_slave_write_server_writeDone_get  O     1 reg
// interrupt_0__read              O     1
// RDY_interrupt_0__read          O     1 const
// interrupt_1__read              O     1
// RDY_interrupt_1__read          O     1 const
// interrupt_2__read              O     1 const
// RDY_interrupt_2__read          O     1 const
// interrupt_3__read              O     1 const
// RDY_interrupt_3__read          O     1 const
// interrupt_4__read              O     1 const
// RDY_interrupt_4__read          O     1 const
// interrupt_5__read              O     1 const
// RDY_interrupt_5__read          O     1 const
// interrupt_6__read              O     1 const
// RDY_interrupt_6__read          O     1 const
// interrupt_7__read              O     1 const
// RDY_interrupt_7__read          O     1 const
// interrupt_8__read              O     1 const
// RDY_interrupt_8__read          O     1 const
// interrupt_9__read              O     1 const
// RDY_interrupt_9__read          O     1 const
// interrupt_10__read             O     1 const
// RDY_interrupt_10__read         O     1 const
// interrupt_11__read             O     1 const
// RDY_interrupt_11__read         O     1 const
// interrupt_12__read             O     1 const
// RDY_interrupt_12__read         O     1 const
// interrupt_13__read             O     1 const
// RDY_interrupt_13__read         O     1 const
// interrupt_14__read             O     1 const
// RDY_interrupt_14__read         O     1 const
// interrupt_15__read             O     1 const
// RDY_interrupt_15__read         O     1 const
// readers_0_readReq_get          O    88 const
// RDY_readers_0_readReq_get      O     1 const
// RDY_readers_0_readData_put     O     1 const
// readers_1_readReq_get          O    88 const
// RDY_readers_1_readReq_get      O     1 const
// RDY_readers_1_readData_put     O     1 const
// writers_0_writeReq_get         O    88 const
// RDY_writers_0_writeReq_get     O     1 const
// writers_0_writeData_get        O    71 const
// RDY_writers_0_writeData_get    O     1 const
// RDY_writers_0_writeDone_put    O     1 const
// writers_1_writeReq_get         O    88 const
// RDY_writers_1_writeReq_get     O     1 const
// writers_1_writeData_get        O    71 const
// RDY_writers_1_writeData_get    O     1 const
// RDY_writers_1_writeDone_put    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_read_server_readReq_put  I    34 reg
// slave_write_server_writeReq_put  I    34 reg
// slave_write_server_writeData_put  I    39
// readers_0_readData_put         I    71 unused
// readers_1_readData_put         I    71 unused
// writers_0_writeDone_put        I     6 unused
// writers_1_writeDone_put        I     6 unused
// EN_slave_read_server_readReq_put  I     1
// EN_slave_write_server_writeReq_put  I     1
// EN_slave_write_server_writeData_put  I     1
// EN_readers_0_readData_put      I     1 unused
// EN_readers_1_readData_put      I     1 unused
// EN_writers_0_writeDone_put     I     1 unused
// EN_writers_1_writeDone_put     I     1 unused
// EN_slave_read_server_readData_get  I     1
// EN_slave_write_server_writeDone_get  I     1
// EN_readers_0_readReq_get       I     1 unused
// EN_readers_1_readReq_get       I     1 unused
// EN_writers_0_writeReq_get      I     1 unused
// EN_writers_0_writeData_get     I     1 unused
// EN_writers_1_writeReq_get      I     1 unused
// EN_writers_1_writeData_get     I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkConnectalTop(CLK,
		      RST_N,

		      slave_read_server_readReq_put,
		      EN_slave_read_server_readReq_put,
		      RDY_slave_read_server_readReq_put,

		      EN_slave_read_server_readData_get,
		      slave_read_server_readData_get,
		      RDY_slave_read_server_readData_get,

		      slave_write_server_writeReq_put,
		      EN_slave_write_server_writeReq_put,
		      RDY_slave_write_server_writeReq_put,

		      slave_write_server_writeData_put,
		      EN_slave_write_server_writeData_put,
		      RDY_slave_write_server_writeData_put,

		      EN_slave_write_server_writeDone_get,
		      slave_write_server_writeDone_get,
		      RDY_slave_write_server_writeDone_get,

		      interrupt_0__read,
		      RDY_interrupt_0__read,

		      interrupt_1__read,
		      RDY_interrupt_1__read,

		      interrupt_2__read,
		      RDY_interrupt_2__read,

		      interrupt_3__read,
		      RDY_interrupt_3__read,

		      interrupt_4__read,
		      RDY_interrupt_4__read,

		      interrupt_5__read,
		      RDY_interrupt_5__read,

		      interrupt_6__read,
		      RDY_interrupt_6__read,

		      interrupt_7__read,
		      RDY_interrupt_7__read,

		      interrupt_8__read,
		      RDY_interrupt_8__read,

		      interrupt_9__read,
		      RDY_interrupt_9__read,

		      interrupt_10__read,
		      RDY_interrupt_10__read,

		      interrupt_11__read,
		      RDY_interrupt_11__read,

		      interrupt_12__read,
		      RDY_interrupt_12__read,

		      interrupt_13__read,
		      RDY_interrupt_13__read,

		      interrupt_14__read,
		      RDY_interrupt_14__read,

		      interrupt_15__read,
		      RDY_interrupt_15__read,

		      EN_readers_0_readReq_get,
		      readers_0_readReq_get,
		      RDY_readers_0_readReq_get,

		      readers_0_readData_put,
		      EN_readers_0_readData_put,
		      RDY_readers_0_readData_put,

		      EN_readers_1_readReq_get,
		      readers_1_readReq_get,
		      RDY_readers_1_readReq_get,

		      readers_1_readData_put,
		      EN_readers_1_readData_put,
		      RDY_readers_1_readData_put,

		      EN_writers_0_writeReq_get,
		      writers_0_writeReq_get,
		      RDY_writers_0_writeReq_get,

		      EN_writers_0_writeData_get,
		      writers_0_writeData_get,
		      RDY_writers_0_writeData_get,

		      writers_0_writeDone_put,
		      EN_writers_0_writeDone_put,
		      RDY_writers_0_writeDone_put,

		      EN_writers_1_writeReq_get,
		      writers_1_writeReq_get,
		      RDY_writers_1_writeReq_get,

		      EN_writers_1_writeData_get,
		      writers_1_writeData_get,
		      RDY_writers_1_writeData_get,

		      writers_1_writeDone_put,
		      EN_writers_1_writeDone_put,
		      RDY_writers_1_writeDone_put);
  input  CLK;
  input  RST_N;

  // action method slave_read_server_readReq_put
  input  [33 : 0] slave_read_server_readReq_put;
  input  EN_slave_read_server_readReq_put;
  output RDY_slave_read_server_readReq_put;

  // actionvalue method slave_read_server_readData_get
  input  EN_slave_read_server_readData_get;
  output [38 : 0] slave_read_server_readData_get;
  output RDY_slave_read_server_readData_get;

  // action method slave_write_server_writeReq_put
  input  [33 : 0] slave_write_server_writeReq_put;
  input  EN_slave_write_server_writeReq_put;
  output RDY_slave_write_server_writeReq_put;

  // action method slave_write_server_writeData_put
  input  [38 : 0] slave_write_server_writeData_put;
  input  EN_slave_write_server_writeData_put;
  output RDY_slave_write_server_writeData_put;

  // actionvalue method slave_write_server_writeDone_get
  input  EN_slave_write_server_writeDone_get;
  output [5 : 0] slave_write_server_writeDone_get;
  output RDY_slave_write_server_writeDone_get;

  // value method interrupt_0__read
  output interrupt_0__read;
  output RDY_interrupt_0__read;

  // value method interrupt_1__read
  output interrupt_1__read;
  output RDY_interrupt_1__read;

  // value method interrupt_2__read
  output interrupt_2__read;
  output RDY_interrupt_2__read;

  // value method interrupt_3__read
  output interrupt_3__read;
  output RDY_interrupt_3__read;

  // value method interrupt_4__read
  output interrupt_4__read;
  output RDY_interrupt_4__read;

  // value method interrupt_5__read
  output interrupt_5__read;
  output RDY_interrupt_5__read;

  // value method interrupt_6__read
  output interrupt_6__read;
  output RDY_interrupt_6__read;

  // value method interrupt_7__read
  output interrupt_7__read;
  output RDY_interrupt_7__read;

  // value method interrupt_8__read
  output interrupt_8__read;
  output RDY_interrupt_8__read;

  // value method interrupt_9__read
  output interrupt_9__read;
  output RDY_interrupt_9__read;

  // value method interrupt_10__read
  output interrupt_10__read;
  output RDY_interrupt_10__read;

  // value method interrupt_11__read
  output interrupt_11__read;
  output RDY_interrupt_11__read;

  // value method interrupt_12__read
  output interrupt_12__read;
  output RDY_interrupt_12__read;

  // value method interrupt_13__read
  output interrupt_13__read;
  output RDY_interrupt_13__read;

  // value method interrupt_14__read
  output interrupt_14__read;
  output RDY_interrupt_14__read;

  // value method interrupt_15__read
  output interrupt_15__read;
  output RDY_interrupt_15__read;

  // actionvalue method readers_0_readReq_get
  input  EN_readers_0_readReq_get;
  output [87 : 0] readers_0_readReq_get;
  output RDY_readers_0_readReq_get;

  // action method readers_0_readData_put
  input  [70 : 0] readers_0_readData_put;
  input  EN_readers_0_readData_put;
  output RDY_readers_0_readData_put;

  // actionvalue method readers_1_readReq_get
  input  EN_readers_1_readReq_get;
  output [87 : 0] readers_1_readReq_get;
  output RDY_readers_1_readReq_get;

  // action method readers_1_readData_put
  input  [70 : 0] readers_1_readData_put;
  input  EN_readers_1_readData_put;
  output RDY_readers_1_readData_put;

  // actionvalue method writers_0_writeReq_get
  input  EN_writers_0_writeReq_get;
  output [87 : 0] writers_0_writeReq_get;
  output RDY_writers_0_writeReq_get;

  // actionvalue method writers_0_writeData_get
  input  EN_writers_0_writeData_get;
  output [70 : 0] writers_0_writeData_get;
  output RDY_writers_0_writeData_get;

  // action method writers_0_writeDone_put
  input  [5 : 0] writers_0_writeDone_put;
  input  EN_writers_0_writeDone_put;
  output RDY_writers_0_writeDone_put;

  // actionvalue method writers_1_writeReq_get
  input  EN_writers_1_writeReq_get;
  output [87 : 0] writers_1_writeReq_get;
  output RDY_writers_1_writeReq_get;

  // actionvalue method writers_1_writeData_get
  input  EN_writers_1_writeData_get;
  output [70 : 0] writers_1_writeData_get;
  output RDY_writers_1_writeData_get;

  // action method writers_1_writeDone_put
  input  [5 : 0] writers_1_writeDone_put;
  input  EN_writers_1_writeDone_put;
  output RDY_writers_1_writeDone_put;

  // signals for module outputs
  wire [87 : 0] readers_0_readReq_get,
		readers_1_readReq_get,
		writers_0_writeReq_get,
		writers_1_writeReq_get;
  wire [70 : 0] writers_0_writeData_get, writers_1_writeData_get;
  wire [38 : 0] slave_read_server_readData_get;
  wire [5 : 0] slave_write_server_writeDone_get;
  wire RDY_interrupt_0__read,
       RDY_interrupt_10__read,
       RDY_interrupt_11__read,
       RDY_interrupt_12__read,
       RDY_interrupt_13__read,
       RDY_interrupt_14__read,
       RDY_interrupt_15__read,
       RDY_interrupt_1__read,
       RDY_interrupt_2__read,
       RDY_interrupt_3__read,
       RDY_interrupt_4__read,
       RDY_interrupt_5__read,
       RDY_interrupt_6__read,
       RDY_interrupt_7__read,
       RDY_interrupt_8__read,
       RDY_interrupt_9__read,
       RDY_readers_0_readData_put,
       RDY_readers_0_readReq_get,
       RDY_readers_1_readData_put,
       RDY_readers_1_readReq_get,
       RDY_slave_read_server_readData_get,
       RDY_slave_read_server_readReq_put,
       RDY_slave_write_server_writeData_put,
       RDY_slave_write_server_writeDone_get,
       RDY_slave_write_server_writeReq_put,
       RDY_writers_0_writeData_get,
       RDY_writers_0_writeDone_put,
       RDY_writers_0_writeReq_get,
       RDY_writers_1_writeData_get,
       RDY_writers_1_writeDone_put,
       RDY_writers_1_writeReq_get,
       interrupt_0__read,
       interrupt_10__read,
       interrupt_11__read,
       interrupt_12__read,
       interrupt_13__read,
       interrupt_14__read,
       interrupt_15__read,
       interrupt_1__read,
       interrupt_2__read,
       interrupt_3__read,
       interrupt_4__read,
       interrupt_5__read,
       interrupt_6__read,
       interrupt_7__read,
       interrupt_8__read,
       interrupt_9__read;

  // inlined wires
  wire [68 : 0] lEcho_p_rv_core_fromDmem_rv_port0__write_1,
		lEcho_p_rv_core_fromDmem_rv_port1__read,
		lEcho_p_rv_core_fromDmem_rv_port2__read,
		lEcho_p_rv_core_fromImem_rv_port0__write_1,
		lEcho_p_rv_core_fromImem_rv_port1__read,
		lEcho_p_rv_core_fromImem_rv_port2__read,
		lEcho_p_rv_core_fromMMIO_rv_port0__write_1,
		lEcho_p_rv_core_fromMMIO_rv_port1__read,
		lEcho_p_rv_core_fromMMIO_rv_port2__read,
		lEcho_p_rv_core_toDmem_rv_port0__write_1,
		lEcho_p_rv_core_toDmem_rv_port1__read,
		lEcho_p_rv_core_toDmem_rv_port2__read,
		lEcho_p_rv_core_toImem_rv_port0__write_1,
		lEcho_p_rv_core_toImem_rv_port1__read,
		lEcho_p_rv_core_toImem_rv_port2__read,
		lEcho_p_rv_core_toMMIO_rv_port1__read,
		lEcho_p_rv_core_toMMIO_rv_port2__read;
  wire [1 : 0] lEcho_p_bram_serverAdapterA_s1_1_wget,
	       lEcho_p_bram_serverAdapterA_writeWithResp_wget,
	       lEcho_p_bram_serverAdapterB_s1_1_wget,
	       lEcho_p_bram_serverAdapterB_writeWithResp_wget;
  wire lEcho_p_bram_serverAdapterA_cnt_1_whas,
       lEcho_p_bram_serverAdapterA_outData_deqCalled_whas,
       lEcho_p_bram_serverAdapterA_outData_enqData_whas,
       lEcho_p_bram_serverAdapterA_outData_outData_whas,
       lEcho_p_bram_serverAdapterA_writeWithResp_whas,
       lEcho_p_bram_serverAdapterB_cnt_1_whas,
       lEcho_p_bram_serverAdapterB_outData_deqCalled_whas,
       lEcho_p_bram_serverAdapterB_outData_enqData_whas,
       lEcho_p_bram_serverAdapterB_outData_outData_whas,
       lEcho_p_bram_serverAdapterB_writeWithResp_whas,
       lEcho_p_rv_core_fromDmem_rv_EN_port0__write,
       lEcho_p_rv_core_fromDmem_rv_EN_port1__write,
       lEcho_p_rv_core_fromImem_rv_EN_port0__write,
       lEcho_p_rv_core_fromMMIO_rv_EN_port0__write,
       lEcho_p_rv_core_fromMMIO_rv_EN_port1__write,
       lEcho_p_rv_core_toDmem_rv_EN_port0__write,
       lEcho_p_rv_core_toDmem_rv_EN_port1__write,
       lEcho_p_rv_core_toImem_rv_EN_port1__write,
       lEcho_p_rv_core_toMMIO_rv_EN_port0__write;

  // register ctrlPort_0_cycle_count
  reg [63 : 0] ctrlPort_0_cycle_count;
  wire [63 : 0] ctrlPort_0_cycle_count_D_IN;
  wire ctrlPort_0_cycle_count_EN;

  // register ctrlPort_0_interruptEnableReg
  reg ctrlPort_0_interruptEnableReg;
  wire ctrlPort_0_interruptEnableReg_D_IN, ctrlPort_0_interruptEnableReg_EN;

  // register ctrlPort_0_num_portals_reg
  reg [31 : 0] ctrlPort_0_num_portals_reg;
  wire [31 : 0] ctrlPort_0_num_portals_reg_D_IN;
  wire ctrlPort_0_num_portals_reg_EN;

  // register ctrlPort_0_snapshot
  reg [31 : 0] ctrlPort_0_snapshot;
  wire [31 : 0] ctrlPort_0_snapshot_D_IN;
  wire ctrlPort_0_snapshot_EN;

  // register ctrlPort_1_cycle_count
  reg [63 : 0] ctrlPort_1_cycle_count;
  wire [63 : 0] ctrlPort_1_cycle_count_D_IN;
  wire ctrlPort_1_cycle_count_EN;

  // register ctrlPort_1_interruptEnableReg
  reg ctrlPort_1_interruptEnableReg;
  wire ctrlPort_1_interruptEnableReg_D_IN, ctrlPort_1_interruptEnableReg_EN;

  // register ctrlPort_1_num_portals_reg
  reg [31 : 0] ctrlPort_1_num_portals_reg;
  wire [31 : 0] ctrlPort_1_num_portals_reg_D_IN;
  wire ctrlPort_1_num_portals_reg_EN;

  // register ctrlPort_1_snapshot
  reg [31 : 0] ctrlPort_1_snapshot;
  wire [31 : 0] ctrlPort_1_snapshot_D_IN;
  wire ctrlPort_1_snapshot_EN;

  // register ctrl_mux_rv_lastWriteDataSeen
  reg ctrl_mux_rv_lastWriteDataSeen;
  wire ctrl_mux_rv_lastWriteDataSeen_D_IN, ctrl_mux_rv_lastWriteDataSeen_EN;

  // register lEcho_p_bram_serverAdapterA_cnt
  reg [2 : 0] lEcho_p_bram_serverAdapterA_cnt;
  wire [2 : 0] lEcho_p_bram_serverAdapterA_cnt_D_IN;
  wire lEcho_p_bram_serverAdapterA_cnt_EN;

  // register lEcho_p_bram_serverAdapterA_s1
  reg [1 : 0] lEcho_p_bram_serverAdapterA_s1;
  wire [1 : 0] lEcho_p_bram_serverAdapterA_s1_D_IN;
  wire lEcho_p_bram_serverAdapterA_s1_EN;

  // register lEcho_p_bram_serverAdapterB_cnt
  reg [2 : 0] lEcho_p_bram_serverAdapterB_cnt;
  wire [2 : 0] lEcho_p_bram_serverAdapterB_cnt_D_IN;
  wire lEcho_p_bram_serverAdapterB_cnt_EN;

  // register lEcho_p_bram_serverAdapterB_s1
  reg [1 : 0] lEcho_p_bram_serverAdapterB_s1;
  wire [1 : 0] lEcho_p_bram_serverAdapterB_s1_D_IN;
  wire lEcho_p_bram_serverAdapterB_s1_EN;

  // register lEcho_p_cycle_count
  reg [31 : 0] lEcho_p_cycle_count;
  wire [31 : 0] lEcho_p_cycle_count_D_IN;
  wire lEcho_p_cycle_count_EN;

  // register lEcho_p_dreq
  reg [67 : 0] lEcho_p_dreq;
  wire [67 : 0] lEcho_p_dreq_D_IN;
  wire lEcho_p_dreq_EN;

  // register lEcho_p_ireq
  reg [67 : 0] lEcho_p_ireq;
  wire [67 : 0] lEcho_p_ireq_D_IN;
  wire lEcho_p_ireq_EN;

  // register lEcho_p_rv_core_dInst
  reg [39 : 0] lEcho_p_rv_core_dInst;
  wire [39 : 0] lEcho_p_rv_core_dInst_D_IN;
  wire lEcho_p_rv_core_dInst_EN;

  // register lEcho_p_rv_core_fromDmem_rv
  reg [68 : 0] lEcho_p_rv_core_fromDmem_rv;
  wire [68 : 0] lEcho_p_rv_core_fromDmem_rv_D_IN;
  wire lEcho_p_rv_core_fromDmem_rv_EN;

  // register lEcho_p_rv_core_fromImem_rv
  reg [68 : 0] lEcho_p_rv_core_fromImem_rv;
  wire [68 : 0] lEcho_p_rv_core_fromImem_rv_D_IN;
  wire lEcho_p_rv_core_fromImem_rv_EN;

  // register lEcho_p_rv_core_fromMMIO_rv
  reg [68 : 0] lEcho_p_rv_core_fromMMIO_rv;
  wire [68 : 0] lEcho_p_rv_core_fromMMIO_rv_D_IN;
  wire lEcho_p_rv_core_fromMMIO_rv_EN;

  // register lEcho_p_rv_core_lfh
  reg [31 : 0] lEcho_p_rv_core_lfh;
  wire [31 : 0] lEcho_p_rv_core_lfh_D_IN;
  wire lEcho_p_rv_core_lfh_EN;

  // register lEcho_p_rv_core_mem_business
  reg [5 : 0] lEcho_p_rv_core_mem_business;
  wire [5 : 0] lEcho_p_rv_core_mem_business_D_IN;
  wire lEcho_p_rv_core_mem_business_EN;

  // register lEcho_p_rv_core_pc
  reg [31 : 0] lEcho_p_rv_core_pc;
  wire [31 : 0] lEcho_p_rv_core_pc_D_IN;
  wire lEcho_p_rv_core_pc_EN;

  // register lEcho_p_rv_core_rf_0
  reg [31 : 0] lEcho_p_rv_core_rf_0;
  wire [31 : 0] lEcho_p_rv_core_rf_0_D_IN;
  wire lEcho_p_rv_core_rf_0_EN;

  // register lEcho_p_rv_core_rf_1
  reg [31 : 0] lEcho_p_rv_core_rf_1;
  wire [31 : 0] lEcho_p_rv_core_rf_1_D_IN;
  wire lEcho_p_rv_core_rf_1_EN;

  // register lEcho_p_rv_core_rf_10
  reg [31 : 0] lEcho_p_rv_core_rf_10;
  wire [31 : 0] lEcho_p_rv_core_rf_10_D_IN;
  wire lEcho_p_rv_core_rf_10_EN;

  // register lEcho_p_rv_core_rf_11
  reg [31 : 0] lEcho_p_rv_core_rf_11;
  wire [31 : 0] lEcho_p_rv_core_rf_11_D_IN;
  wire lEcho_p_rv_core_rf_11_EN;

  // register lEcho_p_rv_core_rf_12
  reg [31 : 0] lEcho_p_rv_core_rf_12;
  wire [31 : 0] lEcho_p_rv_core_rf_12_D_IN;
  wire lEcho_p_rv_core_rf_12_EN;

  // register lEcho_p_rv_core_rf_13
  reg [31 : 0] lEcho_p_rv_core_rf_13;
  wire [31 : 0] lEcho_p_rv_core_rf_13_D_IN;
  wire lEcho_p_rv_core_rf_13_EN;

  // register lEcho_p_rv_core_rf_14
  reg [31 : 0] lEcho_p_rv_core_rf_14;
  wire [31 : 0] lEcho_p_rv_core_rf_14_D_IN;
  wire lEcho_p_rv_core_rf_14_EN;

  // register lEcho_p_rv_core_rf_15
  reg [31 : 0] lEcho_p_rv_core_rf_15;
  wire [31 : 0] lEcho_p_rv_core_rf_15_D_IN;
  wire lEcho_p_rv_core_rf_15_EN;

  // register lEcho_p_rv_core_rf_16
  reg [31 : 0] lEcho_p_rv_core_rf_16;
  wire [31 : 0] lEcho_p_rv_core_rf_16_D_IN;
  wire lEcho_p_rv_core_rf_16_EN;

  // register lEcho_p_rv_core_rf_17
  reg [31 : 0] lEcho_p_rv_core_rf_17;
  wire [31 : 0] lEcho_p_rv_core_rf_17_D_IN;
  wire lEcho_p_rv_core_rf_17_EN;

  // register lEcho_p_rv_core_rf_18
  reg [31 : 0] lEcho_p_rv_core_rf_18;
  wire [31 : 0] lEcho_p_rv_core_rf_18_D_IN;
  wire lEcho_p_rv_core_rf_18_EN;

  // register lEcho_p_rv_core_rf_19
  reg [31 : 0] lEcho_p_rv_core_rf_19;
  wire [31 : 0] lEcho_p_rv_core_rf_19_D_IN;
  wire lEcho_p_rv_core_rf_19_EN;

  // register lEcho_p_rv_core_rf_2
  reg [31 : 0] lEcho_p_rv_core_rf_2;
  wire [31 : 0] lEcho_p_rv_core_rf_2_D_IN;
  wire lEcho_p_rv_core_rf_2_EN;

  // register lEcho_p_rv_core_rf_20
  reg [31 : 0] lEcho_p_rv_core_rf_20;
  wire [31 : 0] lEcho_p_rv_core_rf_20_D_IN;
  wire lEcho_p_rv_core_rf_20_EN;

  // register lEcho_p_rv_core_rf_21
  reg [31 : 0] lEcho_p_rv_core_rf_21;
  wire [31 : 0] lEcho_p_rv_core_rf_21_D_IN;
  wire lEcho_p_rv_core_rf_21_EN;

  // register lEcho_p_rv_core_rf_22
  reg [31 : 0] lEcho_p_rv_core_rf_22;
  wire [31 : 0] lEcho_p_rv_core_rf_22_D_IN;
  wire lEcho_p_rv_core_rf_22_EN;

  // register lEcho_p_rv_core_rf_23
  reg [31 : 0] lEcho_p_rv_core_rf_23;
  wire [31 : 0] lEcho_p_rv_core_rf_23_D_IN;
  wire lEcho_p_rv_core_rf_23_EN;

  // register lEcho_p_rv_core_rf_24
  reg [31 : 0] lEcho_p_rv_core_rf_24;
  wire [31 : 0] lEcho_p_rv_core_rf_24_D_IN;
  wire lEcho_p_rv_core_rf_24_EN;

  // register lEcho_p_rv_core_rf_25
  reg [31 : 0] lEcho_p_rv_core_rf_25;
  wire [31 : 0] lEcho_p_rv_core_rf_25_D_IN;
  wire lEcho_p_rv_core_rf_25_EN;

  // register lEcho_p_rv_core_rf_26
  reg [31 : 0] lEcho_p_rv_core_rf_26;
  wire [31 : 0] lEcho_p_rv_core_rf_26_D_IN;
  wire lEcho_p_rv_core_rf_26_EN;

  // register lEcho_p_rv_core_rf_27
  reg [31 : 0] lEcho_p_rv_core_rf_27;
  wire [31 : 0] lEcho_p_rv_core_rf_27_D_IN;
  wire lEcho_p_rv_core_rf_27_EN;

  // register lEcho_p_rv_core_rf_28
  reg [31 : 0] lEcho_p_rv_core_rf_28;
  wire [31 : 0] lEcho_p_rv_core_rf_28_D_IN;
  wire lEcho_p_rv_core_rf_28_EN;

  // register lEcho_p_rv_core_rf_29
  reg [31 : 0] lEcho_p_rv_core_rf_29;
  wire [31 : 0] lEcho_p_rv_core_rf_29_D_IN;
  wire lEcho_p_rv_core_rf_29_EN;

  // register lEcho_p_rv_core_rf_3
  reg [31 : 0] lEcho_p_rv_core_rf_3;
  wire [31 : 0] lEcho_p_rv_core_rf_3_D_IN;
  wire lEcho_p_rv_core_rf_3_EN;

  // register lEcho_p_rv_core_rf_30
  reg [31 : 0] lEcho_p_rv_core_rf_30;
  wire [31 : 0] lEcho_p_rv_core_rf_30_D_IN;
  wire lEcho_p_rv_core_rf_30_EN;

  // register lEcho_p_rv_core_rf_31
  reg [31 : 0] lEcho_p_rv_core_rf_31;
  wire [31 : 0] lEcho_p_rv_core_rf_31_D_IN;
  wire lEcho_p_rv_core_rf_31_EN;

  // register lEcho_p_rv_core_rf_4
  reg [31 : 0] lEcho_p_rv_core_rf_4;
  wire [31 : 0] lEcho_p_rv_core_rf_4_D_IN;
  wire lEcho_p_rv_core_rf_4_EN;

  // register lEcho_p_rv_core_rf_5
  reg [31 : 0] lEcho_p_rv_core_rf_5;
  wire [31 : 0] lEcho_p_rv_core_rf_5_D_IN;
  wire lEcho_p_rv_core_rf_5_EN;

  // register lEcho_p_rv_core_rf_6
  reg [31 : 0] lEcho_p_rv_core_rf_6;
  wire [31 : 0] lEcho_p_rv_core_rf_6_D_IN;
  wire lEcho_p_rv_core_rf_6_EN;

  // register lEcho_p_rv_core_rf_7
  reg [31 : 0] lEcho_p_rv_core_rf_7;
  wire [31 : 0] lEcho_p_rv_core_rf_7_D_IN;
  wire lEcho_p_rv_core_rf_7_EN;

  // register lEcho_p_rv_core_rf_8
  reg [31 : 0] lEcho_p_rv_core_rf_8;
  wire [31 : 0] lEcho_p_rv_core_rf_8_D_IN;
  wire lEcho_p_rv_core_rf_8_EN;

  // register lEcho_p_rv_core_rf_9
  reg [31 : 0] lEcho_p_rv_core_rf_9;
  wire [31 : 0] lEcho_p_rv_core_rf_9_D_IN;
  wire lEcho_p_rv_core_rf_9_EN;

  // register lEcho_p_rv_core_rv1
  reg [31 : 0] lEcho_p_rv_core_rv1;
  wire [31 : 0] lEcho_p_rv_core_rv1_D_IN;
  wire lEcho_p_rv_core_rv1_EN;

  // register lEcho_p_rv_core_rv2
  reg [31 : 0] lEcho_p_rv_core_rv2;
  wire [31 : 0] lEcho_p_rv_core_rv2_D_IN;
  wire lEcho_p_rv_core_rv2_EN;

  // register lEcho_p_rv_core_rvd
  reg [31 : 0] lEcho_p_rv_core_rvd;
  wire [31 : 0] lEcho_p_rv_core_rvd_D_IN;
  wire lEcho_p_rv_core_rvd_EN;

  // register lEcho_p_rv_core_starting
  reg lEcho_p_rv_core_starting;
  wire lEcho_p_rv_core_starting_D_IN, lEcho_p_rv_core_starting_EN;

  // register lEcho_p_rv_core_state
  reg [1 : 0] lEcho_p_rv_core_state;
  reg [1 : 0] lEcho_p_rv_core_state_D_IN;
  wire lEcho_p_rv_core_state_EN;

  // register lEcho_p_rv_core_toDmem_rv
  reg [68 : 0] lEcho_p_rv_core_toDmem_rv;
  wire [68 : 0] lEcho_p_rv_core_toDmem_rv_D_IN;
  wire lEcho_p_rv_core_toDmem_rv_EN;

  // register lEcho_p_rv_core_toImem_rv
  reg [68 : 0] lEcho_p_rv_core_toImem_rv;
  wire [68 : 0] lEcho_p_rv_core_toImem_rv_D_IN;
  wire lEcho_p_rv_core_toImem_rv_EN;

  // register lEcho_p_rv_core_toMMIO_rv
  reg [68 : 0] lEcho_p_rv_core_toMMIO_rv;
  wire [68 : 0] lEcho_p_rv_core_toMMIO_rv_D_IN;
  wire lEcho_p_rv_core_toMMIO_rv_EN;

  // register lEcho_p_status
  reg [31 : 0] lEcho_p_status;
  wire [31 : 0] lEcho_p_status_D_IN;
  wire lEcho_p_status_EN;

  // register memslave_0_fifoReadAddrGenerator_addrReg
  reg [4 : 0] memslave_0_fifoReadAddrGenerator_addrReg;
  wire [4 : 0] memslave_0_fifoReadAddrGenerator_addrReg_D_IN;
  wire memslave_0_fifoReadAddrGenerator_addrReg_EN;

  // register memslave_0_fifoReadAddrGenerator_burstCountReg
  reg [9 : 0] memslave_0_fifoReadAddrGenerator_burstCountReg;
  wire [9 : 0] memslave_0_fifoReadAddrGenerator_burstCountReg_D_IN;
  wire memslave_0_fifoReadAddrGenerator_burstCountReg_EN;

  // register memslave_0_fifoReadAddrGenerator_isFirstReg
  reg memslave_0_fifoReadAddrGenerator_isFirstReg;
  wire memslave_0_fifoReadAddrGenerator_isFirstReg_D_IN,
       memslave_0_fifoReadAddrGenerator_isFirstReg_EN;

  // register memslave_0_fifoReadAddrGenerator_isLastReg
  reg memslave_0_fifoReadAddrGenerator_isLastReg;
  wire memslave_0_fifoReadAddrGenerator_isLastReg_D_IN,
       memslave_0_fifoReadAddrGenerator_isLastReg_EN;

  // register memslave_0_fifoWriteAddrGenerator_addrReg
  reg [4 : 0] memslave_0_fifoWriteAddrGenerator_addrReg;
  wire [4 : 0] memslave_0_fifoWriteAddrGenerator_addrReg_D_IN;
  wire memslave_0_fifoWriteAddrGenerator_addrReg_EN;

  // register memslave_0_fifoWriteAddrGenerator_burstCountReg
  reg [9 : 0] memslave_0_fifoWriteAddrGenerator_burstCountReg;
  wire [9 : 0] memslave_0_fifoWriteAddrGenerator_burstCountReg_D_IN;
  wire memslave_0_fifoWriteAddrGenerator_burstCountReg_EN;

  // register memslave_0_fifoWriteAddrGenerator_isFirstReg
  reg memslave_0_fifoWriteAddrGenerator_isFirstReg;
  wire memslave_0_fifoWriteAddrGenerator_isFirstReg_D_IN,
       memslave_0_fifoWriteAddrGenerator_isFirstReg_EN;

  // register memslave_0_fifoWriteAddrGenerator_isLastReg
  reg memslave_0_fifoWriteAddrGenerator_isLastReg;
  wire memslave_0_fifoWriteAddrGenerator_isLastReg_D_IN,
       memslave_0_fifoWriteAddrGenerator_isLastReg_EN;

  // register memslave_1_fifoReadAddrGenerator_addrReg
  reg [4 : 0] memslave_1_fifoReadAddrGenerator_addrReg;
  wire [4 : 0] memslave_1_fifoReadAddrGenerator_addrReg_D_IN;
  wire memslave_1_fifoReadAddrGenerator_addrReg_EN;

  // register memslave_1_fifoReadAddrGenerator_burstCountReg
  reg [9 : 0] memslave_1_fifoReadAddrGenerator_burstCountReg;
  wire [9 : 0] memslave_1_fifoReadAddrGenerator_burstCountReg_D_IN;
  wire memslave_1_fifoReadAddrGenerator_burstCountReg_EN;

  // register memslave_1_fifoReadAddrGenerator_isFirstReg
  reg memslave_1_fifoReadAddrGenerator_isFirstReg;
  wire memslave_1_fifoReadAddrGenerator_isFirstReg_D_IN,
       memslave_1_fifoReadAddrGenerator_isFirstReg_EN;

  // register memslave_1_fifoReadAddrGenerator_isLastReg
  reg memslave_1_fifoReadAddrGenerator_isLastReg;
  wire memslave_1_fifoReadAddrGenerator_isLastReg_D_IN,
       memslave_1_fifoReadAddrGenerator_isLastReg_EN;

  // register memslave_1_fifoWriteAddrGenerator_addrReg
  reg [4 : 0] memslave_1_fifoWriteAddrGenerator_addrReg;
  wire [4 : 0] memslave_1_fifoWriteAddrGenerator_addrReg_D_IN;
  wire memslave_1_fifoWriteAddrGenerator_addrReg_EN;

  // register memslave_1_fifoWriteAddrGenerator_burstCountReg
  reg [9 : 0] memslave_1_fifoWriteAddrGenerator_burstCountReg;
  wire [9 : 0] memslave_1_fifoWriteAddrGenerator_burstCountReg_D_IN;
  wire memslave_1_fifoWriteAddrGenerator_burstCountReg_EN;

  // register memslave_1_fifoWriteAddrGenerator_isFirstReg
  reg memslave_1_fifoWriteAddrGenerator_isFirstReg;
  wire memslave_1_fifoWriteAddrGenerator_isFirstReg_D_IN,
       memslave_1_fifoWriteAddrGenerator_isFirstReg_EN;

  // register memslave_1_fifoWriteAddrGenerator_isLastReg
  reg memslave_1_fifoWriteAddrGenerator_isLastReg;
  wire memslave_1_fifoWriteAddrGenerator_isLastReg_D_IN,
       memslave_1_fifoWriteAddrGenerator_isLastReg_EN;

  // ports of submodule ctrl_mux_rv_doneFifo
  reg [5 : 0] ctrl_mux_rv_doneFifo_D_IN;
  wire [5 : 0] ctrl_mux_rv_doneFifo_D_OUT;
  wire ctrl_mux_rv_doneFifo_CLR,
       ctrl_mux_rv_doneFifo_DEQ,
       ctrl_mux_rv_doneFifo_EMPTY_N,
       ctrl_mux_rv_doneFifo_ENQ,
       ctrl_mux_rv_doneFifo_FULL_N;

  // ports of submodule ctrl_mux_rv_readDataPipes_0_fifo
  wire [38 : 0] ctrl_mux_rv_readDataPipes_0_fifo_D_IN,
		ctrl_mux_rv_readDataPipes_0_fifo_D_OUT;
  wire ctrl_mux_rv_readDataPipes_0_fifo_CLR,
       ctrl_mux_rv_readDataPipes_0_fifo_DEQ,
       ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N,
       ctrl_mux_rv_readDataPipes_0_fifo_ENQ,
       ctrl_mux_rv_readDataPipes_0_fifo_FULL_N;

  // ports of submodule ctrl_mux_rv_readDataPipes_1_fifo
  wire [38 : 0] ctrl_mux_rv_readDataPipes_1_fifo_D_IN,
		ctrl_mux_rv_readDataPipes_1_fifo_D_OUT;
  wire ctrl_mux_rv_readDataPipes_1_fifo_CLR,
       ctrl_mux_rv_readDataPipes_1_fifo_DEQ,
       ctrl_mux_rv_readDataPipes_1_fifo_EMPTY_N,
       ctrl_mux_rv_readDataPipes_1_fifo_ENQ,
       ctrl_mux_rv_readDataPipes_1_fifo_FULL_N;

  // ports of submodule ctrl_mux_rv_read_data_funnel_buffs_0_0
  wire [38 : 0] ctrl_mux_rv_read_data_funnel_buffs_0_0_D_IN,
		ctrl_mux_rv_read_data_funnel_buffs_0_0_D_OUT;
  wire ctrl_mux_rv_read_data_funnel_buffs_0_0_CLR,
       ctrl_mux_rv_read_data_funnel_buffs_0_0_DEQ,
       ctrl_mux_rv_read_data_funnel_buffs_0_0_EMPTY_N,
       ctrl_mux_rv_read_data_funnel_buffs_0_0_ENQ,
       ctrl_mux_rv_read_data_funnel_buffs_0_0_FULL_N;

  // ports of submodule ctrl_mux_rv_read_data_funnel_buffs_0_1
  wire [38 : 0] ctrl_mux_rv_read_data_funnel_buffs_0_1_D_IN;
  wire ctrl_mux_rv_read_data_funnel_buffs_0_1_CLR,
       ctrl_mux_rv_read_data_funnel_buffs_0_1_DEQ,
       ctrl_mux_rv_read_data_funnel_buffs_0_1_ENQ;

  // ports of submodule ctrl_mux_rv_req_ars
  wire [27 : 0] ctrl_mux_rv_req_ars_D_IN, ctrl_mux_rv_req_ars_D_OUT;
  wire ctrl_mux_rv_req_ars_CLR,
       ctrl_mux_rv_req_ars_DEQ,
       ctrl_mux_rv_req_ars_EMPTY_N,
       ctrl_mux_rv_req_ars_ENQ,
       ctrl_mux_rv_req_ars_FULL_N;

  // ports of submodule ctrl_mux_rv_req_aws
  wire [27 : 0] ctrl_mux_rv_req_aws_D_IN, ctrl_mux_rv_req_aws_D_OUT;
  wire ctrl_mux_rv_req_aws_CLR,
       ctrl_mux_rv_req_aws_DEQ,
       ctrl_mux_rv_req_aws_EMPTY_N,
       ctrl_mux_rv_req_aws_ENQ,
       ctrl_mux_rv_req_aws_FULL_N;

  // ports of submodule ctrl_mux_rv_rs
  wire ctrl_mux_rv_rs_CLR,
       ctrl_mux_rv_rs_DEQ,
       ctrl_mux_rv_rs_D_IN,
       ctrl_mux_rv_rs_D_OUT,
       ctrl_mux_rv_rs_EMPTY_N,
       ctrl_mux_rv_rs_ENQ,
       ctrl_mux_rv_rs_FULL_N;

  // ports of submodule ctrl_mux_rv_writeDataPipes_0_fifo
  wire [38 : 0] ctrl_mux_rv_writeDataPipes_0_fifo_D_IN,
		ctrl_mux_rv_writeDataPipes_0_fifo_D_OUT;
  wire ctrl_mux_rv_writeDataPipes_0_fifo_CLR,
       ctrl_mux_rv_writeDataPipes_0_fifo_DEQ,
       ctrl_mux_rv_writeDataPipes_0_fifo_EMPTY_N,
       ctrl_mux_rv_writeDataPipes_0_fifo_ENQ,
       ctrl_mux_rv_writeDataPipes_0_fifo_FULL_N;

  // ports of submodule ctrl_mux_rv_writeDataPipes_1_fifo
  wire [38 : 0] ctrl_mux_rv_writeDataPipes_1_fifo_D_IN,
		ctrl_mux_rv_writeDataPipes_1_fifo_D_OUT;
  wire ctrl_mux_rv_writeDataPipes_1_fifo_CLR,
       ctrl_mux_rv_writeDataPipes_1_fifo_DEQ,
       ctrl_mux_rv_writeDataPipes_1_fifo_EMPTY_N,
       ctrl_mux_rv_writeDataPipes_1_fifo_ENQ,
       ctrl_mux_rv_writeDataPipes_1_fifo_FULL_N;

  // ports of submodule ctrl_mux_rv_write_data
  wire [39 : 0] ctrl_mux_rv_write_data_D_IN, ctrl_mux_rv_write_data_D_OUT;
  wire ctrl_mux_rv_write_data_CLR,
       ctrl_mux_rv_write_data_DEQ,
       ctrl_mux_rv_write_data_EMPTY_N,
       ctrl_mux_rv_write_data_ENQ,
       ctrl_mux_rv_write_data_FULL_N;

  // ports of submodule ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0
  wire [39 : 0] ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_D_IN,
		ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_D_OUT;
  wire ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_CLR,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_DEQ,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_EMPTY_N,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_ENQ,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_FULL_N;

  // ports of submodule ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1
  wire [39 : 0] ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_D_IN,
		ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_D_OUT;
  wire ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_CLR,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_DEQ,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_EMPTY_N,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_ENQ,
       ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_FULL_N;

  // ports of submodule ctrl_mux_rv_ws
  wire ctrl_mux_rv_ws_CLR,
       ctrl_mux_rv_ws_DEQ,
       ctrl_mux_rv_ws_D_IN,
       ctrl_mux_rv_ws_D_OUT,
       ctrl_mux_rv_ws_EMPTY_N,
       ctrl_mux_rv_ws_ENQ,
       ctrl_mux_rv_ws_FULL_N;

  // ports of submodule lEchoIndicationOutput
  wire [31 : 0] lEchoIndicationOutput_ifc_heard_v,
		lEchoIndicationOutput_portalIfc_indications_0_first,
		lEchoIndicationOutput_portalIfc_indications_1_first,
		lEchoIndicationOutput_portalIfc_intr_channel;
  wire [15 : 0] lEchoIndicationOutput_ifc_heard2_a,
		lEchoIndicationOutput_ifc_heard2_b,
		lEchoIndicationOutput_portalIfc_messageSize_size_methodNumber;
  wire lEchoIndicationOutput_EN_ifc_heard,
       lEchoIndicationOutput_EN_ifc_heard2,
       lEchoIndicationOutput_EN_portalIfc_indications_0_deq,
       lEchoIndicationOutput_EN_portalIfc_indications_1_deq,
       lEchoIndicationOutput_RDY_ifc_heard,
       lEchoIndicationOutput_RDY_ifc_heard2,
       lEchoIndicationOutput_RDY_portalIfc_indications_0_deq,
       lEchoIndicationOutput_RDY_portalIfc_indications_0_first,
       lEchoIndicationOutput_RDY_portalIfc_indications_1_deq,
       lEchoIndicationOutput_RDY_portalIfc_indications_1_first,
       lEchoIndicationOutput_portalIfc_indications_0_notEmpty,
       lEchoIndicationOutput_portalIfc_indications_1_notEmpty,
       lEchoIndicationOutput_portalIfc_intr_status;

  // ports of submodule lEchoRequestInput
  wire [31 : 0] lEchoRequestInput_pipes_say2_PipeOut_first,
		lEchoRequestInput_portalIfc_intr_channel,
		lEchoRequestInput_portalIfc_requests_0_enq_v,
		lEchoRequestInput_portalIfc_requests_1_enq_v,
		lEchoRequestInput_portalIfc_requests_2_enq_v;
  wire [15 : 0] lEchoRequestInput_portalIfc_messageSize_size_methodNumber;
  wire lEchoRequestInput_EN_pipes_say2_PipeOut_deq,
       lEchoRequestInput_EN_pipes_say_PipeOut_deq,
       lEchoRequestInput_EN_pipes_setLeds_PipeOut_deq,
       lEchoRequestInput_EN_portalIfc_requests_0_enq,
       lEchoRequestInput_EN_portalIfc_requests_1_enq,
       lEchoRequestInput_EN_portalIfc_requests_2_enq,
       lEchoRequestInput_RDY_pipes_say2_PipeOut_deq,
       lEchoRequestInput_RDY_pipes_say2_PipeOut_first,
       lEchoRequestInput_RDY_pipes_say_PipeOut_deq,
       lEchoRequestInput_RDY_pipes_setLeds_PipeOut_deq,
       lEchoRequestInput_RDY_portalIfc_requests_0_enq,
       lEchoRequestInput_RDY_portalIfc_requests_1_enq,
       lEchoRequestInput_RDY_portalIfc_requests_2_enq,
       lEchoRequestInput_portalIfc_intr_status,
       lEchoRequestInput_portalIfc_requests_0_notFull,
       lEchoRequestInput_portalIfc_requests_1_notFull,
       lEchoRequestInput_portalIfc_requests_2_notFull;

  // ports of submodule lEcho_delay
  wire [31 : 0] lEcho_delay_D_IN, lEcho_delay_D_OUT;
  wire lEcho_delay_CLR,
       lEcho_delay_DEQ,
       lEcho_delay_EMPTY_N,
       lEcho_delay_ENQ,
       lEcho_delay_FULL_N;

  // ports of submodule lEcho_delay2
  wire [31 : 0] lEcho_delay2_D_IN, lEcho_delay2_D_OUT;
  wire lEcho_delay2_CLR,
       lEcho_delay2_DEQ,
       lEcho_delay2_EMPTY_N,
       lEcho_delay2_ENQ,
       lEcho_delay2_FULL_N;

  // ports of submodule lEcho_p_bram_memory
  wire [31 : 0] lEcho_p_bram_memory_DIA,
		lEcho_p_bram_memory_DIB,
		lEcho_p_bram_memory_DOA,
		lEcho_p_bram_memory_DOB;
  wire [11 : 0] lEcho_p_bram_memory_ADDRA, lEcho_p_bram_memory_ADDRB;
  wire [3 : 0] lEcho_p_bram_memory_WEA, lEcho_p_bram_memory_WEB;
  wire lEcho_p_bram_memory_ENA, lEcho_p_bram_memory_ENB;

  // ports of submodule lEcho_p_bram_serverAdapterA_outDataCore
  wire [31 : 0] lEcho_p_bram_serverAdapterA_outDataCore_D_IN,
		lEcho_p_bram_serverAdapterA_outDataCore_D_OUT;
  wire lEcho_p_bram_serverAdapterA_outDataCore_CLR,
       lEcho_p_bram_serverAdapterA_outDataCore_DEQ,
       lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N,
       lEcho_p_bram_serverAdapterA_outDataCore_ENQ,
       lEcho_p_bram_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule lEcho_p_bram_serverAdapterB_outDataCore
  wire [31 : 0] lEcho_p_bram_serverAdapterB_outDataCore_D_IN,
		lEcho_p_bram_serverAdapterB_outDataCore_D_OUT;
  wire lEcho_p_bram_serverAdapterB_outDataCore_CLR,
       lEcho_p_bram_serverAdapterB_outDataCore_DEQ,
       lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N,
       lEcho_p_bram_serverAdapterB_outDataCore_ENQ,
       lEcho_p_bram_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule lEcho_p_mmioreq
  wire [67 : 0] lEcho_p_mmioreq_D_IN, lEcho_p_mmioreq_D_OUT;
  wire lEcho_p_mmioreq_CLR,
       lEcho_p_mmioreq_DEQ,
       lEcho_p_mmioreq_EMPTY_N,
       lEcho_p_mmioreq_ENQ,
       lEcho_p_mmioreq_FULL_N;

  // ports of submodule memslave_0_doneFifo
  wire [5 : 0] memslave_0_doneFifo_D_IN, memslave_0_doneFifo_D_OUT;
  wire memslave_0_doneFifo_CLR,
       memslave_0_doneFifo_DEQ,
       memslave_0_doneFifo_EMPTY_N,
       memslave_0_doneFifo_ENQ,
       memslave_0_doneFifo_FULL_N;

  // ports of submodule memslave_0_fifoReadAddrGenerator_addrBeatFifo
  wire [21 : 0] memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_IN,
		memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT;
  wire memslave_0_fifoReadAddrGenerator_addrBeatFifo_CLR,
       memslave_0_fifoReadAddrGenerator_addrBeatFifo_DEQ,
       memslave_0_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N,
       memslave_0_fifoReadAddrGenerator_addrBeatFifo_ENQ,
       memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N;

  // ports of submodule memslave_0_fifoReadAddrGenerator_requestFifo
  wire [20 : 0] memslave_0_fifoReadAddrGenerator_requestFifo_D_IN,
		memslave_0_fifoReadAddrGenerator_requestFifo_D_OUT;
  wire memslave_0_fifoReadAddrGenerator_requestFifo_CLR,
       memslave_0_fifoReadAddrGenerator_requestFifo_DEQ,
       memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N,
       memslave_0_fifoReadAddrGenerator_requestFifo_ENQ,
       memslave_0_fifoReadAddrGenerator_requestFifo_FULL_N;

  // ports of submodule memslave_0_fifoWriteAddrGenerator_addrBeatFifo
  wire [21 : 0] memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_IN,
		memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_OUT;
  wire memslave_0_fifoWriteAddrGenerator_addrBeatFifo_CLR,
       memslave_0_fifoWriteAddrGenerator_addrBeatFifo_DEQ,
       memslave_0_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N,
       memslave_0_fifoWriteAddrGenerator_addrBeatFifo_ENQ,
       memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N;

  // ports of submodule memslave_0_fifoWriteAddrGenerator_requestFifo
  wire [20 : 0] memslave_0_fifoWriteAddrGenerator_requestFifo_D_IN,
		memslave_0_fifoWriteAddrGenerator_requestFifo_D_OUT;
  wire memslave_0_fifoWriteAddrGenerator_requestFifo_CLR,
       memslave_0_fifoWriteAddrGenerator_requestFifo_DEQ,
       memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N,
       memslave_0_fifoWriteAddrGenerator_requestFifo_ENQ,
       memslave_0_fifoWriteAddrGenerator_requestFifo_FULL_N;

  // ports of submodule memslave_0_fifoWriteDoneFifo
  wire [5 : 0] memslave_0_fifoWriteDoneFifo_D_IN,
	       memslave_0_fifoWriteDoneFifo_D_OUT;
  wire memslave_0_fifoWriteDoneFifo_CLR,
       memslave_0_fifoWriteDoneFifo_DEQ,
       memslave_0_fifoWriteDoneFifo_EMPTY_N,
       memslave_0_fifoWriteDoneFifo_ENQ,
       memslave_0_fifoWriteDoneFifo_FULL_N;

  // ports of submodule memslave_0_req_ars
  wire [20 : 0] memslave_0_req_ars_D_IN, memslave_0_req_ars_D_OUT;
  wire memslave_0_req_ars_CLR,
       memslave_0_req_ars_DEQ,
       memslave_0_req_ars_EMPTY_N,
       memslave_0_req_ars_ENQ,
       memslave_0_req_ars_FULL_N;

  // ports of submodule memslave_0_req_aws
  wire [20 : 0] memslave_0_req_aws_D_IN, memslave_0_req_aws_D_OUT;
  wire memslave_0_req_aws_CLR,
       memslave_0_req_aws_DEQ,
       memslave_0_req_aws_EMPTY_N,
       memslave_0_req_aws_ENQ,
       memslave_0_req_aws_FULL_N;

  // ports of submodule memslave_0_rs
  wire memslave_0_rs_CLR,
       memslave_0_rs_DEQ,
       memslave_0_rs_D_IN,
       memslave_0_rs_D_OUT,
       memslave_0_rs_EMPTY_N,
       memslave_0_rs_ENQ,
       memslave_0_rs_FULL_N;

  // ports of submodule memslave_0_rsCtrl
  wire memslave_0_rsCtrl_CLR,
       memslave_0_rsCtrl_DEQ,
       memslave_0_rsCtrl_D_IN,
       memslave_0_rsCtrl_D_OUT,
       memslave_0_rsCtrl_EMPTY_N,
       memslave_0_rsCtrl_ENQ,
       memslave_0_rsCtrl_FULL_N;

  // ports of submodule memslave_0_rvFifo
  wire [38 : 0] memslave_0_rvFifo_D_IN, memslave_0_rvFifo_D_OUT;
  wire memslave_0_rvFifo_CLR,
       memslave_0_rvFifo_DEQ,
       memslave_0_rvFifo_EMPTY_N,
       memslave_0_rvFifo_ENQ,
       memslave_0_rvFifo_FULL_N;

  // ports of submodule memslave_0_ws
  wire memslave_0_ws_CLR,
       memslave_0_ws_DEQ,
       memslave_0_ws_D_IN,
       memslave_0_ws_EMPTY_N,
       memslave_0_ws_ENQ,
       memslave_0_ws_FULL_N;

  // ports of submodule memslave_0_wsCtrl
  wire memslave_0_wsCtrl_CLR,
       memslave_0_wsCtrl_DEQ,
       memslave_0_wsCtrl_D_IN,
       memslave_0_wsCtrl_D_OUT,
       memslave_0_wsCtrl_EMPTY_N,
       memslave_0_wsCtrl_ENQ,
       memslave_0_wsCtrl_FULL_N;

  // ports of submodule memslave_1_doneFifo
  wire [5 : 0] memslave_1_doneFifo_D_IN, memslave_1_doneFifo_D_OUT;
  wire memslave_1_doneFifo_CLR,
       memslave_1_doneFifo_DEQ,
       memslave_1_doneFifo_EMPTY_N,
       memslave_1_doneFifo_ENQ,
       memslave_1_doneFifo_FULL_N;

  // ports of submodule memslave_1_fifoReadAddrGenerator_addrBeatFifo
  wire [21 : 0] memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_IN,
		memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT;
  wire memslave_1_fifoReadAddrGenerator_addrBeatFifo_CLR,
       memslave_1_fifoReadAddrGenerator_addrBeatFifo_DEQ,
       memslave_1_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N,
       memslave_1_fifoReadAddrGenerator_addrBeatFifo_ENQ,
       memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N;

  // ports of submodule memslave_1_fifoReadAddrGenerator_requestFifo
  wire [20 : 0] memslave_1_fifoReadAddrGenerator_requestFifo_D_IN,
		memslave_1_fifoReadAddrGenerator_requestFifo_D_OUT;
  wire memslave_1_fifoReadAddrGenerator_requestFifo_CLR,
       memslave_1_fifoReadAddrGenerator_requestFifo_DEQ,
       memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N,
       memslave_1_fifoReadAddrGenerator_requestFifo_ENQ,
       memslave_1_fifoReadAddrGenerator_requestFifo_FULL_N;

  // ports of submodule memslave_1_fifoWriteAddrGenerator_addrBeatFifo
  wire [21 : 0] memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_IN,
		memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_OUT;
  wire memslave_1_fifoWriteAddrGenerator_addrBeatFifo_CLR,
       memslave_1_fifoWriteAddrGenerator_addrBeatFifo_DEQ,
       memslave_1_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N,
       memslave_1_fifoWriteAddrGenerator_addrBeatFifo_ENQ,
       memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N;

  // ports of submodule memslave_1_fifoWriteAddrGenerator_requestFifo
  wire [20 : 0] memslave_1_fifoWriteAddrGenerator_requestFifo_D_IN,
		memslave_1_fifoWriteAddrGenerator_requestFifo_D_OUT;
  wire memslave_1_fifoWriteAddrGenerator_requestFifo_CLR,
       memslave_1_fifoWriteAddrGenerator_requestFifo_DEQ,
       memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N,
       memslave_1_fifoWriteAddrGenerator_requestFifo_ENQ,
       memslave_1_fifoWriteAddrGenerator_requestFifo_FULL_N;

  // ports of submodule memslave_1_fifoWriteDoneFifo
  wire [5 : 0] memslave_1_fifoWriteDoneFifo_D_IN,
	       memslave_1_fifoWriteDoneFifo_D_OUT;
  wire memslave_1_fifoWriteDoneFifo_CLR,
       memslave_1_fifoWriteDoneFifo_DEQ,
       memslave_1_fifoWriteDoneFifo_EMPTY_N,
       memslave_1_fifoWriteDoneFifo_ENQ,
       memslave_1_fifoWriteDoneFifo_FULL_N;

  // ports of submodule memslave_1_req_ars
  wire [20 : 0] memslave_1_req_ars_D_IN, memslave_1_req_ars_D_OUT;
  wire memslave_1_req_ars_CLR,
       memslave_1_req_ars_DEQ,
       memslave_1_req_ars_EMPTY_N,
       memslave_1_req_ars_ENQ,
       memslave_1_req_ars_FULL_N;

  // ports of submodule memslave_1_req_aws
  wire [20 : 0] memslave_1_req_aws_D_IN, memslave_1_req_aws_D_OUT;
  wire memslave_1_req_aws_CLR,
       memslave_1_req_aws_DEQ,
       memslave_1_req_aws_EMPTY_N,
       memslave_1_req_aws_ENQ,
       memslave_1_req_aws_FULL_N;

  // ports of submodule memslave_1_rs
  wire [1 : 0] memslave_1_rs_D_IN, memslave_1_rs_D_OUT;
  wire memslave_1_rs_CLR,
       memslave_1_rs_DEQ,
       memslave_1_rs_EMPTY_N,
       memslave_1_rs_ENQ,
       memslave_1_rs_FULL_N;

  // ports of submodule memslave_1_rsCtrl
  wire memslave_1_rsCtrl_CLR,
       memslave_1_rsCtrl_DEQ,
       memslave_1_rsCtrl_D_IN,
       memslave_1_rsCtrl_D_OUT,
       memslave_1_rsCtrl_EMPTY_N,
       memslave_1_rsCtrl_ENQ,
       memslave_1_rsCtrl_FULL_N;

  // ports of submodule memslave_1_rvFifo
  wire [38 : 0] memslave_1_rvFifo_D_IN, memslave_1_rvFifo_D_OUT;
  wire memslave_1_rvFifo_CLR,
       memslave_1_rvFifo_DEQ,
       memslave_1_rvFifo_EMPTY_N,
       memslave_1_rvFifo_ENQ,
       memslave_1_rvFifo_FULL_N;

  // ports of submodule memslave_1_writeDataFifo
  wire [38 : 0] memslave_1_writeDataFifo_D_IN, memslave_1_writeDataFifo_D_OUT;
  wire memslave_1_writeDataFifo_CLR,
       memslave_1_writeDataFifo_DEQ,
       memslave_1_writeDataFifo_EMPTY_N,
       memslave_1_writeDataFifo_ENQ,
       memslave_1_writeDataFifo_FULL_N;

  // ports of submodule memslave_1_ws
  wire [1 : 0] memslave_1_ws_D_IN, memslave_1_ws_D_OUT;
  wire memslave_1_ws_CLR,
       memslave_1_ws_DEQ,
       memslave_1_ws_EMPTY_N,
       memslave_1_ws_ENQ,
       memslave_1_ws_FULL_N;

  // ports of submodule memslave_1_wsCtrl
  wire memslave_1_wsCtrl_CLR,
       memslave_1_wsCtrl_DEQ,
       memslave_1_wsCtrl_D_IN,
       memslave_1_wsCtrl_D_OUT,
       memslave_1_wsCtrl_EMPTY_N,
       memslave_1_wsCtrl_ENQ,
       memslave_1_wsCtrl_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_ctrl_mux_rv_read_data_funnel_funnel,
       WILL_FIRE_RL_ctrl_mux_rv_req_ar,
       WILL_FIRE_RL_ctrl_mux_rv_req_aw,
       WILL_FIRE_RL_ctrl_mux_rv_writeDataPipes_0_connect,
       WILL_FIRE_RL_ctrl_mux_rv_write_done_rule,
       WILL_FIRE_RL_lEcho_p_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_lEcho_p_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_lEcho_p_requestMMIO,
       WILL_FIRE_RL_lEcho_p_rv_core_decode,
       WILL_FIRE_RL_lEcho_p_rv_core_execute,
       WILL_FIRE_RL_lEcho_p_rv_core_fetch,
       WILL_FIRE_RL_lEcho_p_rv_core_writeback,
       WILL_FIRE_RL_memslave_0_rvrule,
       WILL_FIRE_RL_memslave_1_rvrule,
       WILL_FIRE_RL_memslave_1_writeDataRule;

  // inputs to muxes for submodule ports
  wire MUX_lEcho_p_rv_core_pc_write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] rd_val__h11214,
	       rs1__h8457,
	       rs2__h8458,
	       v__h11573,
	       v__h16829,
	       v__h16980,
	       v__h20164,
	       x1_avValue_data__h17159;
  reg [3 : 0] CASE_lEcho_p_rv_core_dInst_BITS_13_TO_12_0b0_0_ETC__q2;
  reg [2 : 0] CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16;
  reg CASE_ctrl_mux_rv_rs_first__089_0_memslave_0_re_ETC___d1100,
      CASE_ctrl_mux_rv_wsD_OUT_0_memslave_0_doneFif_ETC__q7,
      CASE_ctrl_mux_rv_ws_first__059_0_memslave_0_re_ETC___d1070,
      CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q11,
      CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q12,
      CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q13,
      CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q14,
      CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q15,
      CASE_lEcho_p_rv_core_mem_business_BITS_5_TO_3__ETC__q10,
      CASE_lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_ETC__q3,
      CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q5,
      CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q6,
      CASE_memslave_1_wsD_OUT_0_lEchoRequestInputR_ETC__q4,
      IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439,
      x__h17202,
      x__h20298;
  wire [31 : 0] IF_lEcho_p_rv_core_dInst_22_BIT_35_29_AND_lEch_ETC___d364,
		_theResult___snd__h10817,
		_theResult___snd__h10883,
		_theResult___snd__h10902,
		alu_src2__h11211,
		data__h9660,
		imm__h9658,
		incPC__h10719,
		lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367,
		mem_data__h11845,
		mem_data__h11846,
		nextPC__h10819,
		nextPC__h10885,
		nextPc__h10702,
		v___1__h16913,
		v___1__h20151,
		v___1__h20243,
		v__h11517,
		x1_avValue_data__h17175,
		x__h10534,
		x__h10535,
		x__h12970,
		x__h13367;
  wire [20 : 0] x__h10130;
  wire [15 : 0] mem_data1846_BITS_15_TO_0__q9;
  wire [12 : 0] x__h9969;
  wire [11 : 0] lEcho_p_rv_core_dInst_BITS_31_TO_20__q1, x__h9900;
  wire [9 : 0] burstCount___1__h14997,
	       burstCount___1__h15548,
	       burstCount___1__h17864,
	       burstCount___1__h18415,
	       burstCount__h14966,
	       burstCount__h15517,
	       burstCount__h17833,
	       burstCount__h18384;
  wire [7 : 0] mem_data1846_BITS_7_TO_0__q8;
  wire [6 : 0] x__h25214, x__h25614;
  wire [4 : 0] addr__h14964,
	       addr__h15515,
	       addr__h17831,
	       addr__h18382,
	       shift_amount__h9750,
	       x__h11894;
  wire [3 : 0] req_byte_en__h10343;
  wire [2 : 0] lEcho_p_bram_serverAdapterA_cnt_6_PLUS_IF_lEch_ETC___d32,
	       lEcho_p_bram_serverAdapterB_cnt_5_PLUS_IF_lEch_ETC___d91;
  wire IF_lEcho_p_rv_core_mem_business_87_BIT_0_88_TH_ETC___d493,
       IF_memslave_0_fifoReadAddrGenerator_isFirstReg_ETC___d718,
       IF_memslave_0_fifoWriteAddrGenerator_isFirstRe_ETC___d740,
       IF_memslave_1_fifoReadAddrGenerator_isFirstReg_ETC___d851,
       IF_memslave_1_fifoWriteAddrGenerator_isFirstRe_ETC___d873,
       NOT_IF_lEcho_p_rv_core_dInst_22_BITS_6_TO_4_13_ETC___d446,
       NOT_ctrl_mux_rv_req_ars_first__104_BITS_15_TO__ETC___d1108,
       NOT_ctrl_mux_rv_req_aws_first__074_BITS_15_TO__ETC___d1078,
       NOT_memslave_0_fifoReadAddrGenerator_addrBeatF_ETC___d778,
       lEcho_p_rv_core_dInst_22_BIT_6_23_OR_NOT_lEcho_ETC___d381,
       lEcho_p_rv_core_dInst_22_BIT_6_23_OR_NOT_lEcho_ETC___d509,
       lEcho_p_rv_core_rv1_28_EQ_lEcho_p_rv_core_rv2_02___d425,
       lEcho_p_rv_core_rv1_28_SLT_lEcho_p_rv_core_rv2_02___d429,
       lEcho_p_rv_core_rv1_28_ULT_lEcho_p_rv_core_rv2_02___d433,
       memslave_1_fifoWriteAddrGenerator_addrBeatFifo_ETC___d909,
       memslave_1_ws_i_notEmpty__78_AND_CASE_memslave_ETC___d906,
       x__h11365,
       x__h11372;

  // action method slave_read_server_readReq_put
  assign RDY_slave_read_server_readReq_put =
	     ctrl_mux_rv_req_ars_FULL_N && ctrl_mux_rv_rs_FULL_N ;

  // actionvalue method slave_read_server_readData_get
  assign slave_read_server_readData_get =
	     ctrl_mux_rv_read_data_funnel_buffs_0_0_D_OUT ;
  assign RDY_slave_read_server_readData_get =
	     ctrl_mux_rv_rs_EMPTY_N &&
	     ctrl_mux_rv_read_data_funnel_buffs_0_0_EMPTY_N ;

  // action method slave_write_server_writeReq_put
  assign RDY_slave_write_server_writeReq_put =
	     ctrl_mux_rv_req_aws_FULL_N && ctrl_mux_rv_ws_FULL_N ;

  // action method slave_write_server_writeData_put
  assign RDY_slave_write_server_writeData_put =
	     !ctrl_mux_rv_lastWriteDataSeen && ctrl_mux_rv_ws_EMPTY_N &&
	     ctrl_mux_rv_write_data_FULL_N ;

  // actionvalue method slave_write_server_writeDone_get
  assign slave_write_server_writeDone_get = ctrl_mux_rv_doneFifo_D_OUT ;
  assign RDY_slave_write_server_writeDone_get = ctrl_mux_rv_doneFifo_EMPTY_N ;

  // value method interrupt_0__read
  assign interrupt_0__read =
	     lEchoIndicationOutput_portalIfc_intr_status &&
	     ctrlPort_0_interruptEnableReg ;
  assign RDY_interrupt_0__read = 1'd1 ;

  // value method interrupt_1__read
  assign interrupt_1__read =
	     lEchoRequestInput_portalIfc_intr_status &&
	     ctrlPort_1_interruptEnableReg ;
  assign RDY_interrupt_1__read = 1'd1 ;

  // value method interrupt_2__read
  assign interrupt_2__read = 1'd0 ;
  assign RDY_interrupt_2__read = 1'd1 ;

  // value method interrupt_3__read
  assign interrupt_3__read = 1'd0 ;
  assign RDY_interrupt_3__read = 1'd1 ;

  // value method interrupt_4__read
  assign interrupt_4__read = 1'd0 ;
  assign RDY_interrupt_4__read = 1'd1 ;

  // value method interrupt_5__read
  assign interrupt_5__read = 1'd0 ;
  assign RDY_interrupt_5__read = 1'd1 ;

  // value method interrupt_6__read
  assign interrupt_6__read = 1'd0 ;
  assign RDY_interrupt_6__read = 1'd1 ;

  // value method interrupt_7__read
  assign interrupt_7__read = 1'd0 ;
  assign RDY_interrupt_7__read = 1'd1 ;

  // value method interrupt_8__read
  assign interrupt_8__read = 1'd0 ;
  assign RDY_interrupt_8__read = 1'd1 ;

  // value method interrupt_9__read
  assign interrupt_9__read = 1'd0 ;
  assign RDY_interrupt_9__read = 1'd1 ;

  // value method interrupt_10__read
  assign interrupt_10__read = 1'd0 ;
  assign RDY_interrupt_10__read = 1'd1 ;

  // value method interrupt_11__read
  assign interrupt_11__read = 1'd0 ;
  assign RDY_interrupt_11__read = 1'd1 ;

  // value method interrupt_12__read
  assign interrupt_12__read = 1'd0 ;
  assign RDY_interrupt_12__read = 1'd1 ;

  // value method interrupt_13__read
  assign interrupt_13__read = 1'd0 ;
  assign RDY_interrupt_13__read = 1'd1 ;

  // value method interrupt_14__read
  assign interrupt_14__read = 1'd0 ;
  assign RDY_interrupt_14__read = 1'd1 ;

  // value method interrupt_15__read
  assign interrupt_15__read = 1'd0 ;
  assign RDY_interrupt_15__read = 1'd1 ;

  // actionvalue method readers_0_readReq_get
  assign readers_0_readReq_get = 88'hAAAAAAAAAAAAAAAAAAAAAA ;
  assign RDY_readers_0_readReq_get = 1'd0 ;

  // action method readers_0_readData_put
  assign RDY_readers_0_readData_put = 1'd0 ;

  // actionvalue method readers_1_readReq_get
  assign readers_1_readReq_get = 88'hAAAAAAAAAAAAAAAAAAAAAA ;
  assign RDY_readers_1_readReq_get = 1'd0 ;

  // action method readers_1_readData_put
  assign RDY_readers_1_readData_put = 1'd0 ;

  // actionvalue method writers_0_writeReq_get
  assign writers_0_writeReq_get = 88'hAAAAAAAAAAAAAAAAAAAAAA ;
  assign RDY_writers_0_writeReq_get = 1'd0 ;

  // actionvalue method writers_0_writeData_get
  assign writers_0_writeData_get = 71'h2AAAAAAAAAAAAAAAAA ;
  assign RDY_writers_0_writeData_get = 1'd0 ;

  // action method writers_0_writeDone_put
  assign RDY_writers_0_writeDone_put = 1'd0 ;

  // actionvalue method writers_1_writeReq_get
  assign writers_1_writeReq_get = 88'hAAAAAAAAAAAAAAAAAAAAAA ;
  assign RDY_writers_1_writeReq_get = 1'd0 ;

  // actionvalue method writers_1_writeData_get
  assign writers_1_writeData_get = 71'h2AAAAAAAAAAAAAAAAA ;
  assign RDY_writers_1_writeData_get = 1'd0 ;

  // action method writers_1_writeDone_put
  assign RDY_writers_1_writeDone_put = 1'd0 ;

  // submodule ctrl_mux_rv_doneFifo
  FIFO1 #(.width(32'd6), .guarded(1'd1)) ctrl_mux_rv_doneFifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ctrl_mux_rv_doneFifo_D_IN),
							      .ENQ(ctrl_mux_rv_doneFifo_ENQ),
							      .DEQ(ctrl_mux_rv_doneFifo_DEQ),
							      .CLR(ctrl_mux_rv_doneFifo_CLR),
							      .D_OUT(ctrl_mux_rv_doneFifo_D_OUT),
							      .FULL_N(ctrl_mux_rv_doneFifo_FULL_N),
							      .EMPTY_N(ctrl_mux_rv_doneFifo_EMPTY_N));

  // submodule ctrl_mux_rv_readDataPipes_0_fifo
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) ctrl_mux_rv_readDataPipes_0_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ctrl_mux_rv_readDataPipes_0_fifo_D_IN),
							   .ENQ(ctrl_mux_rv_readDataPipes_0_fifo_ENQ),
							   .DEQ(ctrl_mux_rv_readDataPipes_0_fifo_DEQ),
							   .CLR(ctrl_mux_rv_readDataPipes_0_fifo_CLR),
							   .D_OUT(ctrl_mux_rv_readDataPipes_0_fifo_D_OUT),
							   .FULL_N(ctrl_mux_rv_readDataPipes_0_fifo_FULL_N),
							   .EMPTY_N(ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N));

  // submodule ctrl_mux_rv_readDataPipes_1_fifo
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) ctrl_mux_rv_readDataPipes_1_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ctrl_mux_rv_readDataPipes_1_fifo_D_IN),
							   .ENQ(ctrl_mux_rv_readDataPipes_1_fifo_ENQ),
							   .DEQ(ctrl_mux_rv_readDataPipes_1_fifo_DEQ),
							   .CLR(ctrl_mux_rv_readDataPipes_1_fifo_CLR),
							   .D_OUT(ctrl_mux_rv_readDataPipes_1_fifo_D_OUT),
							   .FULL_N(ctrl_mux_rv_readDataPipes_1_fifo_FULL_N),
							   .EMPTY_N(ctrl_mux_rv_readDataPipes_1_fifo_EMPTY_N));

  // submodule ctrl_mux_rv_read_data_funnel_buffs_0_0
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) ctrl_mux_rv_read_data_funnel_buffs_0_0(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ctrl_mux_rv_read_data_funnel_buffs_0_0_D_IN),
								 .ENQ(ctrl_mux_rv_read_data_funnel_buffs_0_0_ENQ),
								 .DEQ(ctrl_mux_rv_read_data_funnel_buffs_0_0_DEQ),
								 .CLR(ctrl_mux_rv_read_data_funnel_buffs_0_0_CLR),
								 .D_OUT(ctrl_mux_rv_read_data_funnel_buffs_0_0_D_OUT),
								 .FULL_N(ctrl_mux_rv_read_data_funnel_buffs_0_0_FULL_N),
								 .EMPTY_N(ctrl_mux_rv_read_data_funnel_buffs_0_0_EMPTY_N));

  // submodule ctrl_mux_rv_read_data_funnel_buffs_0_1
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) ctrl_mux_rv_read_data_funnel_buffs_0_1(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ctrl_mux_rv_read_data_funnel_buffs_0_1_D_IN),
								 .ENQ(ctrl_mux_rv_read_data_funnel_buffs_0_1_ENQ),
								 .DEQ(ctrl_mux_rv_read_data_funnel_buffs_0_1_DEQ),
								 .CLR(ctrl_mux_rv_read_data_funnel_buffs_0_1_CLR),
								 .D_OUT(),
								 .FULL_N(),
								 .EMPTY_N());

  // submodule ctrl_mux_rv_req_ars
  FIFO1 #(.width(32'd28), .guarded(1'd1)) ctrl_mux_rv_req_ars(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ctrl_mux_rv_req_ars_D_IN),
							      .ENQ(ctrl_mux_rv_req_ars_ENQ),
							      .DEQ(ctrl_mux_rv_req_ars_DEQ),
							      .CLR(ctrl_mux_rv_req_ars_CLR),
							      .D_OUT(ctrl_mux_rv_req_ars_D_OUT),
							      .FULL_N(ctrl_mux_rv_req_ars_FULL_N),
							      .EMPTY_N(ctrl_mux_rv_req_ars_EMPTY_N));

  // submodule ctrl_mux_rv_req_aws
  FIFO1 #(.width(32'd28), .guarded(1'd1)) ctrl_mux_rv_req_aws(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ctrl_mux_rv_req_aws_D_IN),
							      .ENQ(ctrl_mux_rv_req_aws_ENQ),
							      .DEQ(ctrl_mux_rv_req_aws_DEQ),
							      .CLR(ctrl_mux_rv_req_aws_CLR),
							      .D_OUT(ctrl_mux_rv_req_aws_D_OUT),
							      .FULL_N(ctrl_mux_rv_req_aws_FULL_N),
							      .EMPTY_N(ctrl_mux_rv_req_aws_EMPTY_N));

  // submodule ctrl_mux_rv_rs
  FIFO1 #(.width(32'd1), .guarded(1'd1)) ctrl_mux_rv_rs(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ctrl_mux_rv_rs_D_IN),
							.ENQ(ctrl_mux_rv_rs_ENQ),
							.DEQ(ctrl_mux_rv_rs_DEQ),
							.CLR(ctrl_mux_rv_rs_CLR),
							.D_OUT(ctrl_mux_rv_rs_D_OUT),
							.FULL_N(ctrl_mux_rv_rs_FULL_N),
							.EMPTY_N(ctrl_mux_rv_rs_EMPTY_N));

  // submodule ctrl_mux_rv_writeDataPipes_0_fifo
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) ctrl_mux_rv_writeDataPipes_0_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ctrl_mux_rv_writeDataPipes_0_fifo_D_IN),
							    .ENQ(ctrl_mux_rv_writeDataPipes_0_fifo_ENQ),
							    .DEQ(ctrl_mux_rv_writeDataPipes_0_fifo_DEQ),
							    .CLR(ctrl_mux_rv_writeDataPipes_0_fifo_CLR),
							    .D_OUT(ctrl_mux_rv_writeDataPipes_0_fifo_D_OUT),
							    .FULL_N(ctrl_mux_rv_writeDataPipes_0_fifo_FULL_N),
							    .EMPTY_N(ctrl_mux_rv_writeDataPipes_0_fifo_EMPTY_N));

  // submodule ctrl_mux_rv_writeDataPipes_1_fifo
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) ctrl_mux_rv_writeDataPipes_1_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ctrl_mux_rv_writeDataPipes_1_fifo_D_IN),
							    .ENQ(ctrl_mux_rv_writeDataPipes_1_fifo_ENQ),
							    .DEQ(ctrl_mux_rv_writeDataPipes_1_fifo_DEQ),
							    .CLR(ctrl_mux_rv_writeDataPipes_1_fifo_CLR),
							    .D_OUT(ctrl_mux_rv_writeDataPipes_1_fifo_D_OUT),
							    .FULL_N(ctrl_mux_rv_writeDataPipes_1_fifo_FULL_N),
							    .EMPTY_N(ctrl_mux_rv_writeDataPipes_1_fifo_EMPTY_N));

  // submodule ctrl_mux_rv_write_data
  FIFO2 #(.width(32'd40), .guarded(1'd1)) ctrl_mux_rv_write_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ctrl_mux_rv_write_data_D_IN),
								 .ENQ(ctrl_mux_rv_write_data_ENQ),
								 .DEQ(ctrl_mux_rv_write_data_DEQ),
								 .CLR(ctrl_mux_rv_write_data_CLR),
								 .D_OUT(ctrl_mux_rv_write_data_D_OUT),
								 .FULL_N(ctrl_mux_rv_write_data_FULL_N),
								 .EMPTY_N(ctrl_mux_rv_write_data_EMPTY_N));

  // submodule ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0
  FIFO2 #(.width(32'd40),
	  .guarded(1'd1)) ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0(.RST(RST_N),
									.CLK(CLK),
									.D_IN(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_D_IN),
									.ENQ(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_ENQ),
									.DEQ(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_DEQ),
									.CLR(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_CLR),
									.D_OUT(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_D_OUT),
									.FULL_N(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_FULL_N),
									.EMPTY_N(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_EMPTY_N));

  // submodule ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1
  FIFO2 #(.width(32'd40),
	  .guarded(1'd1)) ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1(.RST(RST_N),
									.CLK(CLK),
									.D_IN(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_D_IN),
									.ENQ(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_ENQ),
									.DEQ(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_DEQ),
									.CLR(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_CLR),
									.D_OUT(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_D_OUT),
									.FULL_N(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_FULL_N),
									.EMPTY_N(ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_EMPTY_N));

  // submodule ctrl_mux_rv_ws
  FIFO1 #(.width(32'd1), .guarded(1'd1)) ctrl_mux_rv_ws(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ctrl_mux_rv_ws_D_IN),
							.ENQ(ctrl_mux_rv_ws_ENQ),
							.DEQ(ctrl_mux_rv_ws_DEQ),
							.CLR(ctrl_mux_rv_ws_CLR),
							.D_OUT(ctrl_mux_rv_ws_D_OUT),
							.FULL_N(ctrl_mux_rv_ws_FULL_N),
							.EMPTY_N(ctrl_mux_rv_ws_EMPTY_N));

  // submodule lEchoIndicationOutput
  mkEchoIndicationOutput lEchoIndicationOutput(.CLK(CLK),
					       .RST_N(RST_N),
					       .ifc_heard2_a(lEchoIndicationOutput_ifc_heard2_a),
					       .ifc_heard2_b(lEchoIndicationOutput_ifc_heard2_b),
					       .ifc_heard_v(lEchoIndicationOutput_ifc_heard_v),
					       .portalIfc_messageSize_size_methodNumber(lEchoIndicationOutput_portalIfc_messageSize_size_methodNumber),
					       .EN_portalIfc_indications_0_deq(lEchoIndicationOutput_EN_portalIfc_indications_0_deq),
					       .EN_portalIfc_indications_1_deq(lEchoIndicationOutput_EN_portalIfc_indications_1_deq),
					       .EN_ifc_heard(lEchoIndicationOutput_EN_ifc_heard),
					       .EN_ifc_heard2(lEchoIndicationOutput_EN_ifc_heard2),
					       .portalIfc_messageSize_size(),
					       .RDY_portalIfc_messageSize_size(),
					       .portalIfc_indications_0_first(lEchoIndicationOutput_portalIfc_indications_0_first),
					       .RDY_portalIfc_indications_0_first(lEchoIndicationOutput_RDY_portalIfc_indications_0_first),
					       .RDY_portalIfc_indications_0_deq(lEchoIndicationOutput_RDY_portalIfc_indications_0_deq),
					       .portalIfc_indications_0_notEmpty(lEchoIndicationOutput_portalIfc_indications_0_notEmpty),
					       .RDY_portalIfc_indications_0_notEmpty(),
					       .portalIfc_indications_1_first(lEchoIndicationOutput_portalIfc_indications_1_first),
					       .RDY_portalIfc_indications_1_first(lEchoIndicationOutput_RDY_portalIfc_indications_1_first),
					       .RDY_portalIfc_indications_1_deq(lEchoIndicationOutput_RDY_portalIfc_indications_1_deq),
					       .portalIfc_indications_1_notEmpty(lEchoIndicationOutput_portalIfc_indications_1_notEmpty),
					       .RDY_portalIfc_indications_1_notEmpty(),
					       .portalIfc_intr_status(lEchoIndicationOutput_portalIfc_intr_status),
					       .RDY_portalIfc_intr_status(),
					       .portalIfc_intr_channel(lEchoIndicationOutput_portalIfc_intr_channel),
					       .RDY_portalIfc_intr_channel(),
					       .RDY_ifc_heard(lEchoIndicationOutput_RDY_ifc_heard),
					       .RDY_ifc_heard2(lEchoIndicationOutput_RDY_ifc_heard2));

  // submodule lEchoRequestInput
  mkEchoRequestInput lEchoRequestInput(.CLK(CLK),
				       .RST_N(RST_N),
				       .portalIfc_messageSize_size_methodNumber(lEchoRequestInput_portalIfc_messageSize_size_methodNumber),
				       .portalIfc_requests_0_enq_v(lEchoRequestInput_portalIfc_requests_0_enq_v),
				       .portalIfc_requests_1_enq_v(lEchoRequestInput_portalIfc_requests_1_enq_v),
				       .portalIfc_requests_2_enq_v(lEchoRequestInput_portalIfc_requests_2_enq_v),
				       .EN_portalIfc_requests_0_enq(lEchoRequestInput_EN_portalIfc_requests_0_enq),
				       .EN_portalIfc_requests_1_enq(lEchoRequestInput_EN_portalIfc_requests_1_enq),
				       .EN_portalIfc_requests_2_enq(lEchoRequestInput_EN_portalIfc_requests_2_enq),
				       .EN_pipes_say_PipeOut_deq(lEchoRequestInput_EN_pipes_say_PipeOut_deq),
				       .EN_pipes_say2_PipeOut_deq(lEchoRequestInput_EN_pipes_say2_PipeOut_deq),
				       .EN_pipes_setLeds_PipeOut_deq(lEchoRequestInput_EN_pipes_setLeds_PipeOut_deq),
				       .portalIfc_messageSize_size(),
				       .RDY_portalIfc_messageSize_size(),
				       .RDY_portalIfc_requests_0_enq(lEchoRequestInput_RDY_portalIfc_requests_0_enq),
				       .portalIfc_requests_0_notFull(lEchoRequestInput_portalIfc_requests_0_notFull),
				       .RDY_portalIfc_requests_0_notFull(),
				       .RDY_portalIfc_requests_1_enq(lEchoRequestInput_RDY_portalIfc_requests_1_enq),
				       .portalIfc_requests_1_notFull(lEchoRequestInput_portalIfc_requests_1_notFull),
				       .RDY_portalIfc_requests_1_notFull(),
				       .RDY_portalIfc_requests_2_enq(lEchoRequestInput_RDY_portalIfc_requests_2_enq),
				       .portalIfc_requests_2_notFull(lEchoRequestInput_portalIfc_requests_2_notFull),
				       .RDY_portalIfc_requests_2_notFull(),
				       .portalIfc_intr_status(lEchoRequestInput_portalIfc_intr_status),
				       .RDY_portalIfc_intr_status(),
				       .portalIfc_intr_channel(lEchoRequestInput_portalIfc_intr_channel),
				       .RDY_portalIfc_intr_channel(),
				       .pipes_say_PipeOut_first(),
				       .RDY_pipes_say_PipeOut_first(),
				       .RDY_pipes_say_PipeOut_deq(lEchoRequestInput_RDY_pipes_say_PipeOut_deq),
				       .pipes_say_PipeOut_notEmpty(),
				       .RDY_pipes_say_PipeOut_notEmpty(),
				       .pipes_say2_PipeOut_first(lEchoRequestInput_pipes_say2_PipeOut_first),
				       .RDY_pipes_say2_PipeOut_first(lEchoRequestInput_RDY_pipes_say2_PipeOut_first),
				       .RDY_pipes_say2_PipeOut_deq(lEchoRequestInput_RDY_pipes_say2_PipeOut_deq),
				       .pipes_say2_PipeOut_notEmpty(),
				       .RDY_pipes_say2_PipeOut_notEmpty(),
				       .pipes_setLeds_PipeOut_first(),
				       .RDY_pipes_setLeds_PipeOut_first(),
				       .RDY_pipes_setLeds_PipeOut_deq(lEchoRequestInput_RDY_pipes_setLeds_PipeOut_deq),
				       .pipes_setLeds_PipeOut_notEmpty(),
				       .RDY_pipes_setLeds_PipeOut_notEmpty());

  // submodule lEcho_delay
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) lEcho_delay(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(lEcho_delay_D_IN),
					  .ENQ(lEcho_delay_ENQ),
					  .DEQ(lEcho_delay_DEQ),
					  .CLR(lEcho_delay_CLR),
					  .D_OUT(lEcho_delay_D_OUT),
					  .FULL_N(lEcho_delay_FULL_N),
					  .EMPTY_N(lEcho_delay_EMPTY_N));

  // submodule lEcho_delay2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) lEcho_delay2(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(lEcho_delay2_D_IN),
					   .ENQ(lEcho_delay2_ENQ),
					   .DEQ(lEcho_delay2_DEQ),
					   .CLR(lEcho_delay2_CLR),
					   .D_OUT(lEcho_delay2_D_OUT),
					   .FULL_N(lEcho_delay2_FULL_N),
					   .EMPTY_N(lEcho_delay2_EMPTY_N));

  // submodule lEcho_p_bram_memory
  BRAM2BELoad #(.FILENAME("mem.vmh"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd12),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(13'd4096),
		.BINARY(1'd0)) lEcho_p_bram_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(lEcho_p_bram_memory_ADDRA),
						   .ADDRB(lEcho_p_bram_memory_ADDRB),
						   .DIA(lEcho_p_bram_memory_DIA),
						   .DIB(lEcho_p_bram_memory_DIB),
						   .WEA(lEcho_p_bram_memory_WEA),
						   .WEB(lEcho_p_bram_memory_WEB),
						   .ENA(lEcho_p_bram_memory_ENA),
						   .ENB(lEcho_p_bram_memory_ENB),
						   .DOA(lEcho_p_bram_memory_DOA),
						   .DOB(lEcho_p_bram_memory_DOB));

  // submodule lEcho_p_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) lEcho_p_bram_serverAdapterA_outDataCore(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lEcho_p_bram_serverAdapterA_outDataCore_D_IN),
								      .ENQ(lEcho_p_bram_serverAdapterA_outDataCore_ENQ),
								      .DEQ(lEcho_p_bram_serverAdapterA_outDataCore_DEQ),
								      .CLR(lEcho_p_bram_serverAdapterA_outDataCore_CLR),
								      .D_OUT(lEcho_p_bram_serverAdapterA_outDataCore_D_OUT),
								      .FULL_N(lEcho_p_bram_serverAdapterA_outDataCore_FULL_N),
								      .EMPTY_N(lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N));

  // submodule lEcho_p_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) lEcho_p_bram_serverAdapterB_outDataCore(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(lEcho_p_bram_serverAdapterB_outDataCore_D_IN),
								      .ENQ(lEcho_p_bram_serverAdapterB_outDataCore_ENQ),
								      .DEQ(lEcho_p_bram_serverAdapterB_outDataCore_DEQ),
								      .CLR(lEcho_p_bram_serverAdapterB_outDataCore_CLR),
								      .D_OUT(lEcho_p_bram_serverAdapterB_outDataCore_D_OUT),
								      .FULL_N(lEcho_p_bram_serverAdapterB_outDataCore_FULL_N),
								      .EMPTY_N(lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N));

  // submodule lEcho_p_mmioreq
  FIFO2 #(.width(32'd68), .guarded(1'd1)) lEcho_p_mmioreq(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(lEcho_p_mmioreq_D_IN),
							  .ENQ(lEcho_p_mmioreq_ENQ),
							  .DEQ(lEcho_p_mmioreq_DEQ),
							  .CLR(lEcho_p_mmioreq_CLR),
							  .D_OUT(lEcho_p_mmioreq_D_OUT),
							  .FULL_N(lEcho_p_mmioreq_FULL_N),
							  .EMPTY_N(lEcho_p_mmioreq_EMPTY_N));

  // submodule memslave_0_doneFifo
  FIFO1 #(.width(32'd6), .guarded(1'd1)) memslave_0_doneFifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(memslave_0_doneFifo_D_IN),
							     .ENQ(memslave_0_doneFifo_ENQ),
							     .DEQ(memslave_0_doneFifo_DEQ),
							     .CLR(memslave_0_doneFifo_CLR),
							     .D_OUT(memslave_0_doneFifo_D_OUT),
							     .FULL_N(memslave_0_doneFifo_FULL_N),
							     .EMPTY_N(memslave_0_doneFifo_EMPTY_N));

  // submodule memslave_0_fifoReadAddrGenerator_addrBeatFifo
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) memslave_0_fifoReadAddrGenerator_addrBeatFifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_IN),
									.ENQ(memslave_0_fifoReadAddrGenerator_addrBeatFifo_ENQ),
									.DEQ(memslave_0_fifoReadAddrGenerator_addrBeatFifo_DEQ),
									.CLR(memslave_0_fifoReadAddrGenerator_addrBeatFifo_CLR),
									.D_OUT(memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT),
									.FULL_N(memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N),
									.EMPTY_N(memslave_0_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N));

  // submodule memslave_0_fifoReadAddrGenerator_requestFifo
  FIFO1 #(.width(32'd21),
	  .guarded(1'd1)) memslave_0_fifoReadAddrGenerator_requestFifo(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(memslave_0_fifoReadAddrGenerator_requestFifo_D_IN),
								       .ENQ(memslave_0_fifoReadAddrGenerator_requestFifo_ENQ),
								       .DEQ(memslave_0_fifoReadAddrGenerator_requestFifo_DEQ),
								       .CLR(memslave_0_fifoReadAddrGenerator_requestFifo_CLR),
								       .D_OUT(memslave_0_fifoReadAddrGenerator_requestFifo_D_OUT),
								       .FULL_N(memslave_0_fifoReadAddrGenerator_requestFifo_FULL_N),
								       .EMPTY_N(memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N));

  // submodule memslave_0_fifoWriteAddrGenerator_addrBeatFifo
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) memslave_0_fifoWriteAddrGenerator_addrBeatFifo(.RST(RST_N),
									 .CLK(CLK),
									 .D_IN(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_IN),
									 .ENQ(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_ENQ),
									 .DEQ(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_DEQ),
									 .CLR(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_CLR),
									 .D_OUT(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_OUT),
									 .FULL_N(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N),
									 .EMPTY_N(memslave_0_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N));

  // submodule memslave_0_fifoWriteAddrGenerator_requestFifo
  FIFO1 #(.width(32'd21),
	  .guarded(1'd1)) memslave_0_fifoWriteAddrGenerator_requestFifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(memslave_0_fifoWriteAddrGenerator_requestFifo_D_IN),
									.ENQ(memslave_0_fifoWriteAddrGenerator_requestFifo_ENQ),
									.DEQ(memslave_0_fifoWriteAddrGenerator_requestFifo_DEQ),
									.CLR(memslave_0_fifoWriteAddrGenerator_requestFifo_CLR),
									.D_OUT(memslave_0_fifoWriteAddrGenerator_requestFifo_D_OUT),
									.FULL_N(memslave_0_fifoWriteAddrGenerator_requestFifo_FULL_N),
									.EMPTY_N(memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N));

  // submodule memslave_0_fifoWriteDoneFifo
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) memslave_0_fifoWriteDoneFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(memslave_0_fifoWriteDoneFifo_D_IN),
						       .ENQ(memslave_0_fifoWriteDoneFifo_ENQ),
						       .DEQ(memslave_0_fifoWriteDoneFifo_DEQ),
						       .CLR(memslave_0_fifoWriteDoneFifo_CLR),
						       .D_OUT(memslave_0_fifoWriteDoneFifo_D_OUT),
						       .FULL_N(memslave_0_fifoWriteDoneFifo_FULL_N),
						       .EMPTY_N(memslave_0_fifoWriteDoneFifo_EMPTY_N));

  // submodule memslave_0_req_ars
  FIFO1 #(.width(32'd21), .guarded(1'd1)) memslave_0_req_ars(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(memslave_0_req_ars_D_IN),
							     .ENQ(memslave_0_req_ars_ENQ),
							     .DEQ(memslave_0_req_ars_DEQ),
							     .CLR(memslave_0_req_ars_CLR),
							     .D_OUT(memslave_0_req_ars_D_OUT),
							     .FULL_N(memslave_0_req_ars_FULL_N),
							     .EMPTY_N(memslave_0_req_ars_EMPTY_N));

  // submodule memslave_0_req_aws
  FIFO1 #(.width(32'd21), .guarded(1'd1)) memslave_0_req_aws(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(memslave_0_req_aws_D_IN),
							     .ENQ(memslave_0_req_aws_ENQ),
							     .DEQ(memslave_0_req_aws_DEQ),
							     .CLR(memslave_0_req_aws_CLR),
							     .D_OUT(memslave_0_req_aws_D_OUT),
							     .FULL_N(memslave_0_req_aws_FULL_N),
							     .EMPTY_N(memslave_0_req_aws_EMPTY_N));

  // submodule memslave_0_rs
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_0_rs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(memslave_0_rs_D_IN),
						       .ENQ(memslave_0_rs_ENQ),
						       .DEQ(memslave_0_rs_DEQ),
						       .CLR(memslave_0_rs_CLR),
						       .D_OUT(memslave_0_rs_D_OUT),
						       .FULL_N(memslave_0_rs_FULL_N),
						       .EMPTY_N(memslave_0_rs_EMPTY_N));

  // submodule memslave_0_rsCtrl
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_0_rsCtrl(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_0_rsCtrl_D_IN),
							   .ENQ(memslave_0_rsCtrl_ENQ),
							   .DEQ(memslave_0_rsCtrl_DEQ),
							   .CLR(memslave_0_rsCtrl_CLR),
							   .D_OUT(memslave_0_rsCtrl_D_OUT),
							   .FULL_N(memslave_0_rsCtrl_FULL_N),
							   .EMPTY_N(memslave_0_rsCtrl_EMPTY_N));

  // submodule memslave_0_rvFifo
  FIFO2 #(.width(32'd39), .guarded(1'd1)) memslave_0_rvFifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(memslave_0_rvFifo_D_IN),
							    .ENQ(memslave_0_rvFifo_ENQ),
							    .DEQ(memslave_0_rvFifo_DEQ),
							    .CLR(memslave_0_rvFifo_CLR),
							    .D_OUT(memslave_0_rvFifo_D_OUT),
							    .FULL_N(memslave_0_rvFifo_FULL_N),
							    .EMPTY_N(memslave_0_rvFifo_EMPTY_N));

  // submodule memslave_0_ws
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_0_ws(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(memslave_0_ws_D_IN),
						       .ENQ(memslave_0_ws_ENQ),
						       .DEQ(memslave_0_ws_DEQ),
						       .CLR(memslave_0_ws_CLR),
						       .D_OUT(),
						       .FULL_N(memslave_0_ws_FULL_N),
						       .EMPTY_N(memslave_0_ws_EMPTY_N));

  // submodule memslave_0_wsCtrl
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_0_wsCtrl(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_0_wsCtrl_D_IN),
							   .ENQ(memslave_0_wsCtrl_ENQ),
							   .DEQ(memslave_0_wsCtrl_DEQ),
							   .CLR(memslave_0_wsCtrl_CLR),
							   .D_OUT(memslave_0_wsCtrl_D_OUT),
							   .FULL_N(memslave_0_wsCtrl_FULL_N),
							   .EMPTY_N(memslave_0_wsCtrl_EMPTY_N));

  // submodule memslave_1_doneFifo
  FIFO1 #(.width(32'd6), .guarded(1'd1)) memslave_1_doneFifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(memslave_1_doneFifo_D_IN),
							     .ENQ(memslave_1_doneFifo_ENQ),
							     .DEQ(memslave_1_doneFifo_DEQ),
							     .CLR(memslave_1_doneFifo_CLR),
							     .D_OUT(memslave_1_doneFifo_D_OUT),
							     .FULL_N(memslave_1_doneFifo_FULL_N),
							     .EMPTY_N(memslave_1_doneFifo_EMPTY_N));

  // submodule memslave_1_fifoReadAddrGenerator_addrBeatFifo
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) memslave_1_fifoReadAddrGenerator_addrBeatFifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_IN),
									.ENQ(memslave_1_fifoReadAddrGenerator_addrBeatFifo_ENQ),
									.DEQ(memslave_1_fifoReadAddrGenerator_addrBeatFifo_DEQ),
									.CLR(memslave_1_fifoReadAddrGenerator_addrBeatFifo_CLR),
									.D_OUT(memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT),
									.FULL_N(memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N),
									.EMPTY_N(memslave_1_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N));

  // submodule memslave_1_fifoReadAddrGenerator_requestFifo
  FIFO1 #(.width(32'd21),
	  .guarded(1'd1)) memslave_1_fifoReadAddrGenerator_requestFifo(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(memslave_1_fifoReadAddrGenerator_requestFifo_D_IN),
								       .ENQ(memslave_1_fifoReadAddrGenerator_requestFifo_ENQ),
								       .DEQ(memslave_1_fifoReadAddrGenerator_requestFifo_DEQ),
								       .CLR(memslave_1_fifoReadAddrGenerator_requestFifo_CLR),
								       .D_OUT(memslave_1_fifoReadAddrGenerator_requestFifo_D_OUT),
								       .FULL_N(memslave_1_fifoReadAddrGenerator_requestFifo_FULL_N),
								       .EMPTY_N(memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N));

  // submodule memslave_1_fifoWriteAddrGenerator_addrBeatFifo
  FIFO2 #(.width(32'd22),
	  .guarded(1'd1)) memslave_1_fifoWriteAddrGenerator_addrBeatFifo(.RST(RST_N),
									 .CLK(CLK),
									 .D_IN(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_IN),
									 .ENQ(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_ENQ),
									 .DEQ(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_DEQ),
									 .CLR(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_CLR),
									 .D_OUT(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_OUT),
									 .FULL_N(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N),
									 .EMPTY_N(memslave_1_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N));

  // submodule memslave_1_fifoWriteAddrGenerator_requestFifo
  FIFO1 #(.width(32'd21),
	  .guarded(1'd1)) memslave_1_fifoWriteAddrGenerator_requestFifo(.RST(RST_N),
									.CLK(CLK),
									.D_IN(memslave_1_fifoWriteAddrGenerator_requestFifo_D_IN),
									.ENQ(memslave_1_fifoWriteAddrGenerator_requestFifo_ENQ),
									.DEQ(memslave_1_fifoWriteAddrGenerator_requestFifo_DEQ),
									.CLR(memslave_1_fifoWriteAddrGenerator_requestFifo_CLR),
									.D_OUT(memslave_1_fifoWriteAddrGenerator_requestFifo_D_OUT),
									.FULL_N(memslave_1_fifoWriteAddrGenerator_requestFifo_FULL_N),
									.EMPTY_N(memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N));

  // submodule memslave_1_fifoWriteDoneFifo
  FIFO2 #(.width(32'd6),
	  .guarded(1'd1)) memslave_1_fifoWriteDoneFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(memslave_1_fifoWriteDoneFifo_D_IN),
						       .ENQ(memslave_1_fifoWriteDoneFifo_ENQ),
						       .DEQ(memslave_1_fifoWriteDoneFifo_DEQ),
						       .CLR(memslave_1_fifoWriteDoneFifo_CLR),
						       .D_OUT(memslave_1_fifoWriteDoneFifo_D_OUT),
						       .FULL_N(memslave_1_fifoWriteDoneFifo_FULL_N),
						       .EMPTY_N(memslave_1_fifoWriteDoneFifo_EMPTY_N));

  // submodule memslave_1_req_ars
  FIFO1 #(.width(32'd21), .guarded(1'd1)) memslave_1_req_ars(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(memslave_1_req_ars_D_IN),
							     .ENQ(memslave_1_req_ars_ENQ),
							     .DEQ(memslave_1_req_ars_DEQ),
							     .CLR(memslave_1_req_ars_CLR),
							     .D_OUT(memslave_1_req_ars_D_OUT),
							     .FULL_N(memslave_1_req_ars_FULL_N),
							     .EMPTY_N(memslave_1_req_ars_EMPTY_N));

  // submodule memslave_1_req_aws
  FIFO1 #(.width(32'd21), .guarded(1'd1)) memslave_1_req_aws(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(memslave_1_req_aws_D_IN),
							     .ENQ(memslave_1_req_aws_ENQ),
							     .DEQ(memslave_1_req_aws_DEQ),
							     .CLR(memslave_1_req_aws_CLR),
							     .D_OUT(memslave_1_req_aws_D_OUT),
							     .FULL_N(memslave_1_req_aws_FULL_N),
							     .EMPTY_N(memslave_1_req_aws_EMPTY_N));

  // submodule memslave_1_rs
  FIFO1 #(.width(32'd2), .guarded(1'd1)) memslave_1_rs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(memslave_1_rs_D_IN),
						       .ENQ(memslave_1_rs_ENQ),
						       .DEQ(memslave_1_rs_DEQ),
						       .CLR(memslave_1_rs_CLR),
						       .D_OUT(memslave_1_rs_D_OUT),
						       .FULL_N(memslave_1_rs_FULL_N),
						       .EMPTY_N(memslave_1_rs_EMPTY_N));

  // submodule memslave_1_rsCtrl
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_1_rsCtrl(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_1_rsCtrl_D_IN),
							   .ENQ(memslave_1_rsCtrl_ENQ),
							   .DEQ(memslave_1_rsCtrl_DEQ),
							   .CLR(memslave_1_rsCtrl_CLR),
							   .D_OUT(memslave_1_rsCtrl_D_OUT),
							   .FULL_N(memslave_1_rsCtrl_FULL_N),
							   .EMPTY_N(memslave_1_rsCtrl_EMPTY_N));

  // submodule memslave_1_rvFifo
  FIFO2 #(.width(32'd39), .guarded(1'd1)) memslave_1_rvFifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(memslave_1_rvFifo_D_IN),
							    .ENQ(memslave_1_rvFifo_ENQ),
							    .DEQ(memslave_1_rvFifo_DEQ),
							    .CLR(memslave_1_rvFifo_CLR),
							    .D_OUT(memslave_1_rvFifo_D_OUT),
							    .FULL_N(memslave_1_rvFifo_FULL_N),
							    .EMPTY_N(memslave_1_rvFifo_EMPTY_N));

  // submodule memslave_1_writeDataFifo
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) memslave_1_writeDataFifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(memslave_1_writeDataFifo_D_IN),
						   .ENQ(memslave_1_writeDataFifo_ENQ),
						   .DEQ(memslave_1_writeDataFifo_DEQ),
						   .CLR(memslave_1_writeDataFifo_CLR),
						   .D_OUT(memslave_1_writeDataFifo_D_OUT),
						   .FULL_N(memslave_1_writeDataFifo_FULL_N),
						   .EMPTY_N(memslave_1_writeDataFifo_EMPTY_N));

  // submodule memslave_1_ws
  FIFO1 #(.width(32'd2), .guarded(1'd1)) memslave_1_ws(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(memslave_1_ws_D_IN),
						       .ENQ(memslave_1_ws_ENQ),
						       .DEQ(memslave_1_ws_DEQ),
						       .CLR(memslave_1_ws_CLR),
						       .D_OUT(memslave_1_ws_D_OUT),
						       .FULL_N(memslave_1_ws_FULL_N),
						       .EMPTY_N(memslave_1_ws_EMPTY_N));

  // submodule memslave_1_wsCtrl
  FIFO1 #(.width(32'd1), .guarded(1'd1)) memslave_1_wsCtrl(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(memslave_1_wsCtrl_D_IN),
							   .ENQ(memslave_1_wsCtrl_ENQ),
							   .DEQ(memslave_1_wsCtrl_DEQ),
							   .CLR(memslave_1_wsCtrl_CLR),
							   .D_OUT(memslave_1_wsCtrl_D_OUT),
							   .FULL_N(memslave_1_wsCtrl_FULL_N),
							   .EMPTY_N(memslave_1_wsCtrl_EMPTY_N));

  // rule RL_lEcho_p_bram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_lEcho_p_bram_serverAdapterA_outData_enqAndDeq =
	     lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N &&
	     lEcho_p_bram_serverAdapterA_outDataCore_FULL_N &&
	     lEcho_p_bram_serverAdapterA_outData_deqCalled_whas &&
	     lEcho_p_bram_serverAdapterA_outData_enqData_whas ;

  // rule RL_lEcho_p_bram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_lEcho_p_bram_serverAdapterB_outData_enqAndDeq =
	     lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N &&
	     lEcho_p_bram_serverAdapterB_outDataCore_FULL_N &&
	     lEcho_p_bram_serverAdapterB_outData_deqCalled_whas &&
	     lEcho_p_bram_serverAdapterB_outData_enqData_whas ;

  // rule RL_lEcho_p_rv_core_fetch
  assign WILL_FIRE_RL_lEcho_p_rv_core_fetch =
	     !lEcho_p_rv_core_toImem_rv[68] &&
	     lEcho_p_rv_core_state == 2'd0 &&
	     !lEcho_p_rv_core_starting ;

  // rule RL_lEcho_p_rv_core_decode
  assign WILL_FIRE_RL_lEcho_p_rv_core_decode =
	     lEcho_p_rv_core_fromImem_rv_port1__read[68] &&
	     lEcho_p_rv_core_state == 2'd1 &&
	     !lEcho_p_rv_core_starting ;

  // rule RL_lEcho_p_rv_core_execute
  assign WILL_FIRE_RL_lEcho_p_rv_core_execute =
	     lEcho_p_rv_core_dInst_22_BIT_6_23_OR_NOT_lEcho_ETC___d381 &&
	     lEcho_p_rv_core_state == 2'd2 &&
	     !lEcho_p_rv_core_starting ;

  // rule RL_lEcho_p_rv_core_writeback
  assign WILL_FIRE_RL_lEcho_p_rv_core_writeback =
	     (lEcho_p_rv_core_dInst[6] ||
	      lEcho_p_rv_core_dInst[4:3] != 2'b0 ||
	      IF_lEcho_p_rv_core_mem_business_87_BIT_0_88_TH_ETC___d493) &&
	     (!lEcho_p_rv_core_dInst[36] ||
	      lEcho_p_rv_core_dInst_22_BIT_6_23_OR_NOT_lEcho_ETC___d509) &&
	     lEcho_p_rv_core_state == 2'd3 &&
	     !lEcho_p_rv_core_starting ;

  // rule RL_memslave_0_rvrule
  assign WILL_FIRE_RL_memslave_0_rvrule =
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N &&
	     memslave_0_rsCtrl_EMPTY_N &&
	     memslave_0_rs_EMPTY_N &&
	     memslave_0_rvFifo_FULL_N &&
	     (memslave_0_rsCtrl_D_OUT ||
	      NOT_memslave_0_fifoReadAddrGenerator_addrBeatF_ETC___d778) ;

  // rule RL_memslave_1_rvrule
  assign WILL_FIRE_RL_memslave_1_rvrule =
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_EMPTY_N &&
	     memslave_1_rsCtrl_EMPTY_N &&
	     memslave_1_rvFifo_FULL_N &&
	     (memslave_1_rsCtrl_D_OUT ||
	      memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] !=
	      5'd4 ||
	      memslave_1_rs_EMPTY_N) &&
	     (!memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[0] ||
	      memslave_1_rs_EMPTY_N) ;

  // rule RL_memslave_1_writeDataRule
  assign WILL_FIRE_RL_memslave_1_writeDataRule =
	     memslave_1_wsCtrl_EMPTY_N && memslave_1_writeDataFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_ETC___d909 ;

  // rule RL_lEcho_p_requestMMIO
  assign WILL_FIRE_RL_lEcho_p_requestMMIO =
	     lEcho_p_rv_core_toMMIO_rv_port1__read[68] &&
	     lEcho_p_mmioreq_FULL_N ;

  // rule RL_ctrl_mux_rv_req_aw
  assign WILL_FIRE_RL_ctrl_mux_rv_req_aw =
	     ctrl_mux_rv_req_aws_EMPTY_N && ctrl_mux_rv_ws_EMPTY_N &&
	     CASE_ctrl_mux_rv_ws_first__059_0_memslave_0_re_ETC___d1070 ;

  // rule RL_ctrl_mux_rv_req_ar
  assign WILL_FIRE_RL_ctrl_mux_rv_req_ar =
	     ctrl_mux_rv_req_ars_EMPTY_N && ctrl_mux_rv_rs_EMPTY_N &&
	     CASE_ctrl_mux_rv_rs_first__089_0_memslave_0_re_ETC___d1100 ;

  // rule RL_ctrl_mux_rv_write_done_rule
  assign WILL_FIRE_RL_ctrl_mux_rv_write_done_rule =
	     ctrl_mux_rv_ws_EMPTY_N && ctrl_mux_rv_doneFifo_FULL_N &&
	     CASE_ctrl_mux_rv_wsD_OUT_0_memslave_0_doneFif_ETC__q7 ;

  // rule RL_ctrl_mux_rv_read_data_funnel_funnel
  assign WILL_FIRE_RL_ctrl_mux_rv_read_data_funnel_funnel =
	     !ctrl_mux_rv_readDataPipes_1_fifo_EMPTY_N &&
	     !ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N ||
	     ctrl_mux_rv_read_data_funnel_buffs_0_0_FULL_N ;

  // rule RL_ctrl_mux_rv_writeDataPipes_0_connect
  assign WILL_FIRE_RL_ctrl_mux_rv_writeDataPipes_0_connect =
	     memslave_0_wsCtrl_EMPTY_N &&
	     ctrl_mux_rv_writeDataPipes_0_fifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N &&
	     (!memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[0] ||
	      memslave_0_fifoWriteDoneFifo_FULL_N) ;

  // inputs to muxes for submodule ports
  assign MUX_lEcho_p_rv_core_pc_write_1__SEL_1 =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     !lEcho_p_rv_core_dInst[39] ;

  // inlined wires
  assign lEcho_p_bram_serverAdapterA_outData_enqData_whas =
	     (!lEcho_p_bram_serverAdapterA_s1[0] ||
	      lEcho_p_bram_serverAdapterA_outDataCore_FULL_N) &&
	     lEcho_p_bram_serverAdapterA_s1[1] &&
	     lEcho_p_bram_serverAdapterA_s1[0] ;
  assign lEcho_p_bram_serverAdapterA_outData_outData_whas =
	     lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N ||
	     !lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N &&
	     lEcho_p_bram_serverAdapterA_outData_enqData_whas ;
  assign lEcho_p_bram_serverAdapterA_cnt_1_whas =
	     lEcho_p_rv_core_toDmem_rv_port1__read[68] &&
	     (lEcho_p_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!lEcho_p_bram_serverAdapterA_writeWithResp_wget[1] ||
	      lEcho_p_bram_serverAdapterA_writeWithResp_wget[0]) ;
  assign lEcho_p_bram_serverAdapterA_writeWithResp_wget =
	     { lEcho_p_rv_core_toDmem_rv_port1__read[67:64] != 4'd0, 1'd1 } ;
  assign lEcho_p_bram_serverAdapterA_writeWithResp_whas =
	     lEcho_p_rv_core_toDmem_rv_port1__read[68] &&
	     (lEcho_p_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign lEcho_p_bram_serverAdapterA_s1_1_wget =
	     { 1'd1,
	       !lEcho_p_bram_serverAdapterA_writeWithResp_wget[1] ||
	       lEcho_p_bram_serverAdapterA_writeWithResp_wget[0] } ;
  assign lEcho_p_bram_serverAdapterB_outData_enqData_whas =
	     (!lEcho_p_bram_serverAdapterB_s1[0] ||
	      lEcho_p_bram_serverAdapterB_outDataCore_FULL_N) &&
	     lEcho_p_bram_serverAdapterB_s1[1] &&
	     lEcho_p_bram_serverAdapterB_s1[0] ;
  assign lEcho_p_bram_serverAdapterB_outData_outData_whas =
	     lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N ||
	     !lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N &&
	     lEcho_p_bram_serverAdapterB_outData_enqData_whas ;
  assign lEcho_p_bram_serverAdapterB_cnt_1_whas =
	     lEcho_p_rv_core_toImem_rv_port1__read[68] &&
	     (lEcho_p_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     (!lEcho_p_bram_serverAdapterB_writeWithResp_wget[1] ||
	      lEcho_p_bram_serverAdapterB_writeWithResp_wget[0]) ;
  assign lEcho_p_bram_serverAdapterB_writeWithResp_wget =
	     { lEcho_p_rv_core_toImem_rv_port1__read[67:64] != 4'd0, 1'd1 } ;
  assign lEcho_p_bram_serverAdapterB_writeWithResp_whas =
	     lEcho_p_rv_core_toImem_rv_port1__read[68] &&
	     (lEcho_p_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign lEcho_p_bram_serverAdapterB_s1_1_wget =
	     { 1'd1,
	       !lEcho_p_bram_serverAdapterB_writeWithResp_wget[1] ||
	       lEcho_p_bram_serverAdapterB_writeWithResp_wget[0] } ;
  assign lEcho_p_bram_serverAdapterA_outData_deqCalled_whas =
	     (lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N ||
	      lEcho_p_bram_serverAdapterA_outData_enqData_whas) &&
	     lEcho_p_bram_serverAdapterA_outData_outData_whas &&
	     !lEcho_p_rv_core_fromDmem_rv[68] ;
  assign lEcho_p_bram_serverAdapterB_outData_deqCalled_whas =
	     (lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N ||
	      lEcho_p_bram_serverAdapterB_outData_enqData_whas) &&
	     lEcho_p_bram_serverAdapterB_outData_outData_whas &&
	     !lEcho_p_rv_core_fromImem_rv[68] ;
  assign lEcho_p_rv_core_toImem_rv_port0__write_1 =
	     { 5'd16, lEcho_p_rv_core_pc, 32'd0 } ;
  assign lEcho_p_rv_core_toImem_rv_port1__read =
	     WILL_FIRE_RL_lEcho_p_rv_core_fetch ?
	       lEcho_p_rv_core_toImem_rv_port0__write_1 :
	       lEcho_p_rv_core_toImem_rv ;
  assign lEcho_p_rv_core_toImem_rv_EN_port1__write =
	     lEcho_p_rv_core_toImem_rv_port1__read[68] &&
	     (lEcho_p_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign lEcho_p_rv_core_toImem_rv_port2__read =
	     lEcho_p_rv_core_toImem_rv_EN_port1__write ?
	       69'h0AAAAAAAAAAAAAAAAA :
	       lEcho_p_rv_core_toImem_rv_port1__read ;
  assign lEcho_p_rv_core_fromImem_rv_EN_port0__write =
	     (lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N ||
	      lEcho_p_bram_serverAdapterB_outData_enqData_whas) &&
	     lEcho_p_bram_serverAdapterB_outData_outData_whas &&
	     !lEcho_p_rv_core_fromImem_rv[68] ;
  assign lEcho_p_rv_core_fromImem_rv_port0__write_1 =
	     { 1'd1, lEcho_p_ireq[67:32], x__h12970 } ;
  assign lEcho_p_rv_core_fromImem_rv_port1__read =
	     lEcho_p_rv_core_fromImem_rv_EN_port0__write ?
	       lEcho_p_rv_core_fromImem_rv_port0__write_1 :
	       lEcho_p_rv_core_fromImem_rv ;
  assign lEcho_p_rv_core_fromImem_rv_port2__read =
	     WILL_FIRE_RL_lEcho_p_rv_core_decode ?
	       69'h0AAAAAAAAAAAAAAAAA :
	       lEcho_p_rv_core_fromImem_rv_port1__read ;
  assign lEcho_p_rv_core_toDmem_rv_EN_port0__write =
	     WILL_FIRE_RL_lEcho_p_rv_core_execute &&
	     !lEcho_p_rv_core_dInst[6] &&
	     lEcho_p_rv_core_dInst[4:3] == 2'b0 &&
	     lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] !=
	     30'd1006649340 &&
	     lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] !=
	     30'd1006649341 &&
	     lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] !=
	     30'd1006649342 ;
  assign lEcho_p_rv_core_toDmem_rv_port0__write_1 =
	     { 1'd1, req_byte_en__h10343, x__h10534, x__h10535 } ;
  assign lEcho_p_rv_core_toDmem_rv_port1__read =
	     lEcho_p_rv_core_toDmem_rv_EN_port0__write ?
	       lEcho_p_rv_core_toDmem_rv_port0__write_1 :
	       lEcho_p_rv_core_toDmem_rv ;
  assign lEcho_p_rv_core_toDmem_rv_EN_port1__write =
	     lEcho_p_rv_core_toDmem_rv_port1__read[68] &&
	     (lEcho_p_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign lEcho_p_rv_core_toDmem_rv_port2__read =
	     lEcho_p_rv_core_toDmem_rv_EN_port1__write ?
	       69'h0AAAAAAAAAAAAAAAAA :
	       lEcho_p_rv_core_toDmem_rv_port1__read ;
  assign lEcho_p_rv_core_fromDmem_rv_EN_port0__write =
	     (lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N ||
	      lEcho_p_bram_serverAdapterA_outData_enqData_whas) &&
	     lEcho_p_bram_serverAdapterA_outData_outData_whas &&
	     !lEcho_p_rv_core_fromDmem_rv[68] ;
  assign lEcho_p_rv_core_fromDmem_rv_port0__write_1 =
	     { 1'd1, lEcho_p_dreq[67:32], x__h13367 } ;
  assign lEcho_p_rv_core_fromDmem_rv_port1__read =
	     lEcho_p_rv_core_fromDmem_rv_EN_port0__write ?
	       lEcho_p_rv_core_fromDmem_rv_port0__write_1 :
	       lEcho_p_rv_core_fromDmem_rv ;
  assign lEcho_p_rv_core_fromDmem_rv_EN_port1__write =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     !lEcho_p_rv_core_dInst[6] &&
	     lEcho_p_rv_core_dInst[4:3] == 2'b0 &&
	     !lEcho_p_rv_core_mem_business[0] ;
  assign lEcho_p_rv_core_fromDmem_rv_port2__read =
	     lEcho_p_rv_core_fromDmem_rv_EN_port1__write ?
	       69'h0AAAAAAAAAAAAAAAAA :
	       lEcho_p_rv_core_fromDmem_rv_port1__read ;
  assign lEcho_p_rv_core_toMMIO_rv_EN_port0__write =
	     WILL_FIRE_RL_lEcho_p_rv_core_execute &&
	     !lEcho_p_rv_core_dInst[6] &&
	     lEcho_p_rv_core_dInst[4:3] == 2'b0 &&
	     (lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] ==
	      30'd1006649340 ||
	      lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] ==
	      30'd1006649341 ||
	      lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] ==
	      30'd1006649342) ;
  assign lEcho_p_rv_core_toMMIO_rv_port1__read =
	     lEcho_p_rv_core_toMMIO_rv_EN_port0__write ?
	       lEcho_p_rv_core_toDmem_rv_port0__write_1 :
	       lEcho_p_rv_core_toMMIO_rv ;
  assign lEcho_p_rv_core_toMMIO_rv_port2__read =
	     WILL_FIRE_RL_lEcho_p_requestMMIO ?
	       69'h0AAAAAAAAAAAAAAAAA :
	       lEcho_p_rv_core_toMMIO_rv_port1__read ;
  assign lEcho_p_rv_core_fromMMIO_rv_EN_port0__write =
	     lEcho_p_mmioreq_EMPTY_N && !lEcho_p_rv_core_fromMMIO_rv[68] ;
  assign lEcho_p_rv_core_fromMMIO_rv_port0__write_1 =
	     { 1'd1, lEcho_p_mmioreq_D_OUT } ;
  assign lEcho_p_rv_core_fromMMIO_rv_port1__read =
	     lEcho_p_rv_core_fromMMIO_rv_EN_port0__write ?
	       lEcho_p_rv_core_fromMMIO_rv_port0__write_1 :
	       lEcho_p_rv_core_fromMMIO_rv ;
  assign lEcho_p_rv_core_fromMMIO_rv_EN_port1__write =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     !lEcho_p_rv_core_dInst[6] &&
	     lEcho_p_rv_core_dInst[4:3] == 2'b0 &&
	     lEcho_p_rv_core_mem_business[0] ;
  assign lEcho_p_rv_core_fromMMIO_rv_port2__read =
	     lEcho_p_rv_core_fromMMIO_rv_EN_port1__write ?
	       69'h0AAAAAAAAAAAAAAAAA :
	       lEcho_p_rv_core_fromMMIO_rv_port1__read ;

  // register ctrlPort_0_cycle_count
  assign ctrlPort_0_cycle_count_D_IN = ctrlPort_0_cycle_count + 64'd1 ;
  assign ctrlPort_0_cycle_count_EN = 1'd1 ;

  // register ctrlPort_0_interruptEnableReg
  assign ctrlPort_0_interruptEnableReg_D_IN =
	     ctrl_mux_rv_writeDataPipes_0_fifo_D_OUT[7] ;
  assign ctrlPort_0_interruptEnableReg_EN =
	     WILL_FIRE_RL_ctrl_mux_rv_writeDataPipes_0_connect &&
	     memslave_0_wsCtrl_D_OUT &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd4 ;

  // register ctrlPort_0_num_portals_reg
  assign ctrlPort_0_num_portals_reg_D_IN = 32'd2 ;
  assign ctrlPort_0_num_portals_reg_EN = 1'd1 ;

  // register ctrlPort_0_snapshot
  assign ctrlPort_0_snapshot_D_IN = ctrlPort_0_cycle_count[31:0] ;
  assign ctrlPort_0_snapshot_EN =
	     WILL_FIRE_RL_memslave_0_rvrule && memslave_0_rsCtrl_D_OUT &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'h18 ;

  // register ctrlPort_1_cycle_count
  assign ctrlPort_1_cycle_count_D_IN = ctrlPort_1_cycle_count + 64'd1 ;
  assign ctrlPort_1_cycle_count_EN = 1'd1 ;

  // register ctrlPort_1_interruptEnableReg
  assign ctrlPort_1_interruptEnableReg_D_IN =
	     memslave_1_writeDataFifo_D_OUT[7] ;
  assign ctrlPort_1_interruptEnableReg_EN =
	     WILL_FIRE_RL_memslave_1_writeDataRule &&
	     memslave_1_wsCtrl_D_OUT &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd4 ;

  // register ctrlPort_1_num_portals_reg
  assign ctrlPort_1_num_portals_reg_D_IN = 32'd2 ;
  assign ctrlPort_1_num_portals_reg_EN = 1'd1 ;

  // register ctrlPort_1_snapshot
  assign ctrlPort_1_snapshot_D_IN = ctrlPort_1_cycle_count[31:0] ;
  assign ctrlPort_1_snapshot_EN =
	     WILL_FIRE_RL_memslave_1_rvrule && memslave_1_rsCtrl_D_OUT &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'h18 ;

  // register ctrl_mux_rv_lastWriteDataSeen
  assign ctrl_mux_rv_lastWriteDataSeen_D_IN =
	     !EN_slave_write_server_writeReq_put ;
  assign ctrl_mux_rv_lastWriteDataSeen_EN =
	     EN_slave_write_server_writeData_put &&
	     slave_write_server_writeData_put[0] ||
	     EN_slave_write_server_writeReq_put ;

  // register lEcho_p_bram_serverAdapterA_cnt
  assign lEcho_p_bram_serverAdapterA_cnt_D_IN =
	     lEcho_p_bram_serverAdapterA_cnt_6_PLUS_IF_lEch_ETC___d32 ;
  assign lEcho_p_bram_serverAdapterA_cnt_EN =
	     lEcho_p_bram_serverAdapterA_cnt_1_whas ||
	     lEcho_p_bram_serverAdapterA_outData_deqCalled_whas ;

  // register lEcho_p_bram_serverAdapterA_s1
  assign lEcho_p_bram_serverAdapterA_s1_D_IN =
	     { lEcho_p_bram_serverAdapterA_writeWithResp_whas &&
	       lEcho_p_bram_serverAdapterA_s1_1_wget[1],
	       lEcho_p_bram_serverAdapterA_s1_1_wget[0] } ;
  assign lEcho_p_bram_serverAdapterA_s1_EN = 1'd1 ;

  // register lEcho_p_bram_serverAdapterB_cnt
  assign lEcho_p_bram_serverAdapterB_cnt_D_IN =
	     lEcho_p_bram_serverAdapterB_cnt_5_PLUS_IF_lEch_ETC___d91 ;
  assign lEcho_p_bram_serverAdapterB_cnt_EN =
	     lEcho_p_bram_serverAdapterB_cnt_1_whas ||
	     lEcho_p_bram_serverAdapterB_outData_deqCalled_whas ;

  // register lEcho_p_bram_serverAdapterB_s1
  assign lEcho_p_bram_serverAdapterB_s1_D_IN =
	     { lEcho_p_bram_serverAdapterB_writeWithResp_whas &&
	       lEcho_p_bram_serverAdapterB_s1_1_wget[1],
	       lEcho_p_bram_serverAdapterB_s1_1_wget[0] } ;
  assign lEcho_p_bram_serverAdapterB_s1_EN = 1'd1 ;

  // register lEcho_p_cycle_count
  assign lEcho_p_cycle_count_D_IN = lEcho_p_cycle_count + 32'd1 ;
  assign lEcho_p_cycle_count_EN = 1'd1 ;

  // register lEcho_p_dreq
  assign lEcho_p_dreq_D_IN = lEcho_p_rv_core_toDmem_rv_port1__read[67:0] ;
  assign lEcho_p_dreq_EN = lEcho_p_bram_serverAdapterA_writeWithResp_whas ;

  // register lEcho_p_ireq
  assign lEcho_p_ireq_D_IN = lEcho_p_rv_core_toImem_rv_port1__read[67:0] ;
  assign lEcho_p_ireq_EN = lEcho_p_bram_serverAdapterB_writeWithResp_whas ;

  // register lEcho_p_rv_core_dInst
  assign lEcho_p_rv_core_dInst_D_IN =
	     { CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q15,
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11000 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b0 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01000 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01100 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11001 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00100,
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11000 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01000 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01100,
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01101 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11011 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b0 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01100 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11001 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00100 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00101,
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b0 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00001 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00100 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00110 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11001 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b00101 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01101 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01000 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b01001 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11000 ||
	       lEcho_p_rv_core_fromImem_rv_port1__read[6:2] == 5'b11011,
	       CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16,
	       lEcho_p_rv_core_fromImem_rv_port1__read[31:0] } ;
  assign lEcho_p_rv_core_dInst_EN = WILL_FIRE_RL_lEcho_p_rv_core_decode ;

  // register lEcho_p_rv_core_fromDmem_rv
  assign lEcho_p_rv_core_fromDmem_rv_D_IN =
	     lEcho_p_rv_core_fromDmem_rv_port2__read ;
  assign lEcho_p_rv_core_fromDmem_rv_EN = 1'b1 ;

  // register lEcho_p_rv_core_fromImem_rv
  assign lEcho_p_rv_core_fromImem_rv_D_IN =
	     lEcho_p_rv_core_fromImem_rv_port2__read ;
  assign lEcho_p_rv_core_fromImem_rv_EN = 1'b1 ;

  // register lEcho_p_rv_core_fromMMIO_rv
  assign lEcho_p_rv_core_fromMMIO_rv_D_IN =
	     lEcho_p_rv_core_fromMMIO_rv_port2__read ;
  assign lEcho_p_rv_core_fromMMIO_rv_EN = 1'b1 ;

  // register lEcho_p_rv_core_lfh
  assign lEcho_p_rv_core_lfh_D_IN = 32'h0 ;
  assign lEcho_p_rv_core_lfh_EN = 1'b0 ;

  // register lEcho_p_rv_core_mem_business
  assign lEcho_p_rv_core_mem_business_D_IN =
	     { !lEcho_p_rv_core_dInst[6] &&
	       lEcho_p_rv_core_dInst[4:3] == 2'b0 &&
	       lEcho_p_rv_core_dInst[14],
	       lEcho_p_rv_core_dInst[13:12],
	       lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[1:0],
	       !lEcho_p_rv_core_dInst[6] &&
	       lEcho_p_rv_core_dInst[4:3] == 2'b0 &&
	       (lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] ==
		30'd1006649340 ||
		lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] ==
		30'd1006649341 ||
		lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2] ==
		30'd1006649342) } ;
  assign lEcho_p_rv_core_mem_business_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_execute ;

  // register lEcho_p_rv_core_pc
  assign lEcho_p_rv_core_pc_D_IN =
	     MUX_lEcho_p_rv_core_pc_write_1__SEL_1 ? 32'd0 : nextPc__h10702 ;
  assign lEcho_p_rv_core_pc_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     !lEcho_p_rv_core_dInst[39] ||
	     WILL_FIRE_RL_lEcho_p_rv_core_execute ;

  // register lEcho_p_rv_core_rf_0
  assign lEcho_p_rv_core_rf_0_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_0_EN = 1'b0 ;

  // register lEcho_p_rv_core_rf_1
  assign lEcho_p_rv_core_rf_1_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_1_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd1 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_10
  assign lEcho_p_rv_core_rf_10_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_10_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd10 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_11
  assign lEcho_p_rv_core_rf_11_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_11_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd11 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_12
  assign lEcho_p_rv_core_rf_12_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_12_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd12 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_13
  assign lEcho_p_rv_core_rf_13_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_13_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd13 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_14
  assign lEcho_p_rv_core_rf_14_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_14_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd14 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_15
  assign lEcho_p_rv_core_rf_15_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_15_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd15 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_16
  assign lEcho_p_rv_core_rf_16_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_16_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd16 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_17
  assign lEcho_p_rv_core_rf_17_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_17_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd17 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_18
  assign lEcho_p_rv_core_rf_18_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_18_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd18 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_19
  assign lEcho_p_rv_core_rf_19_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_19_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd19 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_2
  assign lEcho_p_rv_core_rf_2_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_2_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd2 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_20
  assign lEcho_p_rv_core_rf_20_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_20_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd20 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_21
  assign lEcho_p_rv_core_rf_21_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_21_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd21 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_22
  assign lEcho_p_rv_core_rf_22_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_22_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd22 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_23
  assign lEcho_p_rv_core_rf_23_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_23_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd23 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_24
  assign lEcho_p_rv_core_rf_24_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_24_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd24 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_25
  assign lEcho_p_rv_core_rf_25_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_25_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd25 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_26
  assign lEcho_p_rv_core_rf_26_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_26_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd26 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_27
  assign lEcho_p_rv_core_rf_27_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_27_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd27 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_28
  assign lEcho_p_rv_core_rf_28_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_28_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd28 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_29
  assign lEcho_p_rv_core_rf_29_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_29_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd29 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_3
  assign lEcho_p_rv_core_rf_3_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_3_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd3 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_30
  assign lEcho_p_rv_core_rf_30_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_30_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd30 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_31
  assign lEcho_p_rv_core_rf_31_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_31_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd31 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_4
  assign lEcho_p_rv_core_rf_4_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_4_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd4 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_5
  assign lEcho_p_rv_core_rf_5_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_5_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd5 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_6
  assign lEcho_p_rv_core_rf_6_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_6_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd6 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_7
  assign lEcho_p_rv_core_rf_7_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_7_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd7 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_8
  assign lEcho_p_rv_core_rf_8_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_8_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd8 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rf_9
  assign lEcho_p_rv_core_rf_9_D_IN = v__h11517 ;
  assign lEcho_p_rv_core_rf_9_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback &&
	     lEcho_p_rv_core_dInst[11:7] == 5'd9 &&
	     lEcho_p_rv_core_dInst[36] ;

  // register lEcho_p_rv_core_rv1
  assign lEcho_p_rv_core_rv1_D_IN = rs1__h8457 ;
  assign lEcho_p_rv_core_rv1_EN = WILL_FIRE_RL_lEcho_p_rv_core_decode ;

  // register lEcho_p_rv_core_rv2
  assign lEcho_p_rv_core_rv2_D_IN = rs2__h8458 ;
  assign lEcho_p_rv_core_rv2_EN = WILL_FIRE_RL_lEcho_p_rv_core_decode ;

  // register lEcho_p_rv_core_rvd
  assign lEcho_p_rv_core_rvd_D_IN =
	     (!lEcho_p_rv_core_dInst[6] &&
	      lEcho_p_rv_core_dInst[4:3] == 2'b0) ?
	       x__h10535 :
	       ((lEcho_p_rv_core_dInst[6:4] == 3'b110) ?
		  incPC__h10719 :
		  data__h9660) ;
  assign lEcho_p_rv_core_rvd_EN = WILL_FIRE_RL_lEcho_p_rv_core_execute ;

  // register lEcho_p_rv_core_starting
  assign lEcho_p_rv_core_starting_D_IN = 1'b0 ;
  assign lEcho_p_rv_core_starting_EN = 1'b0 ;

  // register lEcho_p_rv_core_state
  always@(WILL_FIRE_RL_lEcho_p_rv_core_writeback or
	  WILL_FIRE_RL_lEcho_p_rv_core_fetch or
	  WILL_FIRE_RL_lEcho_p_rv_core_decode or
	  WILL_FIRE_RL_lEcho_p_rv_core_execute)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_lEcho_p_rv_core_writeback:
	  lEcho_p_rv_core_state_D_IN = 2'd0;
      WILL_FIRE_RL_lEcho_p_rv_core_fetch: lEcho_p_rv_core_state_D_IN = 2'd1;
      WILL_FIRE_RL_lEcho_p_rv_core_decode: lEcho_p_rv_core_state_D_IN = 2'd2;
      WILL_FIRE_RL_lEcho_p_rv_core_execute: lEcho_p_rv_core_state_D_IN = 2'd3;
      default: lEcho_p_rv_core_state_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign lEcho_p_rv_core_state_EN =
	     WILL_FIRE_RL_lEcho_p_rv_core_writeback ||
	     WILL_FIRE_RL_lEcho_p_rv_core_fetch ||
	     WILL_FIRE_RL_lEcho_p_rv_core_decode ||
	     WILL_FIRE_RL_lEcho_p_rv_core_execute ;

  // register lEcho_p_rv_core_toDmem_rv
  assign lEcho_p_rv_core_toDmem_rv_D_IN =
	     lEcho_p_rv_core_toDmem_rv_port2__read ;
  assign lEcho_p_rv_core_toDmem_rv_EN = 1'b1 ;

  // register lEcho_p_rv_core_toImem_rv
  assign lEcho_p_rv_core_toImem_rv_D_IN =
	     lEcho_p_rv_core_toImem_rv_port2__read ;
  assign lEcho_p_rv_core_toImem_rv_EN = 1'b1 ;

  // register lEcho_p_rv_core_toMMIO_rv
  assign lEcho_p_rv_core_toMMIO_rv_D_IN =
	     lEcho_p_rv_core_toMMIO_rv_port2__read ;
  assign lEcho_p_rv_core_toMMIO_rv_EN = 1'b1 ;

  // register lEcho_p_status
  assign lEcho_p_status_D_IN =
	     (lEcho_p_rv_core_toMMIO_rv_port1__read[31:0] == 32'd0) ?
	       32'd1 :
	       32'd99 ;
  assign lEcho_p_status_EN =
	     WILL_FIRE_RL_lEcho_p_requestMMIO &&
	     lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF8 ;

  // register memslave_0_fifoReadAddrGenerator_addrReg
  assign memslave_0_fifoReadAddrGenerator_addrReg_D_IN = addr__h14964 + 5'd4 ;
  assign memslave_0_fifoReadAddrGenerator_addrReg_EN =
	     memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoReadAddrGenerator_burstCountReg
  assign memslave_0_fifoReadAddrGenerator_burstCountReg_D_IN =
	     burstCount__h14966 - 10'd1 ;
  assign memslave_0_fifoReadAddrGenerator_burstCountReg_EN =
	     memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoReadAddrGenerator_isFirstReg
  assign memslave_0_fifoReadAddrGenerator_isFirstReg_D_IN =
	     IF_memslave_0_fifoReadAddrGenerator_isFirstReg_ETC___d718 ;
  assign memslave_0_fifoReadAddrGenerator_isFirstReg_EN =
	     memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoReadAddrGenerator_isLastReg
  assign memslave_0_fifoReadAddrGenerator_isLastReg_D_IN =
	     burstCount__h14966 == 10'd2 ;
  assign memslave_0_fifoReadAddrGenerator_isLastReg_EN =
	     memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoWriteAddrGenerator_addrReg
  assign memslave_0_fifoWriteAddrGenerator_addrReg_D_IN =
	     addr__h15515 + 5'd4 ;
  assign memslave_0_fifoWriteAddrGenerator_addrReg_EN =
	     memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoWriteAddrGenerator_burstCountReg
  assign memslave_0_fifoWriteAddrGenerator_burstCountReg_D_IN =
	     burstCount__h15517 - 10'd1 ;
  assign memslave_0_fifoWriteAddrGenerator_burstCountReg_EN =
	     memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoWriteAddrGenerator_isFirstReg
  assign memslave_0_fifoWriteAddrGenerator_isFirstReg_D_IN =
	     IF_memslave_0_fifoWriteAddrGenerator_isFirstRe_ETC___d740 ;
  assign memslave_0_fifoWriteAddrGenerator_isFirstReg_EN =
	     memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_0_fifoWriteAddrGenerator_isLastReg
  assign memslave_0_fifoWriteAddrGenerator_isLastReg_D_IN =
	     burstCount__h15517 == 10'd2 ;
  assign memslave_0_fifoWriteAddrGenerator_isLastReg_EN =
	     memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoReadAddrGenerator_addrReg
  assign memslave_1_fifoReadAddrGenerator_addrReg_D_IN = addr__h17831 + 5'd4 ;
  assign memslave_1_fifoReadAddrGenerator_addrReg_EN =
	     memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoReadAddrGenerator_burstCountReg
  assign memslave_1_fifoReadAddrGenerator_burstCountReg_D_IN =
	     burstCount__h17833 - 10'd1 ;
  assign memslave_1_fifoReadAddrGenerator_burstCountReg_EN =
	     memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoReadAddrGenerator_isFirstReg
  assign memslave_1_fifoReadAddrGenerator_isFirstReg_D_IN =
	     IF_memslave_1_fifoReadAddrGenerator_isFirstReg_ETC___d851 ;
  assign memslave_1_fifoReadAddrGenerator_isFirstReg_EN =
	     memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoReadAddrGenerator_isLastReg
  assign memslave_1_fifoReadAddrGenerator_isLastReg_D_IN =
	     burstCount__h17833 == 10'd2 ;
  assign memslave_1_fifoReadAddrGenerator_isLastReg_EN =
	     memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoWriteAddrGenerator_addrReg
  assign memslave_1_fifoWriteAddrGenerator_addrReg_D_IN =
	     addr__h18382 + 5'd4 ;
  assign memslave_1_fifoWriteAddrGenerator_addrReg_EN =
	     memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoWriteAddrGenerator_burstCountReg
  assign memslave_1_fifoWriteAddrGenerator_burstCountReg_D_IN =
	     burstCount__h18384 - 10'd1 ;
  assign memslave_1_fifoWriteAddrGenerator_burstCountReg_EN =
	     memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoWriteAddrGenerator_isFirstReg
  assign memslave_1_fifoWriteAddrGenerator_isFirstReg_D_IN =
	     IF_memslave_1_fifoWriteAddrGenerator_isFirstRe_ETC___d873 ;
  assign memslave_1_fifoWriteAddrGenerator_isFirstReg_EN =
	     memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // register memslave_1_fifoWriteAddrGenerator_isLastReg
  assign memslave_1_fifoWriteAddrGenerator_isLastReg_D_IN =
	     burstCount__h18384 == 10'd2 ;
  assign memslave_1_fifoWriteAddrGenerator_isLastReg_EN =
	     memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;

  // submodule ctrl_mux_rv_doneFifo
  always@(ctrl_mux_rv_ws_D_OUT or
	  memslave_0_doneFifo_D_OUT or memslave_1_doneFifo_D_OUT)
  begin
    case (ctrl_mux_rv_ws_D_OUT)
      1'd0: ctrl_mux_rv_doneFifo_D_IN = memslave_0_doneFifo_D_OUT;
      1'd1: ctrl_mux_rv_doneFifo_D_IN = memslave_1_doneFifo_D_OUT;
    endcase
  end
  assign ctrl_mux_rv_doneFifo_ENQ = WILL_FIRE_RL_ctrl_mux_rv_write_done_rule ;
  assign ctrl_mux_rv_doneFifo_DEQ = EN_slave_write_server_writeDone_get ;
  assign ctrl_mux_rv_doneFifo_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_readDataPipes_0_fifo
  assign ctrl_mux_rv_readDataPipes_0_fifo_D_IN = memslave_0_rvFifo_D_OUT ;
  assign ctrl_mux_rv_readDataPipes_0_fifo_ENQ =
	     memslave_0_rvFifo_EMPTY_N &&
	     ctrl_mux_rv_readDataPipes_0_fifo_FULL_N ;
  assign ctrl_mux_rv_readDataPipes_0_fifo_DEQ =
	     WILL_FIRE_RL_ctrl_mux_rv_read_data_funnel_funnel &&
	     ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N ;
  assign ctrl_mux_rv_readDataPipes_0_fifo_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_readDataPipes_1_fifo
  assign ctrl_mux_rv_readDataPipes_1_fifo_D_IN = memslave_1_rvFifo_D_OUT ;
  assign ctrl_mux_rv_readDataPipes_1_fifo_ENQ =
	     memslave_1_rvFifo_EMPTY_N &&
	     ctrl_mux_rv_readDataPipes_1_fifo_FULL_N ;
  assign ctrl_mux_rv_readDataPipes_1_fifo_DEQ =
	     WILL_FIRE_RL_ctrl_mux_rv_read_data_funnel_funnel &&
	     !ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N &&
	     ctrl_mux_rv_readDataPipes_1_fifo_EMPTY_N ;
  assign ctrl_mux_rv_readDataPipes_1_fifo_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_read_data_funnel_buffs_0_0
  assign ctrl_mux_rv_read_data_funnel_buffs_0_0_D_IN =
	     (!ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N &&
	      ctrl_mux_rv_readDataPipes_1_fifo_EMPTY_N) ?
	       ctrl_mux_rv_readDataPipes_1_fifo_D_OUT :
	       ctrl_mux_rv_readDataPipes_0_fifo_D_OUT ;
  assign ctrl_mux_rv_read_data_funnel_buffs_0_0_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_read_data_funnel_funnel &&
	     (ctrl_mux_rv_readDataPipes_1_fifo_EMPTY_N ||
	      ctrl_mux_rv_readDataPipes_0_fifo_EMPTY_N) ;
  assign ctrl_mux_rv_read_data_funnel_buffs_0_0_DEQ =
	     EN_slave_read_server_readData_get ;
  assign ctrl_mux_rv_read_data_funnel_buffs_0_0_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_read_data_funnel_buffs_0_1
  assign ctrl_mux_rv_read_data_funnel_buffs_0_1_D_IN = 39'h0 ;
  assign ctrl_mux_rv_read_data_funnel_buffs_0_1_ENQ = 1'b0 ;
  assign ctrl_mux_rv_read_data_funnel_buffs_0_1_DEQ = 1'b0 ;
  assign ctrl_mux_rv_read_data_funnel_buffs_0_1_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_req_ars
  assign ctrl_mux_rv_req_ars_D_IN = slave_read_server_readReq_put[27:0] ;
  assign ctrl_mux_rv_req_ars_ENQ = EN_slave_read_server_readReq_put ;
  assign ctrl_mux_rv_req_ars_DEQ = WILL_FIRE_RL_ctrl_mux_rv_req_ar ;
  assign ctrl_mux_rv_req_ars_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_req_aws
  assign ctrl_mux_rv_req_aws_D_IN = slave_write_server_writeReq_put[27:0] ;
  assign ctrl_mux_rv_req_aws_ENQ = EN_slave_write_server_writeReq_put ;
  assign ctrl_mux_rv_req_aws_DEQ = WILL_FIRE_RL_ctrl_mux_rv_req_aw ;
  assign ctrl_mux_rv_req_aws_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_rs
  assign ctrl_mux_rv_rs_D_IN = slave_read_server_readReq_put[28] ;
  assign ctrl_mux_rv_rs_ENQ = EN_slave_read_server_readReq_put ;
  assign ctrl_mux_rv_rs_DEQ = EN_slave_read_server_readData_get ;
  assign ctrl_mux_rv_rs_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_writeDataPipes_0_fifo
  assign ctrl_mux_rv_writeDataPipes_0_fifo_D_IN =
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_D_OUT[38:0] ;
  assign ctrl_mux_rv_writeDataPipes_0_fifo_ENQ =
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_EMPTY_N &&
	     ctrl_mux_rv_writeDataPipes_0_fifo_FULL_N ;
  assign ctrl_mux_rv_writeDataPipes_0_fifo_DEQ =
	     WILL_FIRE_RL_ctrl_mux_rv_writeDataPipes_0_connect ;
  assign ctrl_mux_rv_writeDataPipes_0_fifo_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_writeDataPipes_1_fifo
  assign ctrl_mux_rv_writeDataPipes_1_fifo_D_IN =
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_D_OUT[38:0] ;
  assign ctrl_mux_rv_writeDataPipes_1_fifo_ENQ =
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_EMPTY_N &&
	     ctrl_mux_rv_writeDataPipes_1_fifo_FULL_N ;
  assign ctrl_mux_rv_writeDataPipes_1_fifo_DEQ =
	     ctrl_mux_rv_writeDataPipes_1_fifo_EMPTY_N &&
	     memslave_1_writeDataFifo_FULL_N ;
  assign ctrl_mux_rv_writeDataPipes_1_fifo_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_write_data
  assign ctrl_mux_rv_write_data_D_IN =
	     { ctrl_mux_rv_ws_D_OUT, slave_write_server_writeData_put } ;
  assign ctrl_mux_rv_write_data_ENQ = EN_slave_write_server_writeData_put ;
  assign ctrl_mux_rv_write_data_DEQ =
	     ctrl_mux_rv_write_data_EMPTY_N &&
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_FULL_N &&
	     ctrl_mux_rv_write_data_D_OUT[39] ||
	     ctrl_mux_rv_write_data_EMPTY_N &&
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_FULL_N &&
	     !ctrl_mux_rv_write_data_D_OUT[39] ;
  assign ctrl_mux_rv_write_data_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_D_IN =
	     { 1'd0, ctrl_mux_rv_write_data_D_OUT[38:0] } ;
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_ENQ =
	     ctrl_mux_rv_write_data_EMPTY_N &&
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_FULL_N &&
	     !ctrl_mux_rv_write_data_D_OUT[39] ;
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_DEQ =
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_EMPTY_N &&
	     ctrl_mux_rv_writeDataPipes_0_fifo_FULL_N ;
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_0_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_D_IN =
	     { 1'd0, ctrl_mux_rv_write_data_D_OUT[38:0] } ;
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_ENQ =
	     ctrl_mux_rv_write_data_EMPTY_N &&
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_FULL_N &&
	     ctrl_mux_rv_write_data_D_OUT[39] ;
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_DEQ =
	     ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_EMPTY_N &&
	     ctrl_mux_rv_writeDataPipes_1_fifo_FULL_N ;
  assign ctrl_mux_rv_write_data_unfunnel_rv_buff_0_0_1_CLR = 1'b0 ;

  // submodule ctrl_mux_rv_ws
  assign ctrl_mux_rv_ws_D_IN = slave_write_server_writeReq_put[28] ;
  assign ctrl_mux_rv_ws_ENQ = EN_slave_write_server_writeReq_put ;
  assign ctrl_mux_rv_ws_DEQ = WILL_FIRE_RL_ctrl_mux_rv_write_done_rule ;
  assign ctrl_mux_rv_ws_CLR = 1'b0 ;

  // submodule lEchoIndicationOutput
  assign lEchoIndicationOutput_ifc_heard2_a = lEcho_delay2_D_OUT[15:0] ;
  assign lEchoIndicationOutput_ifc_heard2_b = lEcho_delay2_D_OUT[31:16] ;
  assign lEchoIndicationOutput_ifc_heard_v = lEcho_delay_D_OUT ;
  assign lEchoIndicationOutput_portalIfc_messageSize_size_methodNumber =
	     16'h0 ;
  assign lEchoIndicationOutput_EN_portalIfc_indications_0_deq =
	     WILL_FIRE_RL_memslave_0_rvrule && memslave_0_rs_D_OUT == 1'd0 &&
	     !memslave_0_rsCtrl_D_OUT &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd0 ;
  assign lEchoIndicationOutput_EN_portalIfc_indications_1_deq =
	     WILL_FIRE_RL_memslave_0_rvrule && memslave_0_rs_D_OUT == 1'd1 &&
	     !memslave_0_rsCtrl_D_OUT &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
	     5'd0 ;
  assign lEchoIndicationOutput_EN_ifc_heard =
	     lEchoIndicationOutput_RDY_ifc_heard && lEcho_delay_EMPTY_N ;
  assign lEchoIndicationOutput_EN_ifc_heard2 =
	     lEchoIndicationOutput_RDY_ifc_heard2 && lEcho_delay2_EMPTY_N ;

  // submodule lEchoRequestInput
  assign lEchoRequestInput_portalIfc_messageSize_size_methodNumber = 16'h0 ;
  assign lEchoRequestInput_portalIfc_requests_0_enq_v =
	     memslave_1_writeDataFifo_D_OUT[38:7] ;
  assign lEchoRequestInput_portalIfc_requests_1_enq_v =
	     memslave_1_writeDataFifo_D_OUT[38:7] ;
  assign lEchoRequestInput_portalIfc_requests_2_enq_v =
	     memslave_1_writeDataFifo_D_OUT[38:7] ;
  assign lEchoRequestInput_EN_portalIfc_requests_0_enq =
	     WILL_FIRE_RL_memslave_1_writeDataRule &&
	     memslave_1_ws_D_OUT == 2'd0 &&
	     !memslave_1_wsCtrl_D_OUT ;
  assign lEchoRequestInput_EN_portalIfc_requests_1_enq =
	     WILL_FIRE_RL_memslave_1_writeDataRule &&
	     memslave_1_ws_D_OUT == 2'd1 &&
	     !memslave_1_wsCtrl_D_OUT ;
  assign lEchoRequestInput_EN_portalIfc_requests_2_enq =
	     WILL_FIRE_RL_memslave_1_writeDataRule &&
	     memslave_1_ws_D_OUT == 2'd2 &&
	     !memslave_1_wsCtrl_D_OUT ;
  assign lEchoRequestInput_EN_pipes_say_PipeOut_deq =
	     lEchoRequestInput_RDY_pipes_say_PipeOut_deq &&
	     lEcho_delay_FULL_N ;
  assign lEchoRequestInput_EN_pipes_say2_PipeOut_deq =
	     lEchoRequestInput_RDY_pipes_say2_PipeOut_first &&
	     lEchoRequestInput_RDY_pipes_say2_PipeOut_deq &&
	     lEcho_delay2_FULL_N ;
  assign lEchoRequestInput_EN_pipes_setLeds_PipeOut_deq =
	     lEchoRequestInput_RDY_pipes_setLeds_PipeOut_deq ;

  // submodule lEcho_delay
  assign lEcho_delay_D_IN = lEcho_p_status ;
  assign lEcho_delay_ENQ =
	     lEchoRequestInput_RDY_pipes_say_PipeOut_deq &&
	     lEcho_delay_FULL_N ;
  assign lEcho_delay_DEQ =
	     lEchoIndicationOutput_RDY_ifc_heard && lEcho_delay_EMPTY_N ;
  assign lEcho_delay_CLR = 1'b0 ;

  // submodule lEcho_delay2
  assign lEcho_delay2_D_IN = lEchoRequestInput_pipes_say2_PipeOut_first ;
  assign lEcho_delay2_ENQ =
	     lEchoRequestInput_RDY_pipes_say2_PipeOut_first &&
	     lEchoRequestInput_RDY_pipes_say2_PipeOut_deq &&
	     lEcho_delay2_FULL_N ;
  assign lEcho_delay2_DEQ =
	     lEchoIndicationOutput_RDY_ifc_heard2 && lEcho_delay2_EMPTY_N ;
  assign lEcho_delay2_CLR = 1'b0 ;

  // submodule lEcho_p_bram_memory
  assign lEcho_p_bram_memory_ADDRA =
	     lEcho_p_rv_core_toDmem_rv_port1__read[45:34] ;
  assign lEcho_p_bram_memory_ADDRB =
	     lEcho_p_rv_core_toImem_rv_port1__read[45:34] ;
  assign lEcho_p_bram_memory_DIA =
	     lEcho_p_rv_core_toDmem_rv_port1__read[31:0] ;
  assign lEcho_p_bram_memory_DIB =
	     lEcho_p_rv_core_toImem_rv_port1__read[31:0] ;
  assign lEcho_p_bram_memory_WEA =
	     lEcho_p_rv_core_toDmem_rv_port1__read[67:64] ;
  assign lEcho_p_bram_memory_WEB =
	     lEcho_p_rv_core_toImem_rv_port1__read[67:64] ;
  assign lEcho_p_bram_memory_ENA =
	     lEcho_p_bram_serverAdapterA_writeWithResp_whas ;
  assign lEcho_p_bram_memory_ENB =
	     lEcho_p_bram_serverAdapterB_writeWithResp_whas ;

  // submodule lEcho_p_bram_serverAdapterA_outDataCore
  assign lEcho_p_bram_serverAdapterA_outDataCore_D_IN =
	     lEcho_p_bram_memory_DOA ;
  assign lEcho_p_bram_serverAdapterA_outDataCore_ENQ =
	     WILL_FIRE_RL_lEcho_p_bram_serverAdapterA_outData_enqAndDeq ||
	     lEcho_p_bram_serverAdapterA_outDataCore_FULL_N &&
	     !lEcho_p_bram_serverAdapterA_outData_deqCalled_whas &&
	     lEcho_p_bram_serverAdapterA_outData_enqData_whas ;
  assign lEcho_p_bram_serverAdapterA_outDataCore_DEQ =
	     WILL_FIRE_RL_lEcho_p_bram_serverAdapterA_outData_enqAndDeq ||
	     lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N &&
	     lEcho_p_bram_serverAdapterA_outData_deqCalled_whas &&
	     !lEcho_p_bram_serverAdapterA_outData_enqData_whas ;
  assign lEcho_p_bram_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule lEcho_p_bram_serverAdapterB_outDataCore
  assign lEcho_p_bram_serverAdapterB_outDataCore_D_IN =
	     lEcho_p_bram_memory_DOB ;
  assign lEcho_p_bram_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_lEcho_p_bram_serverAdapterB_outData_enqAndDeq ||
	     lEcho_p_bram_serverAdapterB_outDataCore_FULL_N &&
	     !lEcho_p_bram_serverAdapterB_outData_deqCalled_whas &&
	     lEcho_p_bram_serverAdapterB_outData_enqData_whas ;
  assign lEcho_p_bram_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_lEcho_p_bram_serverAdapterB_outData_enqAndDeq ||
	     lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N &&
	     lEcho_p_bram_serverAdapterB_outData_deqCalled_whas &&
	     !lEcho_p_bram_serverAdapterB_outData_enqData_whas ;
  assign lEcho_p_bram_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule lEcho_p_mmioreq
  assign lEcho_p_mmioreq_D_IN = lEcho_p_rv_core_toMMIO_rv_port1__read[67:0] ;
  assign lEcho_p_mmioreq_ENQ = WILL_FIRE_RL_lEcho_p_requestMMIO ;
  assign lEcho_p_mmioreq_DEQ =
	     lEcho_p_mmioreq_EMPTY_N && !lEcho_p_rv_core_fromMMIO_rv[68] ;
  assign lEcho_p_mmioreq_CLR = 1'b0 ;

  // submodule memslave_0_doneFifo
  assign memslave_0_doneFifo_D_IN = memslave_0_fifoWriteDoneFifo_D_OUT ;
  assign memslave_0_doneFifo_ENQ =
	     memslave_0_fifoWriteDoneFifo_EMPTY_N && memslave_0_ws_EMPTY_N &&
	     memslave_0_wsCtrl_EMPTY_N &&
	     memslave_0_doneFifo_FULL_N ;
  assign memslave_0_doneFifo_DEQ =
	     WILL_FIRE_RL_ctrl_mux_rv_write_done_rule &&
	     ctrl_mux_rv_ws_D_OUT == 1'd0 ;
  assign memslave_0_doneFifo_CLR = 1'b0 ;

  // submodule memslave_0_fifoReadAddrGenerator_addrBeatFifo
  assign memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_IN =
	     { addr__h14964,
	       burstCount__h14966,
	       memslave_0_fifoReadAddrGenerator_requestFifo_D_OUT[5:0],
	       IF_memslave_0_fifoReadAddrGenerator_isFirstReg_ETC___d718 } ;
  assign memslave_0_fifoReadAddrGenerator_addrBeatFifo_ENQ =
	     memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;
  assign memslave_0_fifoReadAddrGenerator_addrBeatFifo_DEQ =
	     WILL_FIRE_RL_memslave_0_rvrule ;
  assign memslave_0_fifoReadAddrGenerator_addrBeatFifo_CLR = 1'b0 ;

  // submodule memslave_0_fifoReadAddrGenerator_requestFifo
  assign memslave_0_fifoReadAddrGenerator_requestFifo_D_IN =
	     memslave_0_req_ars_D_OUT ;
  assign memslave_0_fifoReadAddrGenerator_requestFifo_ENQ =
	     memslave_0_req_ars_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_requestFifo_FULL_N ;
  assign memslave_0_fifoReadAddrGenerator_requestFifo_DEQ =
	     memslave_0_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_addrBeatFifo_FULL_N &&
	     IF_memslave_0_fifoReadAddrGenerator_isFirstReg_ETC___d718 ;
  assign memslave_0_fifoReadAddrGenerator_requestFifo_CLR = 1'b0 ;

  // submodule memslave_0_fifoWriteAddrGenerator_addrBeatFifo
  assign memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_IN =
	     { addr__h15515,
	       burstCount__h15517,
	       memslave_0_fifoWriteAddrGenerator_requestFifo_D_OUT[5:0],
	       IF_memslave_0_fifoWriteAddrGenerator_isFirstRe_ETC___d740 } ;
  assign memslave_0_fifoWriteAddrGenerator_addrBeatFifo_ENQ =
	     memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;
  assign memslave_0_fifoWriteAddrGenerator_addrBeatFifo_DEQ =
	     WILL_FIRE_RL_ctrl_mux_rv_writeDataPipes_0_connect ;
  assign memslave_0_fifoWriteAddrGenerator_addrBeatFifo_CLR = 1'b0 ;

  // submodule memslave_0_fifoWriteAddrGenerator_requestFifo
  assign memslave_0_fifoWriteAddrGenerator_requestFifo_D_IN =
	     memslave_0_req_aws_D_OUT ;
  assign memslave_0_fifoWriteAddrGenerator_requestFifo_ENQ =
	     memslave_0_req_aws_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_requestFifo_FULL_N ;
  assign memslave_0_fifoWriteAddrGenerator_requestFifo_DEQ =
	     memslave_0_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_FULL_N &&
	     IF_memslave_0_fifoWriteAddrGenerator_isFirstRe_ETC___d740 ;
  assign memslave_0_fifoWriteAddrGenerator_requestFifo_CLR = 1'b0 ;

  // submodule memslave_0_fifoWriteDoneFifo
  assign memslave_0_fifoWriteDoneFifo_D_IN =
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[6:1] ;
  assign memslave_0_fifoWriteDoneFifo_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_writeDataPipes_0_connect &&
	     memslave_0_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[0] ;
  assign memslave_0_fifoWriteDoneFifo_DEQ =
	     memslave_0_fifoWriteDoneFifo_EMPTY_N && memslave_0_ws_EMPTY_N &&
	     memslave_0_wsCtrl_EMPTY_N &&
	     memslave_0_doneFifo_FULL_N ;
  assign memslave_0_fifoWriteDoneFifo_CLR = 1'b0 ;

  // submodule memslave_0_req_ars
  assign memslave_0_req_ars_D_IN = ctrl_mux_rv_req_ars_D_OUT[20:0] ;
  assign memslave_0_req_ars_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_ar && ctrl_mux_rv_rs_D_OUT == 1'd0 ;
  assign memslave_0_req_ars_DEQ =
	     memslave_0_req_ars_EMPTY_N &&
	     memslave_0_fifoReadAddrGenerator_requestFifo_FULL_N ;
  assign memslave_0_req_ars_CLR = 1'b0 ;

  // submodule memslave_0_req_aws
  assign memslave_0_req_aws_D_IN = ctrl_mux_rv_req_aws_D_OUT[20:0] ;
  assign memslave_0_req_aws_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_aw && ctrl_mux_rv_ws_D_OUT == 1'd0 ;
  assign memslave_0_req_aws_DEQ =
	     memslave_0_req_aws_EMPTY_N &&
	     memslave_0_fifoWriteAddrGenerator_requestFifo_FULL_N ;
  assign memslave_0_req_aws_CLR = 1'b0 ;

  // submodule memslave_0_rs
  assign memslave_0_rs_D_IN = x__h25614[0] ;
  assign memslave_0_rs_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_ar && ctrl_mux_rv_rs_D_OUT == 1'd0 ;
  assign memslave_0_rs_DEQ = WILL_FIRE_RL_memslave_0_rvrule ;
  assign memslave_0_rs_CLR = 1'b0 ;

  // submodule memslave_0_rsCtrl
  assign memslave_0_rsCtrl_D_IN = ctrl_mux_rv_req_ars_D_OUT[27:21] == 7'd0 ;
  assign memslave_0_rsCtrl_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_ar && ctrl_mux_rv_rs_D_OUT == 1'd0 ;
  assign memslave_0_rsCtrl_DEQ = WILL_FIRE_RL_memslave_0_rvrule ;
  assign memslave_0_rsCtrl_CLR = 1'b0 ;

  // submodule memslave_0_rvFifo
  assign memslave_0_rvFifo_D_IN =
	     { x1_avValue_data__h17175,
	       memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[6:0] } ;
  assign memslave_0_rvFifo_ENQ = WILL_FIRE_RL_memslave_0_rvrule ;
  assign memslave_0_rvFifo_DEQ =
	     memslave_0_rvFifo_EMPTY_N &&
	     ctrl_mux_rv_readDataPipes_0_fifo_FULL_N ;
  assign memslave_0_rvFifo_CLR = 1'b0 ;

  // submodule memslave_0_ws
  assign memslave_0_ws_D_IN = x__h25214[0] ;
  assign memslave_0_ws_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_aw && ctrl_mux_rv_ws_D_OUT == 1'd0 ;
  assign memslave_0_ws_DEQ =
	     memslave_0_fifoWriteDoneFifo_EMPTY_N && memslave_0_ws_EMPTY_N &&
	     memslave_0_wsCtrl_EMPTY_N &&
	     memslave_0_doneFifo_FULL_N ;
  assign memslave_0_ws_CLR = 1'b0 ;

  // submodule memslave_0_wsCtrl
  assign memslave_0_wsCtrl_D_IN = ctrl_mux_rv_req_aws_D_OUT[27:21] == 7'd0 ;
  assign memslave_0_wsCtrl_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_aw && ctrl_mux_rv_ws_D_OUT == 1'd0 ;
  assign memslave_0_wsCtrl_DEQ =
	     memslave_0_fifoWriteDoneFifo_EMPTY_N && memslave_0_ws_EMPTY_N &&
	     memslave_0_wsCtrl_EMPTY_N &&
	     memslave_0_doneFifo_FULL_N ;
  assign memslave_0_wsCtrl_CLR = 1'b0 ;

  // submodule memslave_1_doneFifo
  assign memslave_1_doneFifo_D_IN = memslave_1_fifoWriteDoneFifo_D_OUT ;
  assign memslave_1_doneFifo_ENQ =
	     memslave_1_fifoWriteDoneFifo_EMPTY_N && memslave_1_ws_EMPTY_N &&
	     memslave_1_wsCtrl_EMPTY_N &&
	     memslave_1_doneFifo_FULL_N ;
  assign memslave_1_doneFifo_DEQ =
	     WILL_FIRE_RL_ctrl_mux_rv_write_done_rule &&
	     ctrl_mux_rv_ws_D_OUT == 1'd1 ;
  assign memslave_1_doneFifo_CLR = 1'b0 ;

  // submodule memslave_1_fifoReadAddrGenerator_addrBeatFifo
  assign memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_IN =
	     { addr__h17831,
	       burstCount__h17833,
	       memslave_1_fifoReadAddrGenerator_requestFifo_D_OUT[5:0],
	       IF_memslave_1_fifoReadAddrGenerator_isFirstReg_ETC___d851 } ;
  assign memslave_1_fifoReadAddrGenerator_addrBeatFifo_ENQ =
	     memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N ;
  assign memslave_1_fifoReadAddrGenerator_addrBeatFifo_DEQ =
	     WILL_FIRE_RL_memslave_1_rvrule ;
  assign memslave_1_fifoReadAddrGenerator_addrBeatFifo_CLR = 1'b0 ;

  // submodule memslave_1_fifoReadAddrGenerator_requestFifo
  assign memslave_1_fifoReadAddrGenerator_requestFifo_D_IN =
	     memslave_1_req_ars_D_OUT ;
  assign memslave_1_fifoReadAddrGenerator_requestFifo_ENQ =
	     memslave_1_req_ars_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_requestFifo_FULL_N ;
  assign memslave_1_fifoReadAddrGenerator_requestFifo_DEQ =
	     memslave_1_fifoReadAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_FULL_N &&
	     IF_memslave_1_fifoReadAddrGenerator_isFirstReg_ETC___d851 ;
  assign memslave_1_fifoReadAddrGenerator_requestFifo_CLR = 1'b0 ;

  // submodule memslave_1_fifoWriteAddrGenerator_addrBeatFifo
  assign memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_IN =
	     { addr__h18382,
	       burstCount__h18384,
	       memslave_1_fifoWriteAddrGenerator_requestFifo_D_OUT[5:0],
	       IF_memslave_1_fifoWriteAddrGenerator_isFirstRe_ETC___d873 } ;
  assign memslave_1_fifoWriteAddrGenerator_addrBeatFifo_ENQ =
	     memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N ;
  assign memslave_1_fifoWriteAddrGenerator_addrBeatFifo_DEQ =
	     WILL_FIRE_RL_memslave_1_writeDataRule ;
  assign memslave_1_fifoWriteAddrGenerator_addrBeatFifo_CLR = 1'b0 ;

  // submodule memslave_1_fifoWriteAddrGenerator_requestFifo
  assign memslave_1_fifoWriteAddrGenerator_requestFifo_D_IN =
	     memslave_1_req_aws_D_OUT ;
  assign memslave_1_fifoWriteAddrGenerator_requestFifo_ENQ =
	     memslave_1_req_aws_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_requestFifo_FULL_N ;
  assign memslave_1_fifoWriteAddrGenerator_requestFifo_DEQ =
	     memslave_1_fifoWriteAddrGenerator_requestFifo_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_FULL_N &&
	     IF_memslave_1_fifoWriteAddrGenerator_isFirstRe_ETC___d873 ;
  assign memslave_1_fifoWriteAddrGenerator_requestFifo_CLR = 1'b0 ;

  // submodule memslave_1_fifoWriteDoneFifo
  assign memslave_1_fifoWriteDoneFifo_D_IN =
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[6:1] ;
  assign memslave_1_fifoWriteDoneFifo_ENQ =
	     WILL_FIRE_RL_memslave_1_writeDataRule &&
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[0] ;
  assign memslave_1_fifoWriteDoneFifo_DEQ =
	     memslave_1_fifoWriteDoneFifo_EMPTY_N && memslave_1_ws_EMPTY_N &&
	     memslave_1_wsCtrl_EMPTY_N &&
	     memslave_1_doneFifo_FULL_N ;
  assign memslave_1_fifoWriteDoneFifo_CLR = 1'b0 ;

  // submodule memslave_1_req_ars
  assign memslave_1_req_ars_D_IN = ctrl_mux_rv_req_ars_D_OUT[20:0] ;
  assign memslave_1_req_ars_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_ar && ctrl_mux_rv_rs_D_OUT == 1'd1 ;
  assign memslave_1_req_ars_DEQ =
	     memslave_1_req_ars_EMPTY_N &&
	     memslave_1_fifoReadAddrGenerator_requestFifo_FULL_N ;
  assign memslave_1_req_ars_CLR = 1'b0 ;

  // submodule memslave_1_req_aws
  assign memslave_1_req_aws_D_IN = ctrl_mux_rv_req_aws_D_OUT[20:0] ;
  assign memslave_1_req_aws_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_aw && ctrl_mux_rv_ws_D_OUT == 1'd1 ;
  assign memslave_1_req_aws_DEQ =
	     memslave_1_req_aws_EMPTY_N &&
	     memslave_1_fifoWriteAddrGenerator_requestFifo_FULL_N ;
  assign memslave_1_req_aws_CLR = 1'b0 ;

  // submodule memslave_1_rs
  assign memslave_1_rs_D_IN = x__h25614[1:0] ;
  assign memslave_1_rs_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_ar && ctrl_mux_rv_rs_D_OUT == 1'd1 ;
  assign memslave_1_rs_DEQ =
	     WILL_FIRE_RL_memslave_1_rvrule &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[0] ;
  assign memslave_1_rs_CLR = 1'b0 ;

  // submodule memslave_1_rsCtrl
  assign memslave_1_rsCtrl_D_IN = ctrl_mux_rv_req_ars_D_OUT[27:21] == 7'd0 ;
  assign memslave_1_rsCtrl_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_ar && ctrl_mux_rv_rs_D_OUT == 1'd1 ;
  assign memslave_1_rsCtrl_DEQ =
	     WILL_FIRE_RL_memslave_1_rvrule &&
	     memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[0] ;
  assign memslave_1_rsCtrl_CLR = 1'b0 ;

  // submodule memslave_1_rvFifo
  assign memslave_1_rvFifo_D_IN =
	     { v___1__h20151,
	       memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[6:0] } ;
  assign memslave_1_rvFifo_ENQ = WILL_FIRE_RL_memslave_1_rvrule ;
  assign memslave_1_rvFifo_DEQ =
	     memslave_1_rvFifo_EMPTY_N &&
	     ctrl_mux_rv_readDataPipes_1_fifo_FULL_N ;
  assign memslave_1_rvFifo_CLR = 1'b0 ;

  // submodule memslave_1_writeDataFifo
  assign memslave_1_writeDataFifo_D_IN =
	     ctrl_mux_rv_writeDataPipes_1_fifo_D_OUT ;
  assign memslave_1_writeDataFifo_ENQ =
	     ctrl_mux_rv_writeDataPipes_1_fifo_EMPTY_N &&
	     memslave_1_writeDataFifo_FULL_N ;
  assign memslave_1_writeDataFifo_DEQ =
	     WILL_FIRE_RL_memslave_1_writeDataRule ;
  assign memslave_1_writeDataFifo_CLR = 1'b0 ;

  // submodule memslave_1_ws
  assign memslave_1_ws_D_IN = x__h25214[1:0] ;
  assign memslave_1_ws_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_aw && ctrl_mux_rv_ws_D_OUT == 1'd1 ;
  assign memslave_1_ws_DEQ =
	     memslave_1_fifoWriteDoneFifo_EMPTY_N && memslave_1_ws_EMPTY_N &&
	     memslave_1_wsCtrl_EMPTY_N &&
	     memslave_1_doneFifo_FULL_N ;
  assign memslave_1_ws_CLR = 1'b0 ;

  // submodule memslave_1_wsCtrl
  assign memslave_1_wsCtrl_D_IN = ctrl_mux_rv_req_aws_D_OUT[27:21] == 7'd0 ;
  assign memslave_1_wsCtrl_ENQ =
	     WILL_FIRE_RL_ctrl_mux_rv_req_aw && ctrl_mux_rv_ws_D_OUT == 1'd1 ;
  assign memslave_1_wsCtrl_DEQ =
	     memslave_1_fifoWriteDoneFifo_EMPTY_N && memslave_1_ws_EMPTY_N &&
	     memslave_1_wsCtrl_EMPTY_N &&
	     memslave_1_doneFifo_FULL_N ;
  assign memslave_1_wsCtrl_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_lEcho_p_rv_core_dInst_22_BIT_35_29_AND_lEch_ETC___d364 =
	     (lEcho_p_rv_core_dInst[35] &&
	      lEcho_p_rv_core_dInst[34:32] == 3'd2) ?
	       { {19{x__h9969[12]}}, x__h9969 } :
	       ((lEcho_p_rv_core_dInst[35] &&
		 lEcho_p_rv_core_dInst[34:32] == 3'd3) ?
		  { lEcho_p_rv_core_dInst[31:12], 12'b0 } :
		  ((lEcho_p_rv_core_dInst[35] &&
		    lEcho_p_rv_core_dInst[34:32] == 3'd4) ?
		     { {11{x__h10130[20]}}, x__h10130 } :
		     32'd0)) ;
  assign IF_lEcho_p_rv_core_mem_business_87_BIT_0_88_TH_ETC___d493 =
	     lEcho_p_rv_core_mem_business[0] ?
	       lEcho_p_rv_core_fromMMIO_rv_port1__read[68] :
	       lEcho_p_rv_core_fromDmem_rv_port1__read[68] ;
  assign IF_memslave_0_fifoReadAddrGenerator_isFirstReg_ETC___d718 =
	     memslave_0_fifoReadAddrGenerator_isFirstReg ?
	       memslave_0_fifoReadAddrGenerator_requestFifo_D_OUT[15:6] ==
	       10'd4 :
	       memslave_0_fifoReadAddrGenerator_isLastReg ;
  assign IF_memslave_0_fifoWriteAddrGenerator_isFirstRe_ETC___d740 =
	     memslave_0_fifoWriteAddrGenerator_isFirstReg ?
	       memslave_0_fifoWriteAddrGenerator_requestFifo_D_OUT[15:6] ==
	       10'd4 :
	       memslave_0_fifoWriteAddrGenerator_isLastReg ;
  assign IF_memslave_1_fifoReadAddrGenerator_isFirstReg_ETC___d851 =
	     memslave_1_fifoReadAddrGenerator_isFirstReg ?
	       memslave_1_fifoReadAddrGenerator_requestFifo_D_OUT[15:6] ==
	       10'd4 :
	       memslave_1_fifoReadAddrGenerator_isLastReg ;
  assign IF_memslave_1_fifoWriteAddrGenerator_isFirstRe_ETC___d873 =
	     memslave_1_fifoWriteAddrGenerator_isFirstReg ?
	       memslave_1_fifoWriteAddrGenerator_requestFifo_D_OUT[15:6] ==
	       10'd4 :
	       memslave_1_fifoWriteAddrGenerator_isLastReg ;
  assign NOT_IF_lEcho_p_rv_core_dInst_22_BITS_6_TO_4_13_ETC___d446 =
	     nextPc__h10702 != incPC__h10719 ;
  assign NOT_ctrl_mux_rv_req_ars_first__104_BITS_15_TO__ETC___d1108 =
	     ctrl_mux_rv_req_ars_D_OUT[15:6] > 10'd4 ;
  assign NOT_ctrl_mux_rv_req_aws_first__074_BITS_15_TO__ETC___d1078 =
	     ctrl_mux_rv_req_aws_D_OUT[15:6] > 10'd4 ;
  assign NOT_memslave_0_fifoReadAddrGenerator_addrBeatF_ETC___d778 =
	     (memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] !=
	      5'd0 ||
	      CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q5) &&
	     (memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] !=
	      5'd0 ||
	      CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q6) ;
  assign _theResult___snd__h10817 =
	     (lEcho_p_rv_core_dInst[2] && lEcho_p_rv_core_dInst[3]) ?
	       nextPC__h10819 :
	       _theResult___snd__h10883 ;
  assign _theResult___snd__h10883 =
	     (lEcho_p_rv_core_dInst[2] && !lEcho_p_rv_core_dInst[3]) ?
	       nextPC__h10885 :
	       _theResult___snd__h10902 ;
  assign _theResult___snd__h10902 =
	     IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 ?
	       nextPC__h10819 :
	       incPC__h10719 ;
  assign addr__h14964 =
	     memslave_0_fifoReadAddrGenerator_isFirstReg ?
	       memslave_0_fifoReadAddrGenerator_requestFifo_D_OUT[20:16] :
	       memslave_0_fifoReadAddrGenerator_addrReg ;
  assign addr__h15515 =
	     memslave_0_fifoWriteAddrGenerator_isFirstReg ?
	       memslave_0_fifoWriteAddrGenerator_requestFifo_D_OUT[20:16] :
	       memslave_0_fifoWriteAddrGenerator_addrReg ;
  assign addr__h17831 =
	     memslave_1_fifoReadAddrGenerator_isFirstReg ?
	       memslave_1_fifoReadAddrGenerator_requestFifo_D_OUT[20:16] :
	       memslave_1_fifoReadAddrGenerator_addrReg ;
  assign addr__h18382 =
	     memslave_1_fifoWriteAddrGenerator_isFirstReg ?
	       memslave_1_fifoWriteAddrGenerator_requestFifo_D_OUT[20:16] :
	       memslave_1_fifoWriteAddrGenerator_addrReg ;
  assign alu_src2__h11211 =
	     lEcho_p_rv_core_dInst[5] ? lEcho_p_rv_core_rv2 : imm__h9658 ;
  assign burstCount___1__h14997 =
	     { 2'd0,
	       memslave_0_fifoReadAddrGenerator_requestFifo_D_OUT[15:8] } ;
  assign burstCount___1__h15548 =
	     { 2'd0,
	       memslave_0_fifoWriteAddrGenerator_requestFifo_D_OUT[15:8] } ;
  assign burstCount___1__h17864 =
	     { 2'd0,
	       memslave_1_fifoReadAddrGenerator_requestFifo_D_OUT[15:8] } ;
  assign burstCount___1__h18415 =
	     { 2'd0,
	       memslave_1_fifoWriteAddrGenerator_requestFifo_D_OUT[15:8] } ;
  assign burstCount__h14966 =
	     memslave_0_fifoReadAddrGenerator_isFirstReg ?
	       burstCount___1__h14997 :
	       memslave_0_fifoReadAddrGenerator_burstCountReg ;
  assign burstCount__h15517 =
	     memslave_0_fifoWriteAddrGenerator_isFirstReg ?
	       burstCount___1__h15548 :
	       memslave_0_fifoWriteAddrGenerator_burstCountReg ;
  assign burstCount__h17833 =
	     memslave_1_fifoReadAddrGenerator_isFirstReg ?
	       burstCount___1__h17864 :
	       memslave_1_fifoReadAddrGenerator_burstCountReg ;
  assign burstCount__h18384 =
	     memslave_1_fifoWriteAddrGenerator_isFirstReg ?
	       burstCount___1__h18415 :
	       memslave_1_fifoWriteAddrGenerator_burstCountReg ;
  assign data__h9660 =
	     (lEcho_p_rv_core_dInst[2] && lEcho_p_rv_core_dInst[5]) ?
	       imm__h9658 :
	       ((lEcho_p_rv_core_dInst[2] && !lEcho_p_rv_core_dInst[5]) ?
		  nextPC__h10819 :
		  rd_val__h11214) ;
  assign imm__h9658 =
	     (lEcho_p_rv_core_dInst[35] &&
	      lEcho_p_rv_core_dInst[34:32] == 3'd0) ?
	       { {20{lEcho_p_rv_core_dInst_BITS_31_TO_20__q1[11]}},
		 lEcho_p_rv_core_dInst_BITS_31_TO_20__q1 } :
	       ((lEcho_p_rv_core_dInst[35] &&
		 lEcho_p_rv_core_dInst[34:32] == 3'd1) ?
		  { {20{x__h9900[11]}}, x__h9900 } :
		  IF_lEcho_p_rv_core_dInst_22_BIT_35_29_AND_lEch_ETC___d364) ;
  assign incPC__h10719 = lEcho_p_rv_core_pc + 32'd4 ;
  assign lEcho_p_bram_serverAdapterA_cnt_6_PLUS_IF_lEch_ETC___d32 =
	     lEcho_p_bram_serverAdapterA_cnt +
	     (lEcho_p_bram_serverAdapterA_cnt_1_whas ? 3'd1 : 3'd0) +
	     (lEcho_p_bram_serverAdapterA_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign lEcho_p_bram_serverAdapterB_cnt_5_PLUS_IF_lEch_ETC___d91 =
	     lEcho_p_bram_serverAdapterB_cnt +
	     (lEcho_p_bram_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (lEcho_p_bram_serverAdapterB_outData_deqCalled_whas ?
		3'd7 :
		3'd0) ;
  assign lEcho_p_rv_core_dInst_22_BIT_6_23_OR_NOT_lEcho_ETC___d381 =
	     lEcho_p_rv_core_dInst[6] || lEcho_p_rv_core_dInst[4:3] != 2'b0 ||
	     CASE_lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_ETC__q3 ;
  assign lEcho_p_rv_core_dInst_22_BIT_6_23_OR_NOT_lEcho_ETC___d509 =
	     lEcho_p_rv_core_dInst[6] || lEcho_p_rv_core_dInst[4:3] != 2'b0 ||
	     CASE_lEcho_p_rv_core_mem_business_BITS_5_TO_3__ETC__q10 ;
  assign lEcho_p_rv_core_dInst_BITS_31_TO_20__q1 =
	     lEcho_p_rv_core_dInst[31:20] ;
  assign lEcho_p_rv_core_rv1_28_EQ_lEcho_p_rv_core_rv2_02___d425 =
	     lEcho_p_rv_core_rv1 == lEcho_p_rv_core_rv2 ;
  assign lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367 =
	     lEcho_p_rv_core_rv1 + imm__h9658 ;
  assign lEcho_p_rv_core_rv1_28_SLT_lEcho_p_rv_core_rv2_02___d429 =
	     (lEcho_p_rv_core_rv1 ^ 32'h80000000) <
	     (lEcho_p_rv_core_rv2 ^ 32'h80000000) ;
  assign lEcho_p_rv_core_rv1_28_ULT_lEcho_p_rv_core_rv2_02___d433 =
	     lEcho_p_rv_core_rv1 < lEcho_p_rv_core_rv2 ;
  assign mem_data1846_BITS_15_TO_0__q9 = mem_data__h11846[15:0] ;
  assign mem_data1846_BITS_7_TO_0__q8 = mem_data__h11846[7:0] ;
  assign mem_data__h11845 =
	     lEcho_p_rv_core_mem_business[0] ?
	       lEcho_p_rv_core_fromMMIO_rv_port1__read[31:0] :
	       lEcho_p_rv_core_fromDmem_rv_port1__read[31:0] ;
  assign mem_data__h11846 = mem_data__h11845 >> x__h11894 ;
  assign memslave_1_fifoWriteAddrGenerator_addrBeatFifo_ETC___d909 =
	     memslave_1_fifoWriteAddrGenerator_addrBeatFifo_EMPTY_N &&
	     (!memslave_1_fifoWriteAddrGenerator_addrBeatFifo_D_OUT[0] ||
	      memslave_1_fifoWriteDoneFifo_FULL_N) &&
	     (memslave_1_wsCtrl_D_OUT ||
	      memslave_1_ws_i_notEmpty__78_AND_CASE_memslave_ETC___d906) ;
  assign memslave_1_ws_i_notEmpty__78_AND_CASE_memslave_ETC___d906 =
	     memslave_1_ws_EMPTY_N &&
	     CASE_memslave_1_wsD_OUT_0_lEchoRequestInputR_ETC__q4 ;
  assign nextPC__h10819 = lEcho_p_rv_core_pc + imm__h9658 ;
  assign nextPC__h10885 =
	     { lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:1],
	       1'd0 } ;
  assign nextPc__h10702 =
	     (lEcho_p_rv_core_dInst[6:4] == 3'b110) ?
	       _theResult___snd__h10817 :
	       incPC__h10719 ;
  assign req_byte_en__h10343 =
	     lEcho_p_rv_core_dInst[5] ?
	       CASE_lEcho_p_rv_core_dInst_BITS_13_TO_12_0b0_0_ETC__q2 :
	       4'd0 ;
  assign shift_amount__h9750 =
	     { lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[1:0],
	       3'b0 } ;
  assign v___1__h16913 =
	     lEchoIndicationOutput_portalIfc_intr_channel + 32'd1 ;
  assign v___1__h20151 =
	     memslave_1_rsCtrl_D_OUT ?
	       v__h20164 :
	       ((memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17] ==
		 5'd4) ?
		  { 31'd0, x__h20298 } :
		  32'd0) ;
  assign v___1__h20243 = lEchoRequestInput_portalIfc_intr_channel + 32'd1 ;
  assign v__h11517 =
	     (!lEcho_p_rv_core_dInst[6] &&
	      lEcho_p_rv_core_dInst[4:3] == 2'b0) ?
	       v__h11573 :
	       lEcho_p_rv_core_rvd ;
  assign x1_avValue_data__h17175 =
	     memslave_0_rsCtrl_D_OUT ? v__h16829 : x1_avValue_data__h17159 ;
  assign x__h10130 =
	     { lEcho_p_rv_core_dInst[31],
	       lEcho_p_rv_core_dInst[19:12],
	       lEcho_p_rv_core_dInst[20],
	       lEcho_p_rv_core_dInst[30:21],
	       1'b0 } ;
  assign x__h10534 =
	     { lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2],
	       2'b0 } ;
  assign x__h10535 = lEcho_p_rv_core_rv2 << shift_amount__h9750 ;
  assign x__h11365 =
	     (lEcho_p_rv_core_rv1 ^ 32'h80000000) <
	     (alu_src2__h11211 ^ 32'h80000000) ;
  assign x__h11372 = lEcho_p_rv_core_rv1 < alu_src2__h11211 ;
  assign x__h11894 = { lEcho_p_rv_core_mem_business[2:1], 3'b0 } ;
  assign x__h12970 =
	     lEcho_p_bram_serverAdapterB_outDataCore_EMPTY_N ?
	       lEcho_p_bram_serverAdapterB_outDataCore_D_OUT :
	       lEcho_p_bram_memory_DOB ;
  assign x__h13367 =
	     lEcho_p_bram_serverAdapterA_outDataCore_EMPTY_N ?
	       lEcho_p_bram_serverAdapterA_outDataCore_D_OUT :
	       lEcho_p_bram_memory_DOA ;
  assign x__h25214 = ctrl_mux_rv_req_aws_D_OUT[27:21] - 7'd1 ;
  assign x__h25614 = ctrl_mux_rv_req_ars_D_OUT[27:21] - 7'd1 ;
  assign x__h9900 =
	     { lEcho_p_rv_core_dInst[31:25], lEcho_p_rv_core_dInst[11:7] } ;
  assign x__h9969 =
	     { lEcho_p_rv_core_dInst[31],
	       lEcho_p_rv_core_dInst[7],
	       lEcho_p_rv_core_dInst[30:25],
	       lEcho_p_rv_core_dInst[11:8],
	       1'b0 } ;
  always@(memslave_0_rs_D_OUT or
	  lEchoIndicationOutput_portalIfc_indications_0_first or
	  lEchoIndicationOutput_portalIfc_indications_1_first)
  begin
    case (memslave_0_rs_D_OUT)
      1'd0: v__h16980 = lEchoIndicationOutput_portalIfc_indications_0_first;
      1'd1: v__h16980 = lEchoIndicationOutput_portalIfc_indications_1_first;
    endcase
  end
  always@(memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT or
	  lEchoIndicationOutput_portalIfc_intr_status or
	  ctrlPort_0_interruptEnableReg or
	  v___1__h16913 or
	  ctrlPort_0_num_portals_reg or
	  ctrlPort_0_cycle_count or ctrlPort_0_snapshot)
  begin
    case (memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17])
      5'd0:
	  v__h16829 =
	      lEchoIndicationOutput_portalIfc_intr_status ? 32'd1 : 32'd0;
      5'd4: v__h16829 = ctrlPort_0_interruptEnableReg ? 32'd1 : 32'd0;
      5'd8: v__h16829 = 32'd2;
      5'h0C:
	  v__h16829 =
	      lEchoIndicationOutput_portalIfc_intr_status ?
		v___1__h16913 :
		32'd0;
      5'h10: v__h16829 = 32'd5;
      5'h14: v__h16829 = ctrlPort_0_num_portals_reg;
      5'h18: v__h16829 = ctrlPort_0_cycle_count[63:32];
      5'h1C: v__h16829 = ctrlPort_0_snapshot;
      default: v__h16829 = 32'h005A05A0;
    endcase
  end
  always@(memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT or
	  lEchoRequestInput_portalIfc_intr_status or
	  ctrlPort_1_interruptEnableReg or
	  v___1__h20243 or
	  ctrlPort_1_num_portals_reg or
	  ctrlPort_1_cycle_count or ctrlPort_1_snapshot)
  begin
    case (memslave_1_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17])
      5'd0:
	  v__h20164 = lEchoRequestInput_portalIfc_intr_status ? 32'd1 : 32'd0;
      5'd4: v__h20164 = ctrlPort_1_interruptEnableReg ? 32'd1 : 32'd0;
      5'd8: v__h20164 = 32'd2;
      5'h0C:
	  v__h20164 =
	      lEchoRequestInput_portalIfc_intr_status ? v___1__h20243 : 32'd0;
      5'h10: v__h20164 = 32'd6;
      5'h14: v__h20164 = ctrlPort_1_num_portals_reg;
      5'h18: v__h20164 = ctrlPort_1_cycle_count[63:32];
      5'h1C: v__h20164 = ctrlPort_1_snapshot;
      default: v__h20164 = 32'h005A05A0;
    endcase
  end
  always@(memslave_0_rs_D_OUT or
	  lEchoIndicationOutput_portalIfc_indications_0_notEmpty or
	  lEchoIndicationOutput_portalIfc_indications_1_notEmpty)
  begin
    case (memslave_0_rs_D_OUT)
      1'd0:
	  x__h17202 = lEchoIndicationOutput_portalIfc_indications_0_notEmpty;
      1'd1:
	  x__h17202 = lEchoIndicationOutput_portalIfc_indications_1_notEmpty;
    endcase
  end
  always@(memslave_1_rs_D_OUT or
	  lEchoRequestInput_portalIfc_requests_0_notFull or
	  lEchoRequestInput_portalIfc_requests_1_notFull or
	  lEchoRequestInput_portalIfc_requests_2_notFull)
  begin
    case (memslave_1_rs_D_OUT)
      2'd0: x__h20298 = lEchoRequestInput_portalIfc_requests_0_notFull;
      2'd1: x__h20298 = lEchoRequestInput_portalIfc_requests_1_notFull;
      2'd2: x__h20298 = lEchoRequestInput_portalIfc_requests_2_notFull;
      2'd3: x__h20298 = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT or
	  v__h16980 or x__h17202)
  begin
    case (memslave_0_fifoReadAddrGenerator_addrBeatFifo_D_OUT[21:17])
      5'd0: x1_avValue_data__h17159 = v__h16980;
      5'd4: x1_avValue_data__h17159 = { 31'd0, x__h17202 };
      default: x1_avValue_data__h17159 = 32'd0;
    endcase
  end
  always@(lEcho_p_rv_core_dInst or
	  lEcho_p_rv_core_rv1 or alu_src2__h11211 or x__h11365 or x__h11372)
  begin
    case (lEcho_p_rv_core_dInst[14:12])
      3'b0:
	  rd_val__h11214 =
	      (lEcho_p_rv_core_dInst[5] && lEcho_p_rv_core_dInst[30]) ?
		lEcho_p_rv_core_rv1 - alu_src2__h11211 :
		lEcho_p_rv_core_rv1 + alu_src2__h11211;
      3'b001: rd_val__h11214 = lEcho_p_rv_core_rv1 << alu_src2__h11211[4:0];
      3'b010: rd_val__h11214 = { 31'd0, x__h11365 };
      3'b011: rd_val__h11214 = { 31'd0, x__h11372 };
      3'b100: rd_val__h11214 = lEcho_p_rv_core_rv1 ^ alu_src2__h11211;
      3'b101:
	  rd_val__h11214 =
	      lEcho_p_rv_core_dInst[30] ?
		lEcho_p_rv_core_rv1 >> alu_src2__h11211[4:0] |
		~(32'hFFFFFFFF >> alu_src2__h11211[4:0]) &
		{32{lEcho_p_rv_core_rv1[31]}} :
		lEcho_p_rv_core_rv1 >> alu_src2__h11211[4:0];
      3'b110: rd_val__h11214 = lEcho_p_rv_core_rv1 | alu_src2__h11211;
      3'b111: rd_val__h11214 = lEcho_p_rv_core_rv1 & alu_src2__h11211;
    endcase
  end
  always@(lEcho_p_rv_core_dInst or
	  lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367)
  begin
    case (lEcho_p_rv_core_dInst[13:12])
      2'b0:
	  CASE_lEcho_p_rv_core_dInst_BITS_13_TO_12_0b0_0_ETC__q2 =
	      4'b0001 <<
	      lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[1:0];
      2'b01:
	  CASE_lEcho_p_rv_core_dInst_BITS_13_TO_12_0b0_0_ETC__q2 =
	      4'b0011 <<
	      lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[1:0];
      2'b10:
	  CASE_lEcho_p_rv_core_dInst_BITS_13_TO_12_0b0_0_ETC__q2 =
	      4'b1111 <<
	      lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[1:0];
      2'd3: CASE_lEcho_p_rv_core_dInst_BITS_13_TO_12_0b0_0_ETC__q2 = 4'd0;
    endcase
  end
  always@(lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367 or
	  lEcho_p_rv_core_toDmem_rv or lEcho_p_rv_core_toMMIO_rv)
  begin
    case (lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_core_ETC___d367[31:2])
      30'd1006649340, 30'd1006649341, 30'd1006649342:
	  CASE_lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_ETC__q3 =
	      !lEcho_p_rv_core_toMMIO_rv[68];
      default: CASE_lEcho_p_rv_core_rv1_28_PLUS_IF_lEcho_p_rv_ETC__q3 =
		   !lEcho_p_rv_core_toDmem_rv[68];
    endcase
  end
  always@(lEcho_p_rv_core_dInst or
	  lEcho_p_rv_core_rv1_28_ULT_lEcho_p_rv_core_rv2_02___d433 or
	  lEcho_p_rv_core_rv1_28_EQ_lEcho_p_rv_core_rv2_02___d425 or
	  lEcho_p_rv_core_rv1_28_SLT_lEcho_p_rv_core_rv2_02___d429)
  begin
    case (lEcho_p_rv_core_dInst[14:12])
      3'b0:
	  IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 =
	      lEcho_p_rv_core_rv1_28_EQ_lEcho_p_rv_core_rv2_02___d425;
      3'b001:
	  IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 =
	      !lEcho_p_rv_core_rv1_28_EQ_lEcho_p_rv_core_rv2_02___d425;
      3'b100:
	  IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 =
	      lEcho_p_rv_core_rv1_28_SLT_lEcho_p_rv_core_rv2_02___d429;
      3'b101:
	  IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 =
	      !lEcho_p_rv_core_rv1_28_SLT_lEcho_p_rv_core_rv2_02___d429;
      3'b110:
	  IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 =
	      lEcho_p_rv_core_rv1_28_ULT_lEcho_p_rv_core_rv2_02___d433;
      default: IF_lEcho_p_rv_core_dInst_22_BITS_14_TO_12_23_E_ETC___d439 =
		   !lEcho_p_rv_core_rv1_28_ULT_lEcho_p_rv_core_rv2_02___d433;
    endcase
  end
  always@(memslave_1_ws_D_OUT or
	  lEchoRequestInput_RDY_portalIfc_requests_0_enq or
	  lEchoRequestInput_RDY_portalIfc_requests_1_enq or
	  lEchoRequestInput_RDY_portalIfc_requests_2_enq)
  begin
    case (memslave_1_ws_D_OUT)
      2'd0:
	  CASE_memslave_1_wsD_OUT_0_lEchoRequestInputR_ETC__q4 =
	      lEchoRequestInput_RDY_portalIfc_requests_0_enq;
      2'd1:
	  CASE_memslave_1_wsD_OUT_0_lEchoRequestInputR_ETC__q4 =
	      lEchoRequestInput_RDY_portalIfc_requests_1_enq;
      2'd2:
	  CASE_memslave_1_wsD_OUT_0_lEchoRequestInputR_ETC__q4 =
	      lEchoRequestInput_RDY_portalIfc_requests_2_enq;
      2'd3: CASE_memslave_1_wsD_OUT_0_lEchoRequestInputR_ETC__q4 = 1'd1;
    endcase
  end
  always@(ctrl_mux_rv_ws_D_OUT or
	  memslave_0_req_aws_FULL_N or
	  memslave_0_ws_FULL_N or
	  memslave_0_wsCtrl_FULL_N or
	  memslave_1_req_aws_FULL_N or
	  memslave_1_ws_FULL_N or memslave_1_wsCtrl_FULL_N)
  begin
    case (ctrl_mux_rv_ws_D_OUT)
      1'd0:
	  CASE_ctrl_mux_rv_ws_first__059_0_memslave_0_re_ETC___d1070 =
	      memslave_0_req_aws_FULL_N && memslave_0_ws_FULL_N &&
	      memslave_0_wsCtrl_FULL_N;
      1'd1:
	  CASE_ctrl_mux_rv_ws_first__059_0_memslave_0_re_ETC___d1070 =
	      memslave_1_req_aws_FULL_N && memslave_1_ws_FULL_N &&
	      memslave_1_wsCtrl_FULL_N;
    endcase
  end
  always@(memslave_0_rs_D_OUT or
	  lEchoIndicationOutput_RDY_portalIfc_indications_0_first or
	  lEchoIndicationOutput_RDY_portalIfc_indications_1_first)
  begin
    case (memslave_0_rs_D_OUT)
      1'd0:
	  CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q5 =
	      lEchoIndicationOutput_RDY_portalIfc_indications_0_first;
      1'd1:
	  CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q5 =
	      lEchoIndicationOutput_RDY_portalIfc_indications_1_first;
    endcase
  end
  always@(memslave_0_rs_D_OUT or
	  lEchoIndicationOutput_RDY_portalIfc_indications_0_deq or
	  lEchoIndicationOutput_RDY_portalIfc_indications_1_deq)
  begin
    case (memslave_0_rs_D_OUT)
      1'd0:
	  CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q6 =
	      lEchoIndicationOutput_RDY_portalIfc_indications_0_deq;
      1'd1:
	  CASE_memslave_0_rsD_OUT_0_lEchoIndicationOutp_ETC__q6 =
	      lEchoIndicationOutput_RDY_portalIfc_indications_1_deq;
    endcase
  end
  always@(ctrl_mux_rv_rs_D_OUT or
	  memslave_0_req_ars_FULL_N or
	  memslave_0_rs_FULL_N or
	  memslave_0_rsCtrl_FULL_N or
	  memslave_1_req_ars_FULL_N or
	  memslave_1_rs_FULL_N or memslave_1_rsCtrl_FULL_N)
  begin
    case (ctrl_mux_rv_rs_D_OUT)
      1'd0:
	  CASE_ctrl_mux_rv_rs_first__089_0_memslave_0_re_ETC___d1100 =
	      memslave_0_req_ars_FULL_N && memslave_0_rs_FULL_N &&
	      memslave_0_rsCtrl_FULL_N;
      1'd1:
	  CASE_ctrl_mux_rv_rs_first__089_0_memslave_0_re_ETC___d1100 =
	      memslave_1_req_ars_FULL_N && memslave_1_rs_FULL_N &&
	      memslave_1_rsCtrl_FULL_N;
    endcase
  end
  always@(ctrl_mux_rv_ws_D_OUT or
	  memslave_0_doneFifo_EMPTY_N or memslave_1_doneFifo_EMPTY_N)
  begin
    case (ctrl_mux_rv_ws_D_OUT)
      1'd0:
	  CASE_ctrl_mux_rv_wsD_OUT_0_memslave_0_doneFif_ETC__q7 =
	      memslave_0_doneFifo_EMPTY_N;
      1'd1:
	  CASE_ctrl_mux_rv_wsD_OUT_0_memslave_0_doneFif_ETC__q7 =
	      memslave_1_doneFifo_EMPTY_N;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read or
	  lEcho_p_rv_core_rf_1 or
	  lEcho_p_rv_core_rf_2 or
	  lEcho_p_rv_core_rf_3 or
	  lEcho_p_rv_core_rf_4 or
	  lEcho_p_rv_core_rf_5 or
	  lEcho_p_rv_core_rf_6 or
	  lEcho_p_rv_core_rf_7 or
	  lEcho_p_rv_core_rf_8 or
	  lEcho_p_rv_core_rf_9 or
	  lEcho_p_rv_core_rf_10 or
	  lEcho_p_rv_core_rf_11 or
	  lEcho_p_rv_core_rf_12 or
	  lEcho_p_rv_core_rf_13 or
	  lEcho_p_rv_core_rf_14 or
	  lEcho_p_rv_core_rf_15 or
	  lEcho_p_rv_core_rf_16 or
	  lEcho_p_rv_core_rf_17 or
	  lEcho_p_rv_core_rf_18 or
	  lEcho_p_rv_core_rf_19 or
	  lEcho_p_rv_core_rf_20 or
	  lEcho_p_rv_core_rf_21 or
	  lEcho_p_rv_core_rf_22 or
	  lEcho_p_rv_core_rf_23 or
	  lEcho_p_rv_core_rf_24 or
	  lEcho_p_rv_core_rf_25 or
	  lEcho_p_rv_core_rf_26 or
	  lEcho_p_rv_core_rf_27 or
	  lEcho_p_rv_core_rf_28 or
	  lEcho_p_rv_core_rf_29 or
	  lEcho_p_rv_core_rf_30 or lEcho_p_rv_core_rf_31)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[19:15])
      5'b0: rs1__h8457 = 32'd0;
      5'd1: rs1__h8457 = lEcho_p_rv_core_rf_1;
      5'd2: rs1__h8457 = lEcho_p_rv_core_rf_2;
      5'd3: rs1__h8457 = lEcho_p_rv_core_rf_3;
      5'd4: rs1__h8457 = lEcho_p_rv_core_rf_4;
      5'd5: rs1__h8457 = lEcho_p_rv_core_rf_5;
      5'd6: rs1__h8457 = lEcho_p_rv_core_rf_6;
      5'd7: rs1__h8457 = lEcho_p_rv_core_rf_7;
      5'd8: rs1__h8457 = lEcho_p_rv_core_rf_8;
      5'd9: rs1__h8457 = lEcho_p_rv_core_rf_9;
      5'd10: rs1__h8457 = lEcho_p_rv_core_rf_10;
      5'd11: rs1__h8457 = lEcho_p_rv_core_rf_11;
      5'd12: rs1__h8457 = lEcho_p_rv_core_rf_12;
      5'd13: rs1__h8457 = lEcho_p_rv_core_rf_13;
      5'd14: rs1__h8457 = lEcho_p_rv_core_rf_14;
      5'd15: rs1__h8457 = lEcho_p_rv_core_rf_15;
      5'd16: rs1__h8457 = lEcho_p_rv_core_rf_16;
      5'd17: rs1__h8457 = lEcho_p_rv_core_rf_17;
      5'd18: rs1__h8457 = lEcho_p_rv_core_rf_18;
      5'd19: rs1__h8457 = lEcho_p_rv_core_rf_19;
      5'd20: rs1__h8457 = lEcho_p_rv_core_rf_20;
      5'd21: rs1__h8457 = lEcho_p_rv_core_rf_21;
      5'd22: rs1__h8457 = lEcho_p_rv_core_rf_22;
      5'd23: rs1__h8457 = lEcho_p_rv_core_rf_23;
      5'd24: rs1__h8457 = lEcho_p_rv_core_rf_24;
      5'd25: rs1__h8457 = lEcho_p_rv_core_rf_25;
      5'd26: rs1__h8457 = lEcho_p_rv_core_rf_26;
      5'd27: rs1__h8457 = lEcho_p_rv_core_rf_27;
      5'd28: rs1__h8457 = lEcho_p_rv_core_rf_28;
      5'd29: rs1__h8457 = lEcho_p_rv_core_rf_29;
      5'd30: rs1__h8457 = lEcho_p_rv_core_rf_30;
      5'd31: rs1__h8457 = lEcho_p_rv_core_rf_31;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read or
	  lEcho_p_rv_core_rf_1 or
	  lEcho_p_rv_core_rf_2 or
	  lEcho_p_rv_core_rf_3 or
	  lEcho_p_rv_core_rf_4 or
	  lEcho_p_rv_core_rf_5 or
	  lEcho_p_rv_core_rf_6 or
	  lEcho_p_rv_core_rf_7 or
	  lEcho_p_rv_core_rf_8 or
	  lEcho_p_rv_core_rf_9 or
	  lEcho_p_rv_core_rf_10 or
	  lEcho_p_rv_core_rf_11 or
	  lEcho_p_rv_core_rf_12 or
	  lEcho_p_rv_core_rf_13 or
	  lEcho_p_rv_core_rf_14 or
	  lEcho_p_rv_core_rf_15 or
	  lEcho_p_rv_core_rf_16 or
	  lEcho_p_rv_core_rf_17 or
	  lEcho_p_rv_core_rf_18 or
	  lEcho_p_rv_core_rf_19 or
	  lEcho_p_rv_core_rf_20 or
	  lEcho_p_rv_core_rf_21 or
	  lEcho_p_rv_core_rf_22 or
	  lEcho_p_rv_core_rf_23 or
	  lEcho_p_rv_core_rf_24 or
	  lEcho_p_rv_core_rf_25 or
	  lEcho_p_rv_core_rf_26 or
	  lEcho_p_rv_core_rf_27 or
	  lEcho_p_rv_core_rf_28 or
	  lEcho_p_rv_core_rf_29 or
	  lEcho_p_rv_core_rf_30 or lEcho_p_rv_core_rf_31)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[24:20])
      5'd0: rs2__h8458 = 32'd0;
      5'd1: rs2__h8458 = lEcho_p_rv_core_rf_1;
      5'd2: rs2__h8458 = lEcho_p_rv_core_rf_2;
      5'd3: rs2__h8458 = lEcho_p_rv_core_rf_3;
      5'd4: rs2__h8458 = lEcho_p_rv_core_rf_4;
      5'd5: rs2__h8458 = lEcho_p_rv_core_rf_5;
      5'd6: rs2__h8458 = lEcho_p_rv_core_rf_6;
      5'd7: rs2__h8458 = lEcho_p_rv_core_rf_7;
      5'd8: rs2__h8458 = lEcho_p_rv_core_rf_8;
      5'd9: rs2__h8458 = lEcho_p_rv_core_rf_9;
      5'd10: rs2__h8458 = lEcho_p_rv_core_rf_10;
      5'd11: rs2__h8458 = lEcho_p_rv_core_rf_11;
      5'd12: rs2__h8458 = lEcho_p_rv_core_rf_12;
      5'd13: rs2__h8458 = lEcho_p_rv_core_rf_13;
      5'd14: rs2__h8458 = lEcho_p_rv_core_rf_14;
      5'd15: rs2__h8458 = lEcho_p_rv_core_rf_15;
      5'd16: rs2__h8458 = lEcho_p_rv_core_rf_16;
      5'd17: rs2__h8458 = lEcho_p_rv_core_rf_17;
      5'd18: rs2__h8458 = lEcho_p_rv_core_rf_18;
      5'd19: rs2__h8458 = lEcho_p_rv_core_rf_19;
      5'd20: rs2__h8458 = lEcho_p_rv_core_rf_20;
      5'd21: rs2__h8458 = lEcho_p_rv_core_rf_21;
      5'd22: rs2__h8458 = lEcho_p_rv_core_rf_22;
      5'd23: rs2__h8458 = lEcho_p_rv_core_rf_23;
      5'd24: rs2__h8458 = lEcho_p_rv_core_rf_24;
      5'd25: rs2__h8458 = lEcho_p_rv_core_rf_25;
      5'd26: rs2__h8458 = lEcho_p_rv_core_rf_26;
      5'd27: rs2__h8458 = lEcho_p_rv_core_rf_27;
      5'd28: rs2__h8458 = lEcho_p_rv_core_rf_28;
      5'd29: rs2__h8458 = lEcho_p_rv_core_rf_29;
      5'd30: rs2__h8458 = lEcho_p_rv_core_rf_30;
      5'd31: rs2__h8458 = lEcho_p_rv_core_rf_31;
    endcase
  end
  always@(lEcho_p_rv_core_mem_business or
	  lEcho_p_rv_core_rvd or
	  mem_data1846_BITS_7_TO_0__q8 or
	  mem_data1846_BITS_15_TO_0__q9 or mem_data__h11846)
  begin
    case (lEcho_p_rv_core_mem_business[5:3])
      3'b0:
	  v__h11573 =
	      { {24{mem_data1846_BITS_7_TO_0__q8[7]}},
		mem_data1846_BITS_7_TO_0__q8 };
      3'b001:
	  v__h11573 =
	      { {16{mem_data1846_BITS_15_TO_0__q9[15]}},
		mem_data1846_BITS_15_TO_0__q9 };
      3'b010: v__h11573 = mem_data__h11846;
      3'b100: v__h11573 = { 24'd0, mem_data__h11846[7:0] };
      3'b101: v__h11573 = { 16'd0, mem_data__h11846[15:0] };
      default: v__h11573 = lEcho_p_rv_core_rvd;
    endcase
  end
  always@(lEcho_p_rv_core_mem_business or
	  IF_lEcho_p_rv_core_mem_business_87_BIT_0_88_TH_ETC___d493)
  begin
    case (lEcho_p_rv_core_mem_business[5:3])
      3'b0, 3'b001, 3'b100, 3'b101:
	  CASE_lEcho_p_rv_core_mem_business_BITS_5_TO_3__ETC__q10 =
	      IF_lEcho_p_rv_core_mem_business_87_BIT_0_88_TH_ETC___d493;
      default: CASE_lEcho_p_rv_core_mem_business_BITS_5_TO_3__ETC__q10 =
		   lEcho_p_rv_core_mem_business[5:3] != 3'b010 ||
		   IF_lEcho_p_rv_core_mem_business_87_BIT_0_88_TH_ETC___d493;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[31:20])
      12'b0, 12'b000000000001, 12'b001100000010:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q11 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[19:15] == 5'b0;
      default: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q11 =
		   lEcho_p_rv_core_fromImem_rv_port1__read[31:20] ==
		   12'b000100000101 &&
		   lEcho_p_rv_core_fromImem_rv_port1__read[19:15] == 5'b0;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read or
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q11)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[6:0])
      7'b1100011:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q12 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b0 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b001 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b100 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b101 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b110 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b111;
      7'b1100111:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q12 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b0;
      default: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q12 =
		   lEcho_p_rv_core_fromImem_rv_port1__read[6:0] ==
		   7'b1101111 ||
		   lEcho_p_rv_core_fromImem_rv_port1__read[6:0] ==
		   7'b1110011 &&
		   lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b0 &&
		   lEcho_p_rv_core_fromImem_rv_port1__read[11:7] == 5'b0 &&
		   CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q11;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[14:12])
      3'b0, 3'b101:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q13 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[31:25] == 7'b0 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[31:25] == 7'b0100000;
      default: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q13 =
		   (lEcho_p_rv_core_fromImem_rv_port1__read[14:12] ==
		    3'b001 ||
		    lEcho_p_rv_core_fromImem_rv_port1__read[14:12] ==
		    3'b010 ||
		    lEcho_p_rv_core_fromImem_rv_port1__read[14:12] ==
		    3'b011 ||
		    lEcho_p_rv_core_fromImem_rv_port1__read[14:12] ==
		    3'b100 ||
		    lEcho_p_rv_core_fromImem_rv_port1__read[14:12] ==
		    3'b110 ||
		    lEcho_p_rv_core_fromImem_rv_port1__read[14:12] ==
		    3'b111) &&
		   lEcho_p_rv_core_fromImem_rv_port1__read[31:25] == 7'b0;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read or
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q12 or
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q13)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[6:0])
      7'b0100011:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q14 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b0 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b001 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b010;
      7'b0110011:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q14 =
	      CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q13;
      default: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q14 =
		   lEcho_p_rv_core_fromImem_rv_port1__read[6:0] ==
		   7'b0110111 ||
		   CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q12;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read or
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q14)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[6:0])
      7'b0000011:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q15 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b0 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b001 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b010 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b100 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b101;
      7'b0010011:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q15 =
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b0 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b010 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b011 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b100 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b110 ||
	      lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b111 ||
	      ((lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b001) ?
		 lEcho_p_rv_core_fromImem_rv_port1__read[31:26] == 6'b0 &&
		 !lEcho_p_rv_core_fromImem_rv_port1__read[25] :
		 lEcho_p_rv_core_fromImem_rv_port1__read[14:12] == 3'b101 &&
		 (lEcho_p_rv_core_fromImem_rv_port1__read[31:26] == 6'b0 ||
		  lEcho_p_rv_core_fromImem_rv_port1__read[31:26] ==
		  6'b010000) &&
		 !lEcho_p_rv_core_fromImem_rv_port1__read[25]);
      default: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q15 =
		   lEcho_p_rv_core_fromImem_rv_port1__read[6:0] ==
		   7'b0010111 ||
		   CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q14;
    endcase
  end
  always@(lEcho_p_rv_core_fromImem_rv_port1__read)
  begin
    case (lEcho_p_rv_core_fromImem_rv_port1__read[6:2])
      5'b0, 5'b00001, 5'b00100, 5'b00110, 5'b11001:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16 = 3'd0;
      5'b00101, 5'b01101:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16 = 3'd3;
      5'b01000, 5'b01001:
	  CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16 = 3'd1;
      5'b11000: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16 = 3'd2;
      default: CASE_lEcho_p_rv_core_fromImem_rvport1__read_B_ETC__q16 = 3'd4;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ctrlPort_0_cycle_count <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ctrlPort_0_interruptEnableReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctrlPort_0_num_portals_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctrlPort_0_snapshot <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctrlPort_1_cycle_count <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ctrlPort_1_interruptEnableReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctrlPort_1_num_portals_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctrlPort_1_snapshot <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctrl_mux_rv_lastWriteDataSeen <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lEcho_p_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	lEcho_p_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lEcho_p_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	lEcho_p_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lEcho_p_cycle_count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_dInst <= `BSV_ASSIGNMENT_DELAY 40'h0200000000;
	lEcho_p_rv_core_fromDmem_rv <= `BSV_ASSIGNMENT_DELAY
	    69'h0AAAAAAAAAAAAAAAAA;
	lEcho_p_rv_core_fromImem_rv <= `BSV_ASSIGNMENT_DELAY
	    69'h0AAAAAAAAAAAAAAAAA;
	lEcho_p_rv_core_fromMMIO_rv <= `BSV_ASSIGNMENT_DELAY
	    69'h0AAAAAAAAAAAAAAAAA;
	lEcho_p_rv_core_lfh <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_mem_business <= `BSV_ASSIGNMENT_DELAY 6'h2A;
	lEcho_p_rv_core_pc <= `BSV_ASSIGNMENT_DELAY 32'h0;
	lEcho_p_rv_core_rf_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rf_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rv1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rv2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_rvd <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lEcho_p_rv_core_starting <= `BSV_ASSIGNMENT_DELAY 1'd1;
	lEcho_p_rv_core_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lEcho_p_rv_core_toDmem_rv <= `BSV_ASSIGNMENT_DELAY
	    69'h0AAAAAAAAAAAAAAAAA;
	lEcho_p_rv_core_toImem_rv <= `BSV_ASSIGNMENT_DELAY
	    69'h0AAAAAAAAAAAAAAAAA;
	lEcho_p_rv_core_toMMIO_rv <= `BSV_ASSIGNMENT_DELAY
	    69'h0AAAAAAAAAAAAAAAAA;
	lEcho_p_status <= `BSV_ASSIGNMENT_DELAY 32'd0;
	memslave_0_fifoReadAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	memslave_0_fifoReadAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	memslave_0_fifoReadAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	memslave_0_fifoReadAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	memslave_0_fifoWriteAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	memslave_0_fifoWriteAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	memslave_0_fifoWriteAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	memslave_0_fifoWriteAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	memslave_1_fifoReadAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	memslave_1_fifoReadAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	memslave_1_fifoReadAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	memslave_1_fifoReadAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	memslave_1_fifoWriteAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	memslave_1_fifoWriteAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	    10'd0;
	memslave_1_fifoWriteAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	memslave_1_fifoWriteAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
      end
    else
      begin
        if (ctrlPort_0_cycle_count_EN)
	  ctrlPort_0_cycle_count <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_0_cycle_count_D_IN;
	if (ctrlPort_0_interruptEnableReg_EN)
	  ctrlPort_0_interruptEnableReg <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_0_interruptEnableReg_D_IN;
	if (ctrlPort_0_num_portals_reg_EN)
	  ctrlPort_0_num_portals_reg <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_0_num_portals_reg_D_IN;
	if (ctrlPort_0_snapshot_EN)
	  ctrlPort_0_snapshot <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_0_snapshot_D_IN;
	if (ctrlPort_1_cycle_count_EN)
	  ctrlPort_1_cycle_count <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_1_cycle_count_D_IN;
	if (ctrlPort_1_interruptEnableReg_EN)
	  ctrlPort_1_interruptEnableReg <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_1_interruptEnableReg_D_IN;
	if (ctrlPort_1_num_portals_reg_EN)
	  ctrlPort_1_num_portals_reg <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_1_num_portals_reg_D_IN;
	if (ctrlPort_1_snapshot_EN)
	  ctrlPort_1_snapshot <= `BSV_ASSIGNMENT_DELAY
	      ctrlPort_1_snapshot_D_IN;
	if (ctrl_mux_rv_lastWriteDataSeen_EN)
	  ctrl_mux_rv_lastWriteDataSeen <= `BSV_ASSIGNMENT_DELAY
	      ctrl_mux_rv_lastWriteDataSeen_D_IN;
	if (lEcho_p_bram_serverAdapterA_cnt_EN)
	  lEcho_p_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_bram_serverAdapterA_cnt_D_IN;
	if (lEcho_p_bram_serverAdapterA_s1_EN)
	  lEcho_p_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_bram_serverAdapterA_s1_D_IN;
	if (lEcho_p_bram_serverAdapterB_cnt_EN)
	  lEcho_p_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_bram_serverAdapterB_cnt_D_IN;
	if (lEcho_p_bram_serverAdapterB_s1_EN)
	  lEcho_p_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_bram_serverAdapterB_s1_D_IN;
	if (lEcho_p_cycle_count_EN)
	  lEcho_p_cycle_count <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_cycle_count_D_IN;
	if (lEcho_p_rv_core_dInst_EN)
	  lEcho_p_rv_core_dInst <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_dInst_D_IN;
	if (lEcho_p_rv_core_fromDmem_rv_EN)
	  lEcho_p_rv_core_fromDmem_rv <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_fromDmem_rv_D_IN;
	if (lEcho_p_rv_core_fromImem_rv_EN)
	  lEcho_p_rv_core_fromImem_rv <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_fromImem_rv_D_IN;
	if (lEcho_p_rv_core_fromMMIO_rv_EN)
	  lEcho_p_rv_core_fromMMIO_rv <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_fromMMIO_rv_D_IN;
	if (lEcho_p_rv_core_lfh_EN)
	  lEcho_p_rv_core_lfh <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_lfh_D_IN;
	if (lEcho_p_rv_core_mem_business_EN)
	  lEcho_p_rv_core_mem_business <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_mem_business_D_IN;
	if (lEcho_p_rv_core_pc_EN)
	  lEcho_p_rv_core_pc <= `BSV_ASSIGNMENT_DELAY lEcho_p_rv_core_pc_D_IN;
	if (lEcho_p_rv_core_rf_0_EN)
	  lEcho_p_rv_core_rf_0 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_0_D_IN;
	if (lEcho_p_rv_core_rf_1_EN)
	  lEcho_p_rv_core_rf_1 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_1_D_IN;
	if (lEcho_p_rv_core_rf_10_EN)
	  lEcho_p_rv_core_rf_10 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_10_D_IN;
	if (lEcho_p_rv_core_rf_11_EN)
	  lEcho_p_rv_core_rf_11 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_11_D_IN;
	if (lEcho_p_rv_core_rf_12_EN)
	  lEcho_p_rv_core_rf_12 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_12_D_IN;
	if (lEcho_p_rv_core_rf_13_EN)
	  lEcho_p_rv_core_rf_13 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_13_D_IN;
	if (lEcho_p_rv_core_rf_14_EN)
	  lEcho_p_rv_core_rf_14 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_14_D_IN;
	if (lEcho_p_rv_core_rf_15_EN)
	  lEcho_p_rv_core_rf_15 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_15_D_IN;
	if (lEcho_p_rv_core_rf_16_EN)
	  lEcho_p_rv_core_rf_16 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_16_D_IN;
	if (lEcho_p_rv_core_rf_17_EN)
	  lEcho_p_rv_core_rf_17 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_17_D_IN;
	if (lEcho_p_rv_core_rf_18_EN)
	  lEcho_p_rv_core_rf_18 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_18_D_IN;
	if (lEcho_p_rv_core_rf_19_EN)
	  lEcho_p_rv_core_rf_19 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_19_D_IN;
	if (lEcho_p_rv_core_rf_2_EN)
	  lEcho_p_rv_core_rf_2 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_2_D_IN;
	if (lEcho_p_rv_core_rf_20_EN)
	  lEcho_p_rv_core_rf_20 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_20_D_IN;
	if (lEcho_p_rv_core_rf_21_EN)
	  lEcho_p_rv_core_rf_21 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_21_D_IN;
	if (lEcho_p_rv_core_rf_22_EN)
	  lEcho_p_rv_core_rf_22 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_22_D_IN;
	if (lEcho_p_rv_core_rf_23_EN)
	  lEcho_p_rv_core_rf_23 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_23_D_IN;
	if (lEcho_p_rv_core_rf_24_EN)
	  lEcho_p_rv_core_rf_24 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_24_D_IN;
	if (lEcho_p_rv_core_rf_25_EN)
	  lEcho_p_rv_core_rf_25 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_25_D_IN;
	if (lEcho_p_rv_core_rf_26_EN)
	  lEcho_p_rv_core_rf_26 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_26_D_IN;
	if (lEcho_p_rv_core_rf_27_EN)
	  lEcho_p_rv_core_rf_27 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_27_D_IN;
	if (lEcho_p_rv_core_rf_28_EN)
	  lEcho_p_rv_core_rf_28 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_28_D_IN;
	if (lEcho_p_rv_core_rf_29_EN)
	  lEcho_p_rv_core_rf_29 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_29_D_IN;
	if (lEcho_p_rv_core_rf_3_EN)
	  lEcho_p_rv_core_rf_3 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_3_D_IN;
	if (lEcho_p_rv_core_rf_30_EN)
	  lEcho_p_rv_core_rf_30 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_30_D_IN;
	if (lEcho_p_rv_core_rf_31_EN)
	  lEcho_p_rv_core_rf_31 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_31_D_IN;
	if (lEcho_p_rv_core_rf_4_EN)
	  lEcho_p_rv_core_rf_4 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_4_D_IN;
	if (lEcho_p_rv_core_rf_5_EN)
	  lEcho_p_rv_core_rf_5 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_5_D_IN;
	if (lEcho_p_rv_core_rf_6_EN)
	  lEcho_p_rv_core_rf_6 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_6_D_IN;
	if (lEcho_p_rv_core_rf_7_EN)
	  lEcho_p_rv_core_rf_7 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_7_D_IN;
	if (lEcho_p_rv_core_rf_8_EN)
	  lEcho_p_rv_core_rf_8 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_8_D_IN;
	if (lEcho_p_rv_core_rf_9_EN)
	  lEcho_p_rv_core_rf_9 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rf_9_D_IN;
	if (lEcho_p_rv_core_rv1_EN)
	  lEcho_p_rv_core_rv1 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rv1_D_IN;
	if (lEcho_p_rv_core_rv2_EN)
	  lEcho_p_rv_core_rv2 <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rv2_D_IN;
	if (lEcho_p_rv_core_rvd_EN)
	  lEcho_p_rv_core_rvd <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_rvd_D_IN;
	if (lEcho_p_rv_core_starting_EN)
	  lEcho_p_rv_core_starting <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_starting_D_IN;
	if (lEcho_p_rv_core_state_EN)
	  lEcho_p_rv_core_state <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_state_D_IN;
	if (lEcho_p_rv_core_toDmem_rv_EN)
	  lEcho_p_rv_core_toDmem_rv <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_toDmem_rv_D_IN;
	if (lEcho_p_rv_core_toImem_rv_EN)
	  lEcho_p_rv_core_toImem_rv <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_toImem_rv_D_IN;
	if (lEcho_p_rv_core_toMMIO_rv_EN)
	  lEcho_p_rv_core_toMMIO_rv <= `BSV_ASSIGNMENT_DELAY
	      lEcho_p_rv_core_toMMIO_rv_D_IN;
	if (lEcho_p_status_EN)
	  lEcho_p_status <= `BSV_ASSIGNMENT_DELAY lEcho_p_status_D_IN;
	if (memslave_0_fifoReadAddrGenerator_addrReg_EN)
	  memslave_0_fifoReadAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoReadAddrGenerator_addrReg_D_IN;
	if (memslave_0_fifoReadAddrGenerator_burstCountReg_EN)
	  memslave_0_fifoReadAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoReadAddrGenerator_burstCountReg_D_IN;
	if (memslave_0_fifoReadAddrGenerator_isFirstReg_EN)
	  memslave_0_fifoReadAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoReadAddrGenerator_isFirstReg_D_IN;
	if (memslave_0_fifoReadAddrGenerator_isLastReg_EN)
	  memslave_0_fifoReadAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoReadAddrGenerator_isLastReg_D_IN;
	if (memslave_0_fifoWriteAddrGenerator_addrReg_EN)
	  memslave_0_fifoWriteAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoWriteAddrGenerator_addrReg_D_IN;
	if (memslave_0_fifoWriteAddrGenerator_burstCountReg_EN)
	  memslave_0_fifoWriteAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoWriteAddrGenerator_burstCountReg_D_IN;
	if (memslave_0_fifoWriteAddrGenerator_isFirstReg_EN)
	  memslave_0_fifoWriteAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoWriteAddrGenerator_isFirstReg_D_IN;
	if (memslave_0_fifoWriteAddrGenerator_isLastReg_EN)
	  memslave_0_fifoWriteAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_0_fifoWriteAddrGenerator_isLastReg_D_IN;
	if (memslave_1_fifoReadAddrGenerator_addrReg_EN)
	  memslave_1_fifoReadAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoReadAddrGenerator_addrReg_D_IN;
	if (memslave_1_fifoReadAddrGenerator_burstCountReg_EN)
	  memslave_1_fifoReadAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoReadAddrGenerator_burstCountReg_D_IN;
	if (memslave_1_fifoReadAddrGenerator_isFirstReg_EN)
	  memslave_1_fifoReadAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoReadAddrGenerator_isFirstReg_D_IN;
	if (memslave_1_fifoReadAddrGenerator_isLastReg_EN)
	  memslave_1_fifoReadAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoReadAddrGenerator_isLastReg_D_IN;
	if (memslave_1_fifoWriteAddrGenerator_addrReg_EN)
	  memslave_1_fifoWriteAddrGenerator_addrReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoWriteAddrGenerator_addrReg_D_IN;
	if (memslave_1_fifoWriteAddrGenerator_burstCountReg_EN)
	  memslave_1_fifoWriteAddrGenerator_burstCountReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoWriteAddrGenerator_burstCountReg_D_IN;
	if (memslave_1_fifoWriteAddrGenerator_isFirstReg_EN)
	  memslave_1_fifoWriteAddrGenerator_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoWriteAddrGenerator_isFirstReg_D_IN;
	if (memslave_1_fifoWriteAddrGenerator_isLastReg_EN)
	  memslave_1_fifoWriteAddrGenerator_isLastReg <= `BSV_ASSIGNMENT_DELAY
	      memslave_1_fifoWriteAddrGenerator_isLastReg_D_IN;
      end
    if (lEcho_p_dreq_EN)
      lEcho_p_dreq <= `BSV_ASSIGNMENT_DELAY lEcho_p_dreq_D_IN;
    if (lEcho_p_ireq_EN)
      lEcho_p_ireq <= `BSV_ASSIGNMENT_DELAY lEcho_p_ireq_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ctrlPort_0_cycle_count = 64'hAAAAAAAAAAAAAAAA;
    ctrlPort_0_interruptEnableReg = 1'h0;
    ctrlPort_0_num_portals_reg = 32'hAAAAAAAA;
    ctrlPort_0_snapshot = 32'hAAAAAAAA;
    ctrlPort_1_cycle_count = 64'hAAAAAAAAAAAAAAAA;
    ctrlPort_1_interruptEnableReg = 1'h0;
    ctrlPort_1_num_portals_reg = 32'hAAAAAAAA;
    ctrlPort_1_snapshot = 32'hAAAAAAAA;
    ctrl_mux_rv_lastWriteDataSeen = 1'h0;
    lEcho_p_bram_serverAdapterA_cnt = 3'h2;
    lEcho_p_bram_serverAdapterA_s1 = 2'h2;
    lEcho_p_bram_serverAdapterB_cnt = 3'h2;
    lEcho_p_bram_serverAdapterB_s1 = 2'h2;
    lEcho_p_cycle_count = 32'hAAAAAAAA;
    lEcho_p_dreq = 68'hAAAAAAAAAAAAAAAAA;
    lEcho_p_ireq = 68'hAAAAAAAAAAAAAAAAA;
    lEcho_p_rv_core_dInst = 40'hAAAAAAAAAA;
    lEcho_p_rv_core_fromDmem_rv = 69'h0AAAAAAAAAAAAAAAAA;
    lEcho_p_rv_core_fromImem_rv = 69'h0AAAAAAAAAAAAAAAAA;
    lEcho_p_rv_core_fromMMIO_rv = 69'h0AAAAAAAAAAAAAAAAA;
    lEcho_p_rv_core_lfh = 32'hAAAAAAAA;
    lEcho_p_rv_core_mem_business = 6'h2A;
    lEcho_p_rv_core_pc = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_0 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_1 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_10 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_11 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_12 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_13 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_14 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_15 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_16 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_17 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_18 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_19 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_2 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_20 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_21 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_22 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_23 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_24 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_25 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_26 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_27 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_28 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_29 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_3 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_30 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_31 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_4 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_5 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_6 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_7 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_8 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rf_9 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rv1 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rv2 = 32'hAAAAAAAA;
    lEcho_p_rv_core_rvd = 32'hAAAAAAAA;
    lEcho_p_rv_core_starting = 1'h0;
    lEcho_p_rv_core_state = 2'h2;
    lEcho_p_rv_core_toDmem_rv = 69'h0AAAAAAAAAAAAAAAAA;
    lEcho_p_rv_core_toImem_rv = 69'h0AAAAAAAAAAAAAAAAA;
    lEcho_p_rv_core_toMMIO_rv = 69'h0AAAAAAAAAAAAAAAAA;
    lEcho_p_status = 32'hAAAAAAAA;
    memslave_0_fifoReadAddrGenerator_addrReg = 5'h0A;
    memslave_0_fifoReadAddrGenerator_burstCountReg = 10'h2AA;
    memslave_0_fifoReadAddrGenerator_isFirstReg = 1'h0;
    memslave_0_fifoReadAddrGenerator_isLastReg = 1'h0;
    memslave_0_fifoWriteAddrGenerator_addrReg = 5'h0A;
    memslave_0_fifoWriteAddrGenerator_burstCountReg = 10'h2AA;
    memslave_0_fifoWriteAddrGenerator_isFirstReg = 1'h0;
    memslave_0_fifoWriteAddrGenerator_isLastReg = 1'h0;
    memslave_1_fifoReadAddrGenerator_addrReg = 5'h0A;
    memslave_1_fifoReadAddrGenerator_burstCountReg = 10'h2AA;
    memslave_1_fifoReadAddrGenerator_isFirstReg = 1'h0;
    memslave_1_fifoReadAddrGenerator_isLastReg = 1'h0;
    memslave_1_fifoWriteAddrGenerator_addrReg = 5'h0A;
    memslave_1_fifoWriteAddrGenerator_burstCountReg = 10'h2AA;
    memslave_1_fifoWriteAddrGenerator_isFirstReg = 1'h0;
    memslave_1_fifoWriteAddrGenerator_isLastReg = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_slave_read_server_readReq_put &&
	  slave_read_server_readReq_put[15:6] > 10'd4)
	$display("**** \n\n mkPhysMemSlaveMux.readReq len=%d \n\n ****",
		 slave_read_server_readReq_put[15:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_slave_write_server_writeReq_put &&
	  slave_write_server_writeReq_put[15:6] > 10'd4)
	$display("**** \n\n mkPhysMemSlaveMux.writeReq len=%d \n\n ****",
		 slave_write_server_writeReq_put[15:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (lEcho_p_bram_serverAdapterA_s1[1] &&
	  !lEcho_p_bram_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (lEcho_p_bram_serverAdapterB_s1[1] &&
	  !lEcho_p_bram_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode) $write("REG ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode)
	$write("'h%h", lEcho_p_rv_core_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode)
	$write("'h%h", lEcho_p_rv_core_fromImem_rv_port1__read[19:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode) $write("'h%h", rs1__h8457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode)
	$write("'h%h", lEcho_p_rv_core_fromImem_rv_port1__read[24:20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode) $write("'h%h", rs2__h8458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_decode) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_execute &&
	  NOT_IF_lEcho_p_rv_core_dInst_22_BITS_6_TO_4_13_ETC___d446)
	$write("REDIRECT ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_execute &&
	  NOT_IF_lEcho_p_rv_core_dInst_22_BITS_6_TO_4_13_ETC___d446)
	$write("'h%h", nextPc__h10702);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_execute &&
	  NOT_IF_lEcho_p_rv_core_dInst_22_BITS_6_TO_4_13_ETC___d446)
	$write("'h%h", lEcho_p_rv_core_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_execute &&
	  NOT_IF_lEcho_p_rv_core_dInst_22_BITS_6_TO_4_13_ETC___d446)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_writeback && lEcho_p_rv_core_dInst[36])
	$write("WR REG");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_writeback && lEcho_p_rv_core_dInst[36])
	$write("'h%h", lEcho_p_rv_core_dInst[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_writeback && lEcho_p_rv_core_dInst[36])
	$write("'h%h", v__h11517);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_rv_core_writeback && lEcho_p_rv_core_dInst[36])
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[67:64] == 4'hF &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF4)
	$fwrite(32'h80000002,
		"%0d",
		lEcho_p_rv_core_toMMIO_rv_port1__read[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[67:64] == 4'hF &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF4)
	$fflush(32'h80000002);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF0)
	$fwrite(32'h80000002,
		"%c",
		lEcho_p_rv_core_toMMIO_rv_port1__read[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF0)
	$fflush(32'h80000002);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF8 &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[31:0] == 32'd0)
	$fdisplay(32'h80000002, "  \033[0;32mPASS\033[0m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF8 &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[31:0] != 32'd0)
	$fdisplay(32'h80000002,
		  "  \033[0;31mFAIL\033[0m (%0d)",
		  lEcho_p_rv_core_toMMIO_rv_port1__read[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF8)
	$fflush(32'h80000002);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lEcho_p_requestMMIO &&
	  lEcho_p_rv_core_toMMIO_rv_port1__read[63:32] == 32'hF000FFF8)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrl_mux_rv_req_aw &&
	  NOT_ctrl_mux_rv_req_aws_first__074_BITS_15_TO__ETC___d1078 &&
	  ctrl_mux_rv_ws_D_OUT == 1'd0)
	$display("**** \n\n mkMemMethodMux.writeReq len=%d \n\n ****",
		 ctrl_mux_rv_req_aws_D_OUT[15:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrl_mux_rv_req_aw &&
	  NOT_ctrl_mux_rv_req_aws_first__074_BITS_15_TO__ETC___d1078 &&
	  ctrl_mux_rv_ws_D_OUT == 1'd1)
	$display("**** \n\n mkMemMethodMux.writeReq len=%d \n\n ****",
		 ctrl_mux_rv_req_aws_D_OUT[15:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrl_mux_rv_req_ar &&
	  NOT_ctrl_mux_rv_req_ars_first__104_BITS_15_TO__ETC___d1108 &&
	  ctrl_mux_rv_rs_D_OUT == 1'd0)
	$display("**** \n\n mkMemMethodMux.readReq len=%d \n\n ****",
		 ctrl_mux_rv_req_ars_D_OUT[15:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ctrl_mux_rv_req_ar &&
	  NOT_ctrl_mux_rv_req_ars_first__104_BITS_15_TO__ETC___d1108 &&
	  ctrl_mux_rv_rs_D_OUT == 1'd1)
	$display("**** \n\n mkMemMethodMux.readReq len=%d \n\n ****",
		 ctrl_mux_rv_req_ars_D_OUT[15:6]);
  end
  // synopsys translate_on
endmodule  // mkConnectalTop

